Interact with Solana nodes directly with the JSON RPC API via the HTTP and Websocket methods.Explore the APIExplore the JSON RPC MethodsLearn Solana DevelopmentBuild and deploy your first on chain Solana program directly in your browser.Get StartedLearn core conceptsLearn through codingSetup your local developmentGet started with Solana developmentBuild and deploy your first on chain Solana program directly in your browser.Get StartedCommunity ResourcesCopyright © 2023 Solana FoundationSolana DocumentaionSolana is a blockchain built for mass adoption. It's a high performance network that is utilized for
a range of use cases, including finance, NFTs, payments, and gaming. Solana operates as a single
global state machine, and is open, interoperable and decentralized.Getting started​Dive right into Solana to start building or setup your tooling.Setup local environment - Install the Solana CLI to get your local development environment setupHello World in your browser - Build and deploy your first on-chain Solana program,
directly in your browser using Solana PlaygroundStart learning​Build a strong understanding of the core concepts that make Solana different from other blockchains.Transactions - Collection of instructions for the blockchain to executeAccounts - Data and state storage mechanism for SolanaPrograms - The executable code used to perform actions on the blockchainCross-Program Invocation - Core of the "composability"
of Solana, this is how programs can "call" each other.Understanding the architecture​Get to know the underlying architecture of how the proof-of-stake blockchain works.Validators - the individual nodes that are the backbone of the networkClusters - a collection of validators that work together for consensusRunning a validator​Explore what it takes to operate a Solana validator and help secure the network.System requirements - Recommended hardware requirements and expected SOL
needed to operate a validatorQuick start guide - Setup a validator and get connected to a cluster
for the first timeLearn more​Solana nodes accept HTTP requests using the JSON-RPC 2.0 specification.infoFor JavaScript applications, use the @solana/web3.js library as a convenient interface for the RPC methods to interact with a Solana node.For an PubSub connection to a Solana node, use the Websocket API.RPC HTTP Endpoint​Default port: 8899 e.g. http://localhost:8899, http://192.168.1.88:8899Request Formatting​To make a JSON-RPC request, send an HTTP POST request with a Content-Type: application/json header. The JSON request data should contain 4 fields:jsonrpc: <string> - set to "2.0"id: <number> - a unique client-generated identifying integermethod: <string> - a string containing the method to be invokedparams: <array> - a JSON array of ordered parameter valuesExample using curl:curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getBalance",    "params": [      "83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri"    ]  }'The response output will be a JSON object with the following fields:jsonrpc: <string> - matching the request specificationid: <number> - matching the request identifierresult: <array|number|object|string> - requested data or success confirmationRequests can be sent in batches by sending an array of JSON-RPC request objects as the data for a single POST.Definitions​Hash: A SHA-256 hash of a chunk of data.Pubkey: The public key of a Ed25519 key-pair.Transaction: A list of Solana instructions signed by a client keypair to authorize those actions.Signature: An Ed25519 signature of transaction's payload data including instructions. This can be used to identify transactions.Configuring State Commitment​For preflight checks and transaction processing, Solana nodes choose which bank
state to query based on a commitment requirement set by the client. The
commitment describes how finalized a block is at that point in time. When
querying the ledger state, it's recommended to use lower levels of commitment
to report progress and higher levels to ensure the state will not be rolled back.In descending order of commitment (most finalized to least finalized), clients
may specify:"finalized" - the node will query the most recent block confirmed by supermajority
of the cluster as having reached maximum lockout, meaning the cluster has
recognized this block as finalized"confirmed" - the node will query the most recent block that has been voted on by supermajority of the cluster.It incorporates votes from gossip and replay.It does not count votes on descendants of a block, only direct votes on that block.This confirmation level also upholds "optimistic confirmation" guarantees in
release 1.3 and onwards."processed" - the node will query its most recent block. Note that the block
may still be skipped by the cluster.For processing many dependent transactions in series, it's recommended to use
"confirmed" commitment, which balances speed with rollback safety.
For total safety, it's recommended to use"finalized" commitment.Example​The commitment parameter should be included as the last element in the params array:curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getBalance",    "params": [      "83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri",      {        "commitment": "finalized"      }    ]  }'Default:​If commitment configuration is not provided, the node will default to "finalized" commitmentOnly methods that query bank state accept the commitment parameter. They are indicated in the API Reference below.RpcResponse Structure​Many methods that take a commitment parameter return an RpcResponse JSON object comprised of two parts:context : An RpcResponseContext JSON structure including a slot field at which the operation was evaluated.value : The value returned by the operation itself.Parsed Responses​Some methods support an encoding parameter, and can return account or
instruction data in parsed JSON format if "encoding":"jsonParsed" is requested
and the node has a parser for the owning program. Solana nodes currently support
JSON parsing for the following native and SPL programs:ProgramAccount StateInstructionsAddress Lookupv1.15.0v1.15.0BPF Loadern/astableBPF Upgradeable LoaderstablestableConfigstableSPL Associated Token Accountn/astableSPL Memon/astableSPL TokenstablestableSPL Token 2022stablestableStakestablestableVotestablestableThe list of account parsers can be found here, and instruction parsers here.Filter criteria​Some methods support providing a filters object to enable pre-filtering the data returned within the RpcResponse JSON object. The following filters exist:memcmp: object - compares a provided series of bytes with program account data at a particular offset. Fields:offset: usize - offset into program account data to start comparisonbytes: string - data to match, as encoded stringencoding: string - encoding for filter bytes data, either "base58" or "base64". Data is limited in size to 128 or fewer decoded bytes.NEW: This field, and base64 support generally, is only available in solana-core v1.14.0 or newer. Please omit when querying nodes on earlier versionsdataSize: u64 - compares the program account data length with the provided data sizeHealth Check​Although not a JSON RPC API, a GET /health at the RPC HTTP Endpoint provides a
health-check mechanism for use by load balancers or other network
infrastructure. This request will always return a HTTP 200 OK response with a body of
"ok", "behind" or "unknown" based on the following conditions:If one or more --known-validator arguments are provided to solana-validator - "ok" is returned
when the node has within HEALTH_CHECK_SLOT_DISTANCE slots of the highest
known validator, otherwise "behind". "unknown" is returned when no slot
information from known validators is not yet available."ok" is always returned if no known validators are provided.JSON RPC API Reference​getAccountInfo​Returns all information associated with the account of provided PubkeyParameters:​Pubkey of account to query, as base-58 encoded stringConfiguration object containing the following fields:Encoding format for Account dataValues: base58base64base64+zstdjsonParsedDetailsbase58 is slow and limited to less than 129 bytes of Account data.base64 will return base64 encoded data for Account data of any size.base64+zstd compresses the Account data using Zstandard
and base64-encodes the result.jsonParsed encoding attempts to use program-specific state parsers to return
more human-readable and explicit account state data.If jsonParsed is requested but a parser cannot be found, the field falls
back to base64 encoding, detectable when the data field is type string.limit the returned account data using the provided "offset: <usize>" and "length: <usize>" fieldsonly available for base58, base64 or base64+zstd encodings.The minimum slot that the request can be evaluated atResult:​The result will be an RpcResponse JSON object with value equal to:<null> - if the requested account doesn't exist<object> - otherwise, a JSON object containing:lamports: <u64> - number of lamports assigned to this account, as a u64owner: <string> - base-58 encoded Pubkey of the program this account has been assigned todata: <[string, encoding]|object> - data associated with the account, either as encoded binary data or JSON format {<program>: <state>} - depending on encoding parameterexecutable: <bool> - boolean indicating if the account contains a program (and is strictly read-only)rentEpoch: <u64> - the epoch at which this account will next owe rent, as u64size: <u64> - the data size of the accountCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getAccountInfo",    "params": [      "vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg",      {        "encoding": "base58"      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1    },    "value": {      "data": [        "11116bv5nS2h3y12kD1yUKeMZvGcKLSjQgX6BeV7u1FrjeJcKfsHRTPuR3oZ1EioKtYGiYxpxMG5vpbZLsbcBYBEmZZcMKaSoGx9JZeAuWf",        "base58"      ],      "executable": false,      "lamports": 1000000000,      "owner": "11111111111111111111111111111111",      "rentEpoch": 2,      "space": 80    }  },  "id": 1}getBalance​Returns the balance of the account of provided PubkeyParameters:​Pubkey of account to query, as base-58 encoded stringConfiguration object containing the following fields:The minimum slot that the request can be evaluated atResult:​RpcResponse<u64> - RpcResponse JSON object with value field set to the balanceCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getBalance",    "params": [      "83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri"    ]  }'Response:​{  "jsonrpc": "2.0",  "result": { "context": { "slot": 1 }, "value": 0 },  "id": 1}getBlock​Returns identity and transaction information about a confirmed block in the ledgerParameters:​slot number, as u64 integerConfiguration object containing the following fields:the default is finalizedprocessed is not supported.encoding format for each returned TransactionValues: jsonjsonParsedbase58base64DetailsjsonParsed attempts to use program-specific instruction parsers to return
more human-readable and explicit data in the transaction.message.instructions list.If jsonParsed is requested but a parser cannot be found, the instruction
falls back to regular JSON encoding (accounts, data, and programIdIndex fields).level of transaction detail to returnValues: fullaccountssignaturesnoneDetailsIf accounts are requested, transaction details only include signatures and
an annotated list of accounts in each transaction.Transaction metadata is limited to only: fee, err, pre_balances,
post_balances, pre_token_balances, and post_token_balances.the max transaction version to return in responses.DetailsIf the requested block contains a transaction with a higher version, an
error will be returned.If this parameter is omitted, only legacy transactions will be returned, and
a block containing any versioned transaction will prompt the error.whether to populate the `rewards` array. If parameter not provided, the default includes rewards.Result:​The result field will be an object with the following fields:<null> - if specified block is not confirmed<object> - if block is confirmed, an object with the following fields:blockhash: <string> - the blockhash of this block, as base-58 encoded stringpreviousBlockhash: <string> - the blockhash of this block's parent, as base-58 encoded string; if the parent block is not available due to ledger cleanup, this field will return "11111111111111111111111111111111"parentSlot: <u64> - the slot index of this block's parenttransactions: <array> - present if "full" transaction details are requested; an array of JSON objects containing:transaction: <object|[string,encoding]> - Transaction object, either in JSON format or encoded binary data, depending on encoding parametermeta: <object> - transaction status metadata object, containing null or:err: <object|null> - Error if transaction failed, null if transaction succeeded. TransactionError definitionsfee: <u64> - fee this transaction was charged, as u64 integerpreBalances: <array> - array of u64 account balances from before the transaction was processedpostBalances: <array> - array of u64 account balances after the transaction was processedinnerInstructions: <array|null> - List of inner instructions or null if inner instruction recording was not enabled during this transactionpreTokenBalances: <array|undefined> - List of token balances from before the transaction was processed or omitted if token balance recording was not yet enabled during this transactionpostTokenBalances: <array|undefined> - List of token balances from after the transaction was processed or omitted if token balance recording was not yet enabled during this transactionlogMessages: <array|null> - array of string log messages or null if log message recording was not enabled during this transactionrewards: <array|null> - transaction-level rewards, populated if rewards are requested; an array of JSON objects containing:pubkey: <string> - The public key, as base-58 encoded string, of the account that received the rewardlamports: <i64>- number of reward lamports credited or debited by the account, as a i64postBalance: <u64> - account balance in lamports after the reward was appliedrewardType: <string|undefined> - type of reward: "fee", "rent", "voting", "staking"commission: <u8|undefined> - vote account commission when the reward was credited, only present for voting and staking rewardsDEPRECATED: status: <object> - Transaction status"Ok": <null> - Transaction was successful"Err": <ERR> - Transaction failed with TransactionErrorloadedAddresses: <object|undefined> - Transaction addresses loaded from address lookup tables. Undefined if maxSupportedTransactionVersion is not set in request params, or if jsonParsed encoding is set in request params.writable: <array[string]> - Ordered list of base-58 encoded addresses for writable loaded accountsreadonly: <array[string]> - Ordered list of base-58 encoded addresses for readonly loaded accountsreturnData: <object|undefined> - the most-recent return data generated by an instruction in the transaction, with the following fields:programId: <string> - the program that generated the return data, as base-58 encoded Pubkeydata: <[string, encoding]> - the return data itself, as base-64 encoded binary datacomputeUnitsConsumed: <u64|undefined> - number of compute units consumed by the transactionversion: <"legacy"|number|undefined> - Transaction version. Undefined if maxSupportedTransactionVersion is not set in request params.signatures: <array> - present if "signatures" are requested for transaction details; an array of signatures strings, corresponding to the transaction order in the blockrewards: <array|undefined> - block-level rewards, present if rewards are requested; an array of JSON objects containing:pubkey: <string> - The public key, as base-58 encoded string, of the account that received the rewardlamports: <i64>- number of reward lamports credited or debited by the account, as a i64postBalance: <u64> - account balance in lamports after the reward was appliedrewardType: <string|undefined> - type of reward: "fee", "rent", "voting", "staking"commission: <u8|undefined> - vote account commission when the reward was credited, only present for voting and staking rewardsblockTime: <i64|null> - estimated production time, as Unix timestamp (seconds since the Unix epoch). null if not availableblockHeight: <u64|null> - the number of blocks beneath this blockCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0","id":1,    "method":"getBlock",    "params": [      430,      {        "encoding": "json",        "maxSupportedTransactionVersion":0,        "transactionDetails":"full",        "rewards":false      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "blockHeight": 428,    "blockTime": null,    "blockhash": "3Eq21vXNB5s86c62bVuUfTeaMif1N2kUqRPBmGRJhyTA",    "parentSlot": 429,    "previousBlockhash": "mfcyqEXB3DnHXki6KjjmZck6YjmZLvpAByy2fj4nh6B",    "transactions": [      {        "meta": {          "err": null,          "fee": 5000,          "innerInstructions": [],          "logMessages": [],          "postBalances": [499998932500, 26858640, 1, 1, 1],          "postTokenBalances": [],          "preBalances": [499998937500, 26858640, 1, 1, 1],          "preTokenBalances": [],          "rewards": null,          "status": {            "Ok": null          }        },        "transaction": {          "message": {            "accountKeys": [              "3UVYmECPPMZSCqWKfENfuoTv51fTDTWicX9xmBD2euKe",              "AjozzgE83A3x1sHNUR64hfH7zaEBWeMaFuAN9kQgujrc",              "SysvarS1otHashes111111111111111111111111111",              "SysvarC1ock11111111111111111111111111111111",              "Vote111111111111111111111111111111111111111"            ],            "header": {              "numReadonlySignedAccounts": 0,              "numReadonlyUnsignedAccounts": 3,              "numRequiredSignatures": 1            },            "instructions": [              {                "accounts": [1, 2, 3, 0],                "data": "37u9WtQpcm6ULa3WRQHmj49EPs4if7o9f1jSRVZpm2dvihR9C8jY4NqEwXUbLwx15HBSNcP1",                "programIdIndex": 4              }            ],            "recentBlockhash": "mfcyqEXB3DnHXki6KjjmZck6YjmZLvpAByy2fj4nh6B"          },          "signatures": [            "2nBhEBYYvfaAe16UMNqRHre4YNSskvuYgx3M6E4JP1oDYvZEJHvoPzyUidNgNX5r9sTyN1J9UxtbCXy2rqYcuyuv"          ]        }      }    ]  },  "id": 1}Transaction Structure​Transactions are quite different from those on other blockchains. Be sure to review Anatomy of a Transaction to learn about transactions on Solana.The JSON structure of a transaction is defined as follows:signatures: <array[string]> - A list of base-58 encoded signatures applied to the transaction. The list is always of length message.header.numRequiredSignatures and not empty. The signature at index i corresponds to the public key at index i in message.accountKeys. The first one is used as the transaction id.message: <object> - Defines the content of the transaction.accountKeys: <array[string]> - List of base-58 encoded public keys used by the transaction, including by the instructions and for signatures. The first message.header.numRequiredSignatures public keys must sign the transaction.header: <object> - Details the account types and signatures required by the transaction.numRequiredSignatures: <number> - The total number of signatures required to make the transaction valid. The signatures must match the first numRequiredSignatures of message.accountKeys.numReadonlySignedAccounts: <number> - The last numReadonlySignedAccounts of the signed keys are read-only accounts. Programs may process multiple transactions that load read-only accounts within a single PoH entry, but are not permitted to credit or debit lamports or modify account data. Transactions targeting the same read-write account are evaluated sequentially.numReadonlyUnsignedAccounts: <number> - The last numReadonlyUnsignedAccounts of the unsigned keys are read-only accounts.recentBlockhash: <string> - A base-58 encoded hash of a recent block in the ledger used to prevent transaction duplication and to give transactions lifetimes.instructions: <array[object]> - List of program instructions that will be executed in sequence and committed in one atomic transaction if all succeed.programIdIndex: <number> - Index into the message.accountKeys array indicating the program account that executes this instruction.accounts: <array[number]> - List of ordered indices into the message.accountKeys array indicating which accounts to pass to the program.data: <string> - The program input data encoded in a base-58 string.addressTableLookups: <array[object]|undefined> - List of address table lookups used by a transaction to dynamically load addresses from on-chain address lookup tables. Undefined if maxSupportedTransactionVersion is not set.accountKey: <string> - base-58 encoded public key for an address lookup table account.writableIndexes: <array[number]> - List of indices used to load addresses of writable accounts from a lookup table.readonlyIndexes: <array[number]> - List of indices used to load addresses of readonly accounts from a lookup table.Inner Instructions Structure​The Solana runtime records the cross-program instructions that are invoked during transaction processing and makes these available for greater transparency of what was executed on-chain per transaction instruction. Invoked instructions are grouped by the originating transaction instruction and are listed in order of processing.The JSON structure of inner instructions is defined as a list of objects in the following structure:index: number - Index of the transaction instruction from which the inner instruction(s) originatedinstructions: <array[object]> - Ordered list of inner program instructions that were invoked during a single transaction instruction.programIdIndex: <number> - Index into the message.accountKeys array indicating the program account that executes this instruction.accounts: <array[number]> - List of ordered indices into the message.accountKeys array indicating which accounts to pass to the program.data: <string> - The program input data encoded in a base-58 string.Token Balances Structure​The JSON structure of token balances is defined as a list of objects in the following structure:accountIndex: <number> - Index of the account in which the token balance is provided for.mint: <string> - Pubkey of the token's mint.owner: <string|undefined> - Pubkey of token balance's owner.programId: <string|undefined> - Pubkey of the Token program that owns the account.uiTokenAmount: <object> -amount: <string> - Raw amount of tokens as a string, ignoring decimals.decimals: <number> - Number of decimals configured for token's mint.uiAmount: <number|null> - Token amount as a float, accounting for decimals. DEPRECATEDuiAmountString: <string> - Token amount as a string, accounting for decimals.getBlockHeight​Returns the current block height of the nodeParameters:​Configuration object containing the following fields:The minimum slot that the request can be evaluated atResult:​<u64> - Current block heightCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc":"2.0","id":1,    "method":"getBlockHeight"  }'Result:Response:​{  "jsonrpc": "2.0",  "result": 1233,  "id": 1}getBlockProduction​Returns recent block production information from the current or previous epoch.Parameters:​Configuration object containing the following fields:Only return results for this validator identity (base-58 encoded)Slot range to return block production for. If parameter not provided, defaults to current epoch.firstSlot: <u64> - first slot to return block production information for (inclusive)(optional) lastSlot: <u64> - last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slotResult:​The result will be an RpcResponse JSON object with value equal to:<object>byIdentity: <object> - a dictionary of validator identities,
as base-58 encoded strings. Value is a two element array containing the
number of leader slots and the number of blocks produced.range: <object> - Block production slot rangefirstSlot: <u64> - first slot of the block production information (inclusive)lastSlot: <u64> - last slot of block production information (inclusive)Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getBlockProduction"}'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 9887    },    "value": {      "byIdentity": {        "85iYT5RuzRTDgjyRa3cP8SYhM2j21fj7NhfJ3peu1DPr": [9888, 9886]      },      "range": {        "firstSlot": 0,        "lastSlot": 9887      }    }  },  "id": 1}getBlockCommitment​Returns commitment for particular blockParameters:​block number, identified by SlotResult:​The result field will be a JSON object containing:commitment - commitment, comprising either:<null> - Unknown block<array> - commitment, array of u64 integers logging the amount of cluster stake in lamports that has voted on the block at each depth from 0 to MAX_LOCKOUT_HISTORY + 1totalStake - total active stake, in lamports, of the current epochCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getBlockCommitment",    "params":[5]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "commitment": [      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,      0, 0, 0, 0, 0, 10, 32    ],    "totalStake": 42  },  "id": 1}getBlocks​Returns a list of confirmed blocks between two slotsParameters:​end_slot, as u64 integerstart_slot, as u64 integer (must be no more than 500,000 blocks higher than the `start_slot`)Configuration object containing the following fields:"processed" is not supportedResult:​The result field will be an array of u64 integers listing confirmed blocks
between start_slot and either end_slot - if provided, or latest confirmed block,
inclusive. Max range allowed is 500,000 slots.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getBlocks",    "params": [      5, 10    ]  }'Response:​{  "jsonrpc": "2.0",  "result": [5, 6, 7, 8, 9, 10],  "id": 1}getBlocksWithLimit​Returns a list of confirmed blocks starting at the given slotParameters:​start_slot, as u64 integerlimit, as u64 integer (must be no more than 500,000 blocks higher than the start_slot)Configuration object containing the following field:"processed" is not supportedResult:​The result field will be an array of u64 integers listing confirmed blocks
starting at start_slot for up to limit blocks, inclusive.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id":1,    "method":"getBlocksWithLimit",    "params":[5, 3]  }'Response:​{  "jsonrpc": "2.0",  "result": [5, 6, 7],  "id": 1}getBlockTime​Returns the estimated production time of a block.infoEach validator reports their UTC time to the ledger on a regular interval by
intermittently adding a timestamp to a Vote for a particular block. A requested
block's time is calculated from the stake-weighted mean of the Vote timestamps
in a set of recent blocks recorded on the ledger.Parameters:​block number, identified by SlotResult:​<i64> - estimated production time, as Unix timestamp (seconds since the Unix epoch)<null> - timestamp is not available for this blockCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc":"2.0", "id":1,    "method": "getBlockTime",    "params":[5]  }'Response:​{  "jsonrpc": "2.0",  "result": 1574721591,  "id": 1}getClusterNodes​Returns information about all the nodes participating in the clusterParameters:​NoneResult:​The result field will be an array of JSON objects, each with the following sub fields:pubkey: <string> - Node public key, as base-58 encoded stringgossip: <string|null> - Gossip network address for the nodetpu: <string|null> - TPU network address for the noderpc: <string|null> - JSON RPC network address for the node, or null if the JSON RPC service is not enabledversion: <string|null> - The software version of the node, or null if the version information is not availablefeatureSet: <u32|null > - The unique identifier of the node's feature setshredVersion: <u16|null> - The shred version the node has been configured to useCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getClusterNodes"  }'Response:​{  "jsonrpc": "2.0",  "result": [    {      "gossip": "10.239.6.48:8001",      "pubkey": "9QzsJf7LPLj8GkXbYT3LFDKqsj2hHG7TA3xinJHu8epQ",      "rpc": "10.239.6.48:8899",      "tpu": "10.239.6.48:8856",      "version": "1.0.0 c375ce1f"    }  ],  "id": 1}getEpochInfo​Returns information about the current epochParameters:​Pubkey of account to query, as base-58 encoded stringConfiguration object containing the following fields:The minimum slot that the request can be evaluated atResult:​The result field will be an object with the following fields:absoluteSlot: <u64> - the current slotblockHeight: <u64> - the current block heightepoch: <u64> - the current epochslotIndex: <u64> - the current slot relative to the start of the current epochslotsInEpoch: <u64> - the number of slots in this epochtransactionCount: <u64|null> - total number of transactions processed without error since genesisCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getEpochInfo"}'Response:​{  "jsonrpc": "2.0",  "result": {    "absoluteSlot": 166598,    "blockHeight": 166500,    "epoch": 27,    "slotIndex": 2790,    "slotsInEpoch": 8192,    "transactionCount": 22661093  },  "id": 1}getEpochSchedule​Returns the epoch schedule information from this cluster's genesis configParameters:​NoneResult:​The result field will be an object with the following fields:slotsPerEpoch: <u64> - the maximum number of slots in each epochleaderScheduleSlotOffset: <u64> - the number of slots before beginning of an epoch to calculate a leader schedule for that epochwarmup: <bool> - whether epochs start short and growfirstNormalEpoch: <u64> - first normal-length epoch, log2(slotsPerEpoch) - log2(MINIMUM_SLOTS_PER_EPOCH)firstNormalSlot: <u64> - MINIMUM_SLOTS_PER_EPOCH * (2.pow(firstNormalEpoch) - 1)Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc":"2.0","id":1,    "method":"getEpochSchedule"  }'Response:​{  "jsonrpc": "2.0",  "result": {    "firstNormalEpoch": 8,    "firstNormalSlot": 8160,    "leaderScheduleSlotOffset": 8192,    "slotsPerEpoch": 8192,    "warmup": true  },  "id": 1}getFeeForMessage​Get the fee the network will charge for a particular MessagecautionNEW: This method is only available in solana-core v1.9 or newer. Please use
getFees for solana-core v1.8Parameters:​Base-64 encoded MessageConfiguration object containing the following fields:The minimum slot that the request can be evaluated atResult:​<u64|null> - Fee corresponding to the message at the specified blockhashCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '{  "id":1,  "jsonrpc":"2.0",  "method":"getFeeForMessage",  "params":[    "AQABAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAA",    {      "commitment":"processed"    }  ]}'Response:​{  "jsonrpc": "2.0",  "result": { "context": { "slot": 5068 }, "value": 5000 },  "id": 1}getFirstAvailableBlock​Returns the slot of the lowest confirmed block that has not been purged from the ledgerParameters:​NoneResult:​<u64> - SlotCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc":"2.0","id":1,    "method":"getFirstAvailableBlock"  }'Response:​{ "jsonrpc": "2.0", "result": 250000, "id": 1 }getGenesisHash​Returns the genesis hashParameters:​NoneResult:​<string> - a Hash as base-58 encoded stringCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getGenesisHash"}'Response:​{  "jsonrpc": "2.0",  "result": "GH7ome3EiwEr7tu9JuTh2dpYWBJK3z69Xm1ZE3MEE6JC",  "id": 1}getHealth​Returns the current health of the node.cautionIf one or more --known-validator arguments are provided to solana-validator - "ok" is returned
when the node has within HEALTH_CHECK_SLOT_DISTANCE slots of the highest known validator,
otherwise an error is returned. "ok" is always returned if no known validators are provided.Parameters:​NoneResult:​If the node is healthy: "ok"If the node is unhealthy, a JSON RPC error response is returned. The specifics of the error response are UNSTABLE and may change in the futureCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getHealth"}'Response:​Healthy Result:{ "jsonrpc": "2.0", "result": "ok", "id": 1 }Unhealthy Result (generic):{  "jsonrpc": "2.0",  "error": {    "code": -32005,    "message": "Node is unhealthy",    "data": {}  },  "id": 1}Unhealthy Result (if additional information is available){  "jsonrpc": "2.0",  "error": {    "code": -32005,    "message": "Node is behind by 42 slots",    "data": {      "numSlotsBehind": 42    }  },  "id": 1}getHighestSnapshotSlot​Returns the highest slot information that the node has snapshots for.This will find the highest full snapshot slot, and the highest incremental
snapshot slot based on the full snapshot slot, if there is one.cautionNEW: This method is only available in solana-core v1.9 or newer. Please use
getSnapshotSlot for solana-core v1.8Parameters:​NoneResult:​When the node has a snapshot, this returns a JSON object with the following fields:full: <u64> - Highest full snapshot slotincremental: <u64|undefined> - Highest incremental snapshot slot based on fullCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1,"method":"getHighestSnapshotSlot"}'Response:​Result when the node has a snapshot:{  "jsonrpc": "2.0",  "result": {    "full": 100,    "incremental": 110  },  "id": 1}Result when the node has no snapshot:{  "jsonrpc": "2.0",  "error": { "code": -32008, "message": "No snapshot" },  "id": 1}getIdentity​Returns the identity pubkey for the current nodeParameters:​NoneResult:​The result field will be a JSON object with the following fields:identity - the identity pubkey of the current node (as a base-58 encoded string)Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getIdentity"}'Response:​{  "jsonrpc": "2.0",  "result": {    "identity": "2r1F4iWqVcb8M1DbAjQuFpebkQHY9hcVU4WuW2DJBppN"  },  "id": 1}getInflationGovernor​Returns the current inflation governorParameters:​Configuration object containing the following fields:Result:​The result field will be a JSON object with the following fields:initial: <f64> - the initial inflation percentage from time 0terminal: <f64> - terminal inflation percentagetaper: <f64> - rate per year at which inflation is lowered. (Rate reduction is derived using the target slot time in genesis config)foundation: <f64> - percentage of total inflation allocated to the foundationfoundationTerm: <f64> - duration of foundation pool inflation in yearsCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getInflationGovernor"}'Response:​{  "jsonrpc": "2.0",  "result": {    "foundation": 0.05,    "foundationTerm": 7,    "initial": 0.15,    "taper": 0.15,    "terminal": 0.015  },  "id": 1}getInflationRate​Returns the specific inflation values for the current epochParameters:​NoneResult:​The result field will be a JSON object with the following fields:total: <f64> - total inflationvalidator: <f64> -inflation allocated to validatorsfoundation: <f64> - inflation allocated to the foundationepoch: <u64> - epoch for which these values are validCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getInflationRate"}'Response:​{  "jsonrpc": "2.0",  "result": {    "epoch": 100,    "foundation": 0.001,    "total": 0.149,    "validator": 0.148  },  "id": 1}getInflationReward​Returns the inflation / staking reward for a list of addresses for an epochParameters:​An array of addresses to query, as base-58 encoded stringsConfiguration object containing the following fields:An epoch for which the reward occurs. If omitted, the previous epoch will be usedThe minimum slot that the request can be evaluated atResult:​The result field will be a JSON array with the following fields:epoch: <u64> - epoch for which reward occuredeffectiveSlot: <u64> - the slot in which the rewards are effectiveamount: <u64> - reward amount in lamportspostBalance: <u64> - post balance of the account in lamportscommission: <u8|undefined> - vote account commission when the reward was creditedCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getInflationReward",    "params": [      [        "6dmNQ5jwLeLk5REvio1JcMshcbvkYMwy26sJ8pbkvStu",        "BGsqMegLpV6n6Ve146sSX2dTjUMj3M92HnU8BbNRMhF2"      ],      {"epoch": 2}    ]  }'Response:​{  "jsonrpc": "2.0",  "result": [    {      "amount": 2500,      "effectiveSlot": 224,      "epoch": 2,      "postBalance": 499999442500    },    null  ],  "id": 1}getLargestAccounts​Returns the 20 largest accounts, by lamport balance (results may be cached up to two hours)Parameters:​Configuration object containing the following fields:filter results by account typeValues: circulatingnonCirculatingResult:​The result will be an RpcResponse JSON object with value equal to an array of <object> containing:address: <string> - base-58 encoded address of the accountlamports: <u64> - number of lamports in the account, as a u64Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getLargestAccounts"}'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 54    },    "value": [      {        "lamports": 999974,        "address": "99P8ZgtJYe1buSK8JXkvpLh8xPsCFuLYhz9hQFNw93WJ"      },      {        "lamports": 42,        "address": "uPwWLo16MVehpyWqsLkK3Ka8nLowWvAHbBChqv2FZeL"      },      {        "lamports": 42,        "address": "aYJCgU7REfu3XF8b3QhkqgqQvLizx8zxuLBHA25PzDS"      },      {        "lamports": 42,        "address": "CTvHVtQ4gd4gUcw3bdVgZJJqApXE9nCbbbP4VTS5wE1D"      },      {        "lamports": 20,        "address": "4fq3xJ6kfrh9RkJQsmVd5gNMvJbuSHfErywvEjNQDPxu"      },      {        "lamports": 4,        "address": "AXJADheGVp9cruP8WYu46oNkRbeASngN5fPCMVGQqNHa"      },      {        "lamports": 2,        "address": "8NT8yS6LiwNprgW4yM1jPPow7CwRUotddBVkrkWgYp24"      },      {        "lamports": 1,        "address": "SysvarEpochSchedu1e111111111111111111111111"      },      {        "lamports": 1,        "address": "11111111111111111111111111111111"      },      {        "lamports": 1,        "address": "Stake11111111111111111111111111111111111111"      },      {        "lamports": 1,        "address": "SysvarC1ock11111111111111111111111111111111"      },      {        "lamports": 1,        "address": "StakeConfig11111111111111111111111111111111"      },      {        "lamports": 1,        "address": "SysvarRent111111111111111111111111111111111"      },      {        "lamports": 1,        "address": "Config1111111111111111111111111111111111111"      },      {        "lamports": 1,        "address": "SysvarStakeHistory1111111111111111111111111"      },      {        "lamports": 1,        "address": "SysvarRecentB1ockHashes11111111111111111111"      },      {        "lamports": 1,        "address": "SysvarFees111111111111111111111111111111111"      },      {        "lamports": 1,        "address": "Vote111111111111111111111111111111111111111"      }    ]  },  "id": 1}getLatestBlockhash​Returns the latest blockhashcautionNEW: This method is only available in solana-core v1.9 or newer. Please use
getRecentBlockhash for solana-core v1.8Parameters:​Configuration object containing the following fields:The minimum slot that the request can be evaluated atResult:​RpcResponse<object> - RpcResponse JSON object with value field set to a JSON object including:blockhash: <string> - a Hash as base-58 encoded stringlastValidBlockHeight: <u64> - last block height at which the blockhash will be validCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "id":1,    "jsonrpc":"2.0",    "method":"getLatestBlockhash",    "params":[      {        "commitment":"processed"      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 2792    },    "value": {      "blockhash": "EkSnNWid2cvwEVnVx9aBqawnmiCNiDgp3gUdkDPTKN1N",      "lastValidBlockHeight": 3090    }  },  "id": 1}getLeaderSchedule​Returns the leader schedule for an epochParameters:​Fetch the leader schedule for the epoch that corresponds to the provided slot.If unspecified, the leader schedule for the current epoch is fetchedConfiguration object containing the following fields:Only return results for this validator identity (base-58 encoded)Result:​Returns a result with one of the two following values:<null> - if requested epoch is not found, or<object> - the result field will be a dictionary of validator identities,
as base-58 encoded strings, and their corresponding leader slot indices as values
(indices are relative to the first slot in the requested epoch)Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getLeaderSchedule",    "params": [      null,      {        "identity": "4Qkev8aNZcqFNSRhQzwyLMFSsi94jHqE8WNVTJzTP99F"      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "4Qkev8aNZcqFNSRhQzwyLMFSsi94jHqE8WNVTJzTP99F": [      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,      21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,      39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,      57, 58, 59, 60, 61, 62, 63    ]  },  "id": 1}getMaxRetransmitSlot​Get the max slot seen from retransmit stage.Parameters:​NoneResult:​<u64> - Slot numberCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getMaxRetransmitSlot"}'Response:​{ "jsonrpc": "2.0", "result": 1234, "id": 1 }getMaxShredInsertSlot​Get the max slot seen from after shred insert.Parameters:​NoneResult:​<u64> - Slot numberCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getMaxShredInsertSlot"}'Response:​{ "jsonrpc": "2.0", "result": 1234, "id": 1 }getMinimumBalanceForRentExemption​Returns minimum balance required to make account rent exempt.Parameters:​the Account's data lengthConfiguration object containing the following fields:Result:​<u64> - minimum lamports required in the Account to remain rent freeCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getMinimumBalanceForRentExemption",    "params": [50]  }'Response:​{ "jsonrpc": "2.0", "result": 500, "id": 1 }getMultipleAccounts​Returns the account information for a list of Pubkeys.Parameters:​An array of Pubkeys to query, as base-58 encoded strings (up to a maximum of 100)Configuration object containing the following fields:The minimum slot that the request can be evaluated atlimit the returned account data using the provided offset: <usize> and length: <usize> fields; only available for "base58", "base64" or "base64+zstd" encodings.encoding format for the returned Account dataValues: jsonParsedbase58base64base64+zstdDetailsbase58 is slow and limited to less than 129 bytes of Account data.base64 will return base64 encoded data for Account data of any size.base64+zstd compresses the Account data using Zstandard
and base64-encodes the result.jsonParsed encoding attempts to use program-specific state parsers to
return more human-readable and explicit account state data.If jsonParsed is requested but a parser cannot be found, the field falls back to base64
encoding, detectable when the data field is type <string>.Result:​The result will be a JSON object with value equal to an array of:<null> - if the account at that Pubkey doesn't exist, or<object> - a JSON object containing:lamports: <u64> - number of lamports assigned to this account, as a u64owner: <string> - base-58 encoded Pubkey of the program this account has been assigned todata: <[string, encoding]|object> - data associated with the account, either as encoded binary data or JSON format {<program>: <state>} - depending on encoding parameterexecutable: <bool> - boolean indicating if the account contains a program (and is strictly read-only)rentEpoch: <u64> - the epoch at which this account will next owe rent, as u64size: <u64> - the data size of the accountCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getMultipleAccounts",    "params": [      [        "vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg",        "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"      ],      {        "encoding": "base58"      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1    },    "value": [      {        "data": ["", "base64"],        "executable": false,        "lamports": 1000000000,        "owner": "11111111111111111111111111111111",        "rentEpoch": 2,        "space": 16      },      {        "data": ["", "base64"],        "executable": false,        "lamports": 5000000000,        "owner": "11111111111111111111111111111111",        "rentEpoch": 2,        "space": 0      }    ]  },  "id": 1}getProgramAccounts​Returns all accounts owned by the provided program PubkeyParameters:​Pubkey of program, as base-58 encoded stringConfiguration object containing the following fields:The minimum slot that the request can be evaluated atwrap the result in an RpcResponse JSON objectencoding format for the returned Account dataValues: jsonParsedbase58base64base64+zstdDetailsbase58 is slow and limited to less than 129 bytes of Account data.base64 will return base64 encoded data for Account data of any size.base64+zstd compresses the Account data using Zstandard and
base64-encodes the result.jsonParsed encoding attempts to use program-specific state
parsers to return more human-readable and explicit account state data.If jsonParsed is requested but a parser cannot be found, the field falls back
to base64 encoding, detectable when the data field is type <string>.limit the returned account data using the provided `offset: usize` and `length: usize` fields;only available for "base58", "base64" or "base64+zstd" encodings.filter results using up to 4 filter objectsinfoThe resultant account(s) must meet ALL filter criteria to be included in the returned resultsResult:​By default, the result field will be an array of JSON objects.infoIf withContext flag is set the array will be wrapped in an RpcResponse JSON object.The resultant response array will contain:pubkey: <string> - the account Pubkey as base-58 encoded stringaccount: <object> - a JSON object, with the following sub fields:lamports: <u64> - number of lamports assigned to this account, as a u64owner: <string> - base-58 encoded Pubkey of the program this account has been assigned todata: <[string,encoding]|object> - data associated with the account, either as encoded binary data or JSON format {<program>: <state>} - depending on encoding parameterexecutable: <bool> - boolean indicating if the account contains a program (and is strictly read-only)rentEpoch: <u64> - the epoch at which this account will next owe rent, as u64size: <u64> - the data size of the accountCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getProgramAccounts",    "params": [      "4Nd1mBQtrMJVYVfKf2PJy9NZUZdTAsp7D4xWLs4gDB4T",      {        "filters": [          {            "dataSize": 17          },          {            "memcmp": {              "offset": 4,              "bytes": "3Mc6vR"            }          }        ]      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": [    {      "account": {        "data": "2R9jLfiAQ9bgdcw6h8s44439",        "executable": false,        "lamports": 15298080,        "owner": "4Nd1mBQtrMJVYVfKf2PJy9NZUZdTAsp7D4xWLs4gDB4T",        "rentEpoch": 28,        "space": 42      },      "pubkey": "CxELquR1gPP8wHe33gZ4QxqGB3sZ9RSwsJ2KshVewkFY"    }  ],  "id": 1}getRecentPerformanceSamples​Returns a list of recent performance samples, in reverse slot order. Performance samples are taken every 60 seconds and
include the number of transactions and slots that occur in a given time window.Parameters:​number of samples to return (maximum 720)Result:​An array of RpcPerfSample<object> with the following fields:slot: <u64> - Slot in which sample was taken atnumTransactions: <u64> - Number of transactions in samplenumSlots: <u64> - Number of slots in samplesamplePeriodSecs: <u16> - Number of seconds in a sample windownumNonVoteTransaction: <u64> - Number of non-vote transactions in
sample.infonumNonVoteTransaction is present starting with v1.15.To get a number of voting transactions compute:
numTransactions - numNonVoteTransactionCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc":"2.0", "id":1,    "method": "getRecentPerformanceSamples",    "params": [4]}'Response:​{  "jsonrpc": "2.0",  "result": [    {      "numSlots": 126,      "numTransactions": 126,      "numNonVoteTransaction": 1,      "samplePeriodSecs": 60,      "slot": 348125    },    {      "numSlots": 126,      "numTransactions": 126,      "numNonVoteTransaction": 1,      "samplePeriodSecs": 60,      "slot": 347999    },    {      "numSlots": 125,      "numTransactions": 125,      "numNonVoteTransaction": 0,      "samplePeriodSecs": 60,      "slot": 347873    },    {      "numSlots": 125,      "numTransactions": 125,      "numNonVoteTransaction": 0,      "samplePeriodSecs": 60,      "slot": 347748    }  ],  "id": 1}getRecentPrioritizationFees​Returns a list of prioritization fees from recent blocks.infoCurrently, a node's prioritization-fee cache stores data from up to 150 blocks.Parameters:​An array of Account addresses (up to a maximum of 128 addresses), as base-58 encoded stringsnoteIf this parameter is provided, the response will reflect a fee to land a transaction locking all of the provided accounts as writable.Result:​An array of RpcPrioritizationFee<object> with the following fields:slot: <u64> - slot in which the fee was observedprioritizationFee: <u64> - the per-compute-unit fee paid by at least
one successfully landed transaction, specified in increments of 0.000001 lamportsCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc":"2.0", "id":1,    "method": "getRecentPrioritizationFees",    "params": [      ["CxELquR1gPP8wHe33gZ4QxqGB3sZ9RSwsJ2KshVewkFY"]    ]  }'Response:​{  "jsonrpc": "2.0",  "result": [    {      "slot": 348125,      "prioritizationFee": 0    },    {      "slot": 348126,      "prioritizationFee": 1000    },    {      "slot": 348127,      "prioritizationFee": 500    },    {      "slot": 348128,      "prioritizationFee": 0    },    {      "slot": 348129,      "prioritizationFee": 1234    }  ],  "id": 1}getSignaturesForAddress​Returns signatures for confirmed transactions that include the given address in
their accountKeys list. Returns signatures backwards in time from the
provided signature or most recent confirmed blockParameters:​Account address as base-58 encoded stringConfiguration object containing the following fields:The minimum slot that the request can be evaluated atmaximum transaction signatures to return (between 1 and 1,000).start searching backwards from this transaction signature. If not provided the search starts from the top of the highest max confirmed block.search until this transaction signature, if found before limit reachedResult:​An array of <object>, ordered from newest to oldest transaction, containing transaction
signature information with the following fields:signature: <string> - transaction signature as base-58 encoded stringslot: <u64> - The slot that contains the block with the transactionerr: <object|null> - Error if transaction failed, null if transaction succeeded.
See TransactionError definitions
for more info.memo: <string|null> - Memo associated with the transaction, null if no memo is presentblockTime: <i64|null> - estimated production time, as Unix timestamp (seconds since the Unix epoch)
of when transaction was processed. null if not available.confirmationStatus: <string|null> - The transaction's cluster confirmation status;
Either processed, confirmed, or finalized. See Commitment
for more on optimistic confirmation.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getSignaturesForAddress",    "params": [      "Vote111111111111111111111111111111111111111",      {        "limit": 1      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": [    {      "err": null,      "memo": null,      "signature": "5h6xBEauJ3PK6SWCZ1PGjBvj8vDdWG3KpwATGy1ARAXFSDwt8GFXM7W5Ncn16wmqokgpiKRLuS83KUxyZyv2sUYv",      "slot": 114,      "blockTime": null    }  ],  "id": 1}getSignatureStatuses​Returns the statuses of a list of signatures. Each signature must be a txid, the first signature of a transaction.infoUnless the searchTransactionHistory configuration parameter is included,
this method only searches the recent status cache of signatures, which
retains statuses for all active slots plus MAX_RECENT_BLOCKHASHES rooted slots.Parameters:​An array of transaction signatures to confirm, as base-58 encoded strings (up to a maximum of 256)Configuration object containing the following fields:if true - a Solana node will search its ledger cache for any signatures not
found in the recent status cacheResult:​An array of RpcResponse<object> consisting of either:<null> - Unknown transaction, or<object>slot: <u64> - The slot the transaction was processedconfirmations: <usize|null> - Number of blocks since signature confirmation, null if rooted, as well as finalized by a supermajority of the clustererr: <object|null> - Error if transaction failed, null if transaction succeeded.
See TransactionError definitionsconfirmationStatus: <string|null> - The transaction's cluster confirmation status;
Either processed, confirmed, or finalized. See Commitment for more on optimistic confirmation.DEPRECATED: status: <object> - Transaction status"Ok": <null> - Transaction was successful"Err": <ERR> - Transaction failed with TransactionErrorCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getSignatureStatuses",    "params": [      [        "5VERv8NMvzbJMEkV8xnrLkEaWRtSz9CosKDYjCJjBRnbJLgp8uirBgmQpjKhoR4tjF3ZpRzrFmBV6UjKdiSZkQUW"      ],      {        "searchTransactionHistory": true      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 82    },    "value": [      {        "slot": 48,        "confirmations": null,        "err": null,        "status": {          "Ok": null        },        "confirmationStatus": "finalized"      },      null    ]  },  "id": 1}getSlot​Returns the slot that has reached the given or default commitment levelParameters:​Configuration object containing the following fields:The minimum slot that the request can be evaluated atResult:​<u64> - Current slotCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getSlot"}'Response:​{ "jsonrpc": "2.0", "result": 1234, "id": 1 }getSlotLeader​Returns the current slot leaderParameters:​Configuration object containing the following fields:The minimum slot that the request can be evaluated atResult:​<string> - Node identity Pubkey as base-58 encoded stringCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getSlotLeader"}'Response:​{  "jsonrpc": "2.0",  "result": "ENvAW7JScgYq6o4zKZwewtkzzJgDzuJAFxYasvmEQdpS",  "id": 1}getSlotLeaders​Returns the slot leaders for a given slot rangeParameters:​Start slot, as u64 integerLimit, as u64 integer (between 1 and 5,000)Result:​<array[string]> - array of Node identity public keys as base-58 encoded stringsCode sample:​If the current slot is #99 - query the next 10 leaders with the following request:curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc":"2.0", "id": 1,    "method": "getSlotLeaders",    "params": [100, 10]  }'Response:​The first leader returned is the leader for slot #100:{  "jsonrpc": "2.0",  "result": [    "ChorusmmK7i1AxXeiTtQgQZhQNiXYU84ULeaYF1EH15n",    "ChorusmmK7i1AxXeiTtQgQZhQNiXYU84ULeaYF1EH15n",    "ChorusmmK7i1AxXeiTtQgQZhQNiXYU84ULeaYF1EH15n",    "ChorusmmK7i1AxXeiTtQgQZhQNiXYU84ULeaYF1EH15n",    "Awes4Tr6TX8JDzEhCZY2QVNimT6iD1zWHzf1vNyGvpLM",    "Awes4Tr6TX8JDzEhCZY2QVNimT6iD1zWHzf1vNyGvpLM",    "Awes4Tr6TX8JDzEhCZY2QVNimT6iD1zWHzf1vNyGvpLM",    "Awes4Tr6TX8JDzEhCZY2QVNimT6iD1zWHzf1vNyGvpLM",    "DWvDTSh3qfn88UoQTEKRV2JnLt5jtJAVoiCo3ivtMwXP",    "DWvDTSh3qfn88UoQTEKRV2JnLt5jtJAVoiCo3ivtMwXP"  ],  "id": 1}getStakeActivation​Returns epoch activation information for a stake accountParameters:​Pubkey of stake Account to query, as base-58 encoded stringConfiguration object containing the following fields:The minimum slot that the request can be evaluated atepoch for which to calculate activation details. If parameter not provided, defaults to current epoch.Result:​The result will be a JSON object with the following fields:state: <string> - the stake account's activation state,
either: active, inactive, activating, or deactivatingactive: <u64> - stake active during the epochinactive: <u64> - stake inactive during the epochCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getStakeActivation",    "params": [      "CYRJWqiSjLitBAcRxPvWpgX3s5TvmN2SuRY3eEYypFvT",      {        "epoch": 4      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "active": 124429280,    "inactive": 73287840,    "state": "activating"  },  "id": 1}getStakeMinimumDelegation​Returns the stake minimum delegation, in lamports.Parameters:​Configuration object containing the following fields:Result:​The result will be an RpcResponse JSON object with value equal to:<u64> - The stake minimum delegation, in lamportsCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc":"2.0", "id":1,    "method": "getStakeMinimumDelegation"  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 501    },    "value": 1000000000  },  "id": 1}getSupply​Returns information about the current supply.Parameters:​Configuration object containing the following fields:exclude non circulating accounts list from responseResult:​The result will be an RpcResponse JSON object with value equal to a JSON object containing:total: <u64> - Total supply in lamportscirculating: <u64> - Circulating supply in lamportsnonCirculating: <u64> - Non-circulating supply in lamportsnonCirculatingAccounts: <array> - an array of account addresses of non-circulating accounts, as strings. If excludeNonCirculatingAccountsList is enabled, the returned array will be empty.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0", "id":1, "method":"getSupply"}'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1114    },    "value": {      "circulating": 16000,      "nonCirculating": 1000000,      "nonCirculatingAccounts": [        "FEy8pTbP5fEoqMV1GdTz83byuA8EKByqYat1PKDgVAq5",        "9huDUZfxoJ7wGMTffUE7vh1xePqef7gyrLJu9NApncqA",        "3mi1GmwEE3zo2jmfDuzvjSX9ovRXsDUKHvsntpkhuLJ9",        "BYxEJTDerkaRWBem3XgnVcdhppktBXa2HbkHPKj2Ui4Z"      ],      "total": 1016000    }  },  "id": 1}getTokenAccountBalance​Returns the token balance of an SPL Token account.Parameters:​Pubkey of Token account to query, as base-58 encoded stringConfiguration object containing the following fields:Result:​The result will be an RpcResponse JSON object with value equal to a JSON object containing:amount: <string> - the raw balance without decimals, a string representation of u64decimals: <u8> - number of base 10 digits to the right of the decimal placeuiAmount: <number|null> - the balance, using mint-prescribed decimals DEPRECATEDuiAmountString: <string> - the balance as a string, using mint-prescribed decimalsFor more details on returned data, the Token Balances Structure
response from getBlock follows a similar structure.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getTokenAccountBalance",    "params": [      "7fUAJdStEuGbc3sM84cKRL6yYaaSstyLSU4ve5oovLS7"    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1114    },    "value": {      "amount": "9864",      "decimals": 2,      "uiAmount": 98.64,      "uiAmountString": "98.64"    },    "id": 1  }}getTokenAccountsByDelegate​Returns all SPL Token accounts by approved Delegate.Parameters:​Pubkey of account delegate to query, as base-58 encoded stringA JSON object with one of the following fields:mint: <string> - Pubkey of the specific token Mint to limit accounts to, as base-58 encoded string; orprogramId: <string> - Pubkey of the Token program that owns the accounts, as base-58 encoded stringConfiguration object containing the following fields:The minimum slot that the request can be evaluated atlimit the returned account data using the provided offset: <usize>
and length: <usize> fields; only available for base58,
base64 or base64+zstd encodings.Encoding format for Account dataValues: base58base64base64+zstdjsonParsedDetailsbase58 is slow and limited to less than 129 bytes of Account data.base64 will return base64 encoded data for Account data of any size.base64+zstd compresses the Account data using Zstandard
and base64-encodes the result.jsonParsed encoding attempts to use program-specific state parsers to return
more human-readable and explicit account state data.If jsonParsed is requested but a parser cannot be found, the field falls
back to base64 encoding, detectable when the data field is type string.Result:​The result will be an RpcResponse JSON object with value equal to an array of JSON objects, which will contain:pubkey: <string> - the account Pubkey as base-58 encoded stringaccount: <object> - a JSON object, with the following sub fields:lamports: <u64> - number of lamports assigned to this account, as a u64owner: <string> - base-58 encoded Pubkey of the program this account has been assigned todata: <object> - Token state data associated with the account, either as encoded binary data or in JSON format {<program>: <state>}executable: <bool> - boolean indicating if the account contains a program (and is strictly read-only)rentEpoch: <u64> - the epoch at which this account will next owe rent, as u64size: <u64> - the data size of the accountWhen the data is requested with the jsonParsed encoding a format similar to that of the
Token Balances Structure can be expected inside the structure,
both for the tokenAmount and the delegatedAmount - with the latter being an optional object.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getTokenAccountsByDelegate",    "params": [      "4Nd1mBQtrMJVYVfKf2PJy9NZUZdTAsp7D4xWLs4gDB4T",      {        "programId": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"      },      {        "encoding": "jsonParsed"      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1114    },    "value": [      {        "account": {          "data": {            "program": "spl-token",            "parsed": {              "info": {                "tokenAmount": {                  "amount": "1",                  "decimals": 1,                  "uiAmount": 0.1,                  "uiAmountString": "0.1"                },                "delegate": "4Nd1mBQtrMJVYVfKf2PJy9NZUZdTAsp7D4xWLs4gDB4T",                "delegatedAmount": {                  "amount": "1",                  "decimals": 1,                  "uiAmount": 0.1,                  "uiAmountString": "0.1"                },                "state": "initialized",                "isNative": false,                "mint": "3wyAj7Rt1TWVPZVteFJPLa26JmLvdb1CAKEFZm3NY75E",                "owner": "CnPoSPKXu7wJqxe59Fs72tkBeALovhsCxYeFwPCQH9TD"              },              "type": "account"            },            "space": 165          },          "executable": false,          "lamports": 1726080,          "owner": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",          "rentEpoch": 4,          "space": 165        },        "pubkey": "28YTZEwqtMHWrhWcvv34se7pjS7wctgqzCPB3gReCFKp"      }    ]  },  "id": 1}getTokenAccountsByOwner​Returns all SPL Token accounts by token owner.Parameters:​Pubkey of account delegate to query, as base-58 encoded stringA JSON object with one of the following fields:mint: <string> - Pubkey of the specific token Mint to limit accounts to, as base-58 encoded string; orprogramId: <string> - Pubkey of the Token program that owns the accounts, as base-58 encoded stringConfiguration object containing the following fields:The minimum slot that the request can be evaluated atlimit the returned account data using the provided offset: <usize>
and length: <usize> fields; only available for
base58, base64, or base64+zstd encodings.Encoding format for Account dataValues: base58base64base64+zstdjsonParsedDetailsbase58 is slow and limited to less than 129 bytes of Account data.base64 will return base64 encoded data for Account data of any size.base64+zstd compresses the Account data using Zstandard
and base64-encodes the result.jsonParsed encoding attempts to use program-specific state parsers to return
more human-readable and explicit account state data.If jsonParsed is requested but a parser cannot be found, the field falls
back to base64 encoding, detectable when the data field is type string.Result:​The result will be an RpcResponse JSON object with value equal to an array of JSON objects, which will contain:pubkey: <string> - the account Pubkey as base-58 encoded stringaccount: <object> - a JSON object, with the following sub fields:lamports: <u64> - number of lamports assigned to this account, as a u64owner: <string> - base-58 encoded Pubkey of the program this account has been assigned todata: <object> - Token state data associated with the account, either as encoded binary data or in JSON format {<program>: <state>}executable: <bool> - boolean indicating if the account contains a program (and is strictly read-only)rentEpoch: <u64> - the epoch at which this account will next owe rent, as u64size: <u64> - the data size of the accountWhen the data is requested with the jsonParsed encoding a format similar to that of the Token Balances Structure can be expected inside the structure, both for the tokenAmount and the delegatedAmount - with the latter being an optional object.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getTokenAccountsByOwner",    "params": [      "4Qkev8aNZcqFNSRhQzwyLMFSsi94jHqE8WNVTJzTP99F",      {        "mint": "3wyAj7Rt1TWVPZVteFJPLa26JmLvdb1CAKEFZm3NY75E"      },      {        "encoding": "jsonParsed"      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1114    },    "value": [      {        "account": {          "data": {            "program": "spl-token",            "parsed": {              "accountType": "account",              "info": {                "tokenAmount": {                  "amount": "1",                  "decimals": 1,                  "uiAmount": 0.1,                  "uiAmountString": "0.1"                },                "delegate": "4Nd1mBQtrMJVYVfKf2PJy9NZUZdTAsp7D4xWLs4gDB4T",                "delegatedAmount": {                  "amount": "1",                  "decimals": 1,                  "uiAmount": 0.1,                  "uiAmountString": "0.1"                },                "state": "initialized",                "isNative": false,                "mint": "3wyAj7Rt1TWVPZVteFJPLa26JmLvdb1CAKEFZm3NY75E",                "owner": "4Qkev8aNZcqFNSRhQzwyLMFSsi94jHqE8WNVTJzTP99F"              },              "type": "account"            },            "space": 165          },          "executable": false,          "lamports": 1726080,          "owner": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",          "rentEpoch": 4,          "space": 165        },        "pubkey": "C2gJg6tKpQs41PRS1nC8aw3ZKNZK3HQQZGVrDFDup5nx"      }    ]  },  "id": 1}getTokenLargestAccounts​Returns the 20 largest accounts of a particular SPL Token type.Parameters:​Pubkey of the token Mint to query, as base-58 encoded stringConfiguration object containing the following fields:Result:​The result will be an RpcResponse JSON object with value equal to an array of JSON objects containing:address: <string> - the address of the token accountamount: <string> - the raw token account balance without decimals, a string representation of u64decimals: <u8> - number of base 10 digits to the right of the decimal placeuiAmount: <number|null> - the token account balance, using mint-prescribed decimals DEPRECATEDuiAmountString: <string> - the token account balance as a string, using mint-prescribed decimalsCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getTokenLargestAccounts",    "params": [      "3wyAj7Rt1TWVPZVteFJPLa26JmLvdb1CAKEFZm3NY75E"    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1114    },    "value": [      {        "address": "FYjHNoFtSQ5uijKrZFyYAxvEr87hsKXkXcxkcmkBAf4r",        "amount": "771",        "decimals": 2,        "uiAmount": 7.71,        "uiAmountString": "7.71"      },      {        "address": "BnsywxTcaYeNUtzrPxQUvzAWxfzZe3ZLUJ4wMMuLESnu",        "amount": "229",        "decimals": 2,        "uiAmount": 2.29,        "uiAmountString": "2.29"      }    ]  },  "id": 1}getTokenSupply​Returns the total supply of an SPL Token type.Parameters:​Pubkey of the token Mint to query, as base-58 encoded stringConfiguration object containing the following fields:Result:​The result will be an RpcResponse JSON object with value equal to a JSON object containing:amount: <string> - the raw total token supply without decimals, a string representation of u64decimals: <u8> - number of base 10 digits to the right of the decimal placeuiAmount: <number|null> - the total token supply, using mint-prescribed decimals DEPRECATEDuiAmountString: <string> - the total token supply as a string, using mint-prescribed decimalsCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getTokenSupply",    "params": [      "3wyAj7Rt1TWVPZVteFJPLa26JmLvdb1CAKEFZm3NY75E"    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1114    },    "value": {      "amount": "100000",      "decimals": 2,      "uiAmount": 1000,      "uiAmountString": "1000"    }  },  "id": 1}getTransaction​Returns transaction details for a confirmed transactionParameters:​Transaction signature, as base-58 encoded stringConfiguration object containing the following fields:Set the max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned. If this parameter is omitted, only legacy transactions will be returned, and any versioned transaction will prompt the error.Encoding for the returned TransactionValues: jsonjsonParsedbase64base58DetailsjsonParsed encoding attempts to use program-specific state parsers to return
more human-readable and explicit data in the transaction.message.instructions list.If jsonParsed is requested but a parser cannot be found, the instruction
falls back to regular JSON encoding (accounts, data, and programIdIndex fields).Result:​<null> - if transaction is not found or not confirmed<object> - if transaction is confirmed, an object with the following fields:slot: <u64> - the slot this transaction was processed intransaction: <object|[string,encoding]> - Transaction object, either in JSON format or encoded binary data, depending on encoding parameterblockTime: <i64|null> - estimated production time, as Unix timestamp (seconds since the Unix epoch) of when the transaction was processed. null if not availablemeta: <object|null> - transaction status metadata object:err: <object|null> - Error if transaction failed, null if transaction succeeded. TransactionError definitionsfee: <u64> - fee this transaction was charged, as u64 integerpreBalances: <array> - array of u64 account balances from before the transaction was processedpostBalances: <array> - array of u64 account balances after the transaction was processedinnerInstructions: <array|null> - List of inner instructions or null if inner instruction recording was not enabled during this transactionpreTokenBalances: <array|undefined> - List of token balances from before the transaction was processed or omitted if token balance recording was not yet enabled during this transactionpostTokenBalances: <array|undefined> - List of token balances from after the transaction was processed or omitted if token balance recording was not yet enabled during this transactionlogMessages: <array|null> - array of string log messages or null if log message recording was not enabled during this transactionDEPRECATED: status: <object> - Transaction status"Ok": <null> - Transaction was successful"Err": <ERR> - Transaction failed with TransactionErrorrewards: <array|null> - transaction-level rewards, populated if rewards are requested; an array of JSON objects containing:pubkey: <string> - The public key, as base-58 encoded string, of the account that received the rewardlamports: <i64>- number of reward lamports credited or debited by the account, as a i64postBalance: <u64> - account balance in lamports after the reward was appliedrewardType: <string> - type of reward: currently only "rent", other types may be added in the futurecommission: <u8|undefined> - vote account commission when the reward was credited, only present for voting and staking rewardsloadedAddresses: <object|undefined> - Transaction addresses loaded from address lookup tables. Undefined if maxSupportedTransactionVersion is not set in request params, or if jsonParsed encoding is set in request params.writable: <array[string]> - Ordered list of base-58 encoded addresses for writable loaded accountsreadonly: <array[string]> - Ordered list of base-58 encoded addresses for readonly loaded accountsreturnData: <object|undefined> - the most-recent return data generated by an instruction in the transaction, with the following fields:programId: <string> - the program that generated the return data, as base-58 encoded Pubkeydata: <[string, encoding]> - the return data itself, as base-64 encoded binary datacomputeUnitsConsumed: <u64|undefined> - number of compute units consumed by the transactionversion: <"legacy"|number|undefined> - Transaction version. Undefined if maxSupportedTransactionVersion is not set in request params.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getTransaction",    "params": [      "2nBhEBYYvfaAe16UMNqRHre4YNSskvuYgx3M6E4JP1oDYvZEJHvoPzyUidNgNX5r9sTyN1J9UxtbCXy2rqYcuyuv",      "json"    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "meta": {      "err": null,      "fee": 5000,      "innerInstructions": [],      "postBalances": [499998932500, 26858640, 1, 1, 1],      "postTokenBalances": [],      "preBalances": [499998937500, 26858640, 1, 1, 1],      "preTokenBalances": [],      "rewards": [],      "status": {        "Ok": null      }    },    "slot": 430,    "transaction": {      "message": {        "accountKeys": [          "3UVYmECPPMZSCqWKfENfuoTv51fTDTWicX9xmBD2euKe",          "AjozzgE83A3x1sHNUR64hfH7zaEBWeMaFuAN9kQgujrc",          "SysvarS1otHashes111111111111111111111111111",          "SysvarC1ock11111111111111111111111111111111",          "Vote111111111111111111111111111111111111111"        ],        "header": {          "numReadonlySignedAccounts": 0,          "numReadonlyUnsignedAccounts": 3,          "numRequiredSignatures": 1        },        "instructions": [          {            "accounts": [1, 2, 3, 0],            "data": "37u9WtQpcm6ULa3WRQHmj49EPs4if7o9f1jSRVZpm2dvihR9C8jY4NqEwXUbLwx15HBSNcP1",            "programIdIndex": 4          }        ],        "recentBlockhash": "mfcyqEXB3DnHXki6KjjmZck6YjmZLvpAByy2fj4nh6B"      },      "signatures": [        "2nBhEBYYvfaAe16UMNqRHre4YNSskvuYgx3M6E4JP1oDYvZEJHvoPzyUidNgNX5r9sTyN1J9UxtbCXy2rqYcuyuv"      ]    }  },  "blockTime": null,  "id": 1}getTransactionCount​Returns the current Transaction count from the ledgerParameters:​Configuration object containing the following fields:The minimum slot that the request can be evaluated atResult:​<u64> - the current Transaction count from the ledgerCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getTransactionCount"}'Response:​{ "jsonrpc": "2.0", "result": 268, "id": 1 }getVersion​Returns the current Solana version running on the nodeParameters:​NoneResult:​The result field will be a JSON object with the following fields:solana-core - software version of solana-corefeature-set - unique identifier of the current software's feature setCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getVersion"}'Response:​{ "jsonrpc": "2.0", "result": { "solana-core": "1.15.0" }, "id": 1 }getVoteAccounts​Returns the account info and associated stake for all the voting accounts in the current bank.Parameters:​Configuration object containing the following fields:Only return results for this validator vote address (base-58 encoded)Do not filter out delinquent validators with no stakeSpecify the number of slots behind the tip that a validator must fall to be considered delinquent. **NOTE:** For the sake of consistency between ecosystem products, _it is **not** recommended that this argument be specified._Result:​The result field will be a JSON object of current and delinquent accounts,
each containing an array of JSON objects with the following sub fields:votePubkey: <string> - Vote account address, as base-58 encoded stringnodePubkey: <string> - Validator identity, as base-58 encoded stringactivatedStake: <u64> - the stake, in lamports, delegated to this vote account and active in this epochepochVoteAccount: <bool> - bool, whether the vote account is staked for this epochcommission: <number> - percentage (0-100) of rewards payout owed to the vote accountlastVote: <u64> - Most recent slot voted on by this vote accountepochCredits: <array> - Latest history of earned credits for up to five epochs, as an array of arrays containing: [epoch, credits, previousCredits].rootSlot: <u64> - Current root slot for this vote accountCode sample:​Restrict results to a single validator vote account:curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getVoteAccounts",    "params": [      {        "votePubkey": "3ZT31jkAGhUaw8jsy4bTknwBMP8i4Eueh52By4zXcsVw"      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "current": [      {        "commission": 0,        "epochVoteAccount": true,        "epochCredits": [          [1, 64, 0],          [2, 192, 64]        ],        "nodePubkey": "B97CCUW3AEZFGy6uUg6zUdnNYvnVq5VG8PUtb2HayTDD",        "lastVote": 147,        "activatedStake": 42,        "votePubkey": "3ZT31jkAGhUaw8jsy4bTknwBMP8i4Eueh52By4zXcsVw"      }    ],    "delinquent": []  },  "id": 1}isBlockhashValid​Returns whether a blockhash is still valid or notcautionNEW: This method is only available in solana-core v1.9 or newer. Please use
getFeeCalculatorForBlockhash for solana-core v1.8Parameters:​the blockhash of the block to evauluate, as base-58 encoded stringConfiguration object containing the following fields:The minimum slot that the request can be evaluated atResult:​<bool> - true if the blockhash is still validCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "id":45,    "jsonrpc":"2.0",    "method":"isBlockhashValid",    "params":[      "J7rBdM6AecPDEZp8aPq5iPSNKVkU5Q76F3oAV4eW5wsW",      {"commitment":"processed"}    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 2483    },    "value": false  },  "id": 1}minimumLedgerSlot​Returns the lowest slot that the node has information about in its ledger.infoThis value may increase over time if the node is configured to purge older ledger dataParameters:​NoneResult:​u64 - Minimum ledger slot numberCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"minimumLedgerSlot"}'Response:​{ "jsonrpc": "2.0", "result": 1234, "id": 1 }requestAirdrop​Requests an airdrop of lamports to a PubkeyParameters:​Pubkey of account to receive lamports, as a base-58 encoded stringlamports to airdrop, as a "u64"Configuration object containing the following fields:Result:​<string> - Transaction Signature of the airdrop, as a base-58 encoded stringCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "requestAirdrop",    "params": [      "83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri",      1000000000    ]  }'Response:​{  "jsonrpc": "2.0",  "result": "5VERv8NMvzbJMEkV8xnrLkEaWRtSz9CosKDYjCJjBRnbJLgp8uirBgmQpjKhoR4tjF3ZpRzrFmBV6UjKdiSZkQUW",  "id": 1}sendTransaction​Submits a signed transaction to the cluster for processing.This method does not alter the transaction in any way; it relays the
transaction created by clients to the node as-is.If the node's rpc service receives the transaction, this method immediately
succeeds, without waiting for any confirmations. A successful response from
this method does not guarantee the transaction is processed or confirmed by the
cluster.While the rpc service will reasonably retry to submit it, the transaction
could be rejected if transaction's recent_blockhash expires before it lands.Use getSignatureStatuses to ensure a transaction is processed and confirmed.Before submitting, the following preflight checks are performed:The transaction signatures are verifiedThe transaction is simulated against the bank slot specified by the preflight
commitment. On failure an error will be returned. Preflight checks may be
disabled if desired. It is recommended to specify the same commitment and
preflight commitment to avoid confusing behavior.The returned signature is the first signature in the transaction, which
is used to identify the transaction (transaction id).
This identifier can be easily extracted from the transaction data before
submission.Parameters:​Fully-signed Transaction, as encoded string.Configuration object containing the following optional fields:Encoding used for the transaction data.Values: base58 (slow, DEPRECATED), or base64.if "true", skip the preflight transaction checksCommitment level to use for preflight.Maximum number of times for the RPC node to retry sending the transaction to the leader. If this parameter not provided, the RPC node will retry the transaction until it is finalized or until the blockhash expires.set the minimum slot at which to perform preflight transaction checksResult:​<string> - First Transaction Signature embedded in the transaction, as base-58 encoded string (transaction id)Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "sendTransaction",    "params": [      "4hXTCkRzt9WyecNzV1XPgCDfGAZzQKNxLXgynz5QDuWWPSAZBZSHptvWRL3BjCvzUXRdKvHL2b7yGrRQcWyaqsaBCncVG7BFggS8w9snUts67BSh3EqKpXLUm5UMHfD7ZBe9GhARjbNQMLJ1QD3Spr6oMTBU6EhdB4RD8CP2xUxr2u3d6fos36PD98XS6oX8TQjLpsMwncs5DAMiD4nNnR8NBfyghGCWvCVifVwvA8B8TJxE1aiyiv2L429BCWfyzAme5sZW8rDb14NeCQHhZbtNqfXhcp2tAnaAT"    ]  }'Response:​{  "jsonrpc": "2.0",  "result": "2id3YC2jK9G5Wo2phDx4gJVAew8DcY5NAojnVuao8rkxwPYPe8cSwE5GzhEgJA2y8fVjDEo6iR6ykBvDxrTQrtpb",  "id": 1}simulateTransaction​Simulate sending a transactionParameters:​Transaction, as an encoded string.noteThe transaction must have a valid blockhash, but is not required to be signed.Configuration object containing the following fields:Commitment level to simulate the transaction atif `true` the transaction signatures will be verified (conflicts with `replaceRecentBlockhash`)if `true` the transaction recent blockhash will be replaced with the most recent blockhash. (conflicts with `sigVerify`)the minimum slot that the request can be evaluated atEncoding used for the transaction data.Values: base58 (slow, DEPRECATED), or base64.Accounts configuration object containing the following fields:An `array` of accounts to return, as base-58 encoded stringsencoding for returned Account dataValues: base64base58base64+zstdjsonParsedDetailsjsonParsed encoding attempts to use program-specific state
parsers to return more human-readable and explicit account state data.If jsonParsed is requested but a parser cannot be found, the field falls
back to binary encoding, detectable when the data field is type string.Result:​The result will be an RpcResponse JSON object with value set to a JSON object with the following fields:err: <object|string|null> - Error if transaction failed, null if transaction succeeded. TransactionError definitionslogs: <array|null> - Array of log messages the transaction instructions output during execution, null if simulation failed before the transaction was able to execute (for example due to an invalid blockhash or signature verification failure)accounts: <array|null> - array of accounts with the same length as the accounts.addresses array in the request<null> - if the account doesn't exist or if err is not null<object> - otherwise, a JSON object containing:lamports: <u64> - number of lamports assigned to this account, as a u64owner: <string> - base-58 encoded Pubkey of the program this account has been assigned todata: <[string, encoding]|object> - data associated with the account, either as encoded binary data or JSON format {<program>: <state>} - depending on encoding parameterexecutable: <bool> - boolean indicating if the account contains a program (and is strictly read-only)rentEpoch: <u64> - the epoch at which this account will next owe rent, as u64unitsConsumed: <u64|undefined> - The number of compute budget units consumed during the processing of this transactionreturnData: <object|null> - the most-recent return data generated by an instruction in the transaction, with the following fields:programId: <string> - the program that generated the return data, as base-58 encoded Pubkeydata: <[string, encoding]> - the return data itself, as base-64 encoded binary dataCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "simulateTransaction",    "params": [      "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEDArczbMia1tLmq7zz4DinMNN0pJ1JtLdqIJPUw3YrGCzYAMHBsgN27lcgB6H2WQvFgyZuJYHa46puOQo9yQ8CVQbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCp20C7Wj2aiuk5TReAXo+VTVg8QTHjs0UjNMMKCvpzZ+ABAgEBARU=",      {        "encoding":"base64",      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 218    },    "value": {      "err": null,      "accounts": null,      "logs": [        "Program 83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri invoke [1]",        "Program 83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri consumed 2366 of 1400000 compute units",        "Program return: 83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri KgAAAAAAAAA=",        "Program 83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri success"      ],      "returnData": {        "data": ["Kg==", "base64"],        "programId": "83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri"      },      "unitsConsumed": 2366    }  },  "id": 1}JSON RPC API Deprecated Methods​getConfirmedBlock​DEPRECATEDThis method is expected to be removed in solana-core v2.0.
Please use getBlock insteadReturns identity and transaction information about a confirmed block in the ledgerParameters:​slot number, as u64 integerConfiguration object containing the following fields:level of transaction detail to return, either "full", "signatures", or "none"whether to populate the `rewards` array.Encoding format for Account dataValues: jsonbase58base64jsonParsedDetailsjsonParsed encoding attempts to use program-specific instruction parsers to return
more human-readable and explicit data in the transaction.message.instructions list.If jsonParsed is requested but a parser cannot be found, the instruction
falls back to regular JSON encoding (accounts, data, and programIdIndex fields).Result:​The result field will be an object with the following fields:<null> - if specified block is not confirmed<object> - if block is confirmed, an object with the following fields:blockhash: <string> - the blockhash of this block, as base-58 encoded stringpreviousBlockhash: <string> - the blockhash of this block's parent, as base-58 encoded string; if the parent block is not available due to ledger cleanup, this field will return "11111111111111111111111111111111"parentSlot: <u64> - the slot index of this block's parenttransactions: <array> - present if "full" transaction details are requested; an array of JSON objects containing:transaction: <object|[string,encoding]> - Transaction object, either in JSON format or encoded binary data, depending on encoding parametermeta: <object> - transaction status metadata object, containing null or:err: <object|null> - Error if transaction failed, null if transaction succeeded. TransactionError definitionsfee: <u64> - fee this transaction was charged, as u64 integerpreBalances: <array> - array of u64 account balances from before the transaction was processedpostBalances: <array> - array of u64 account balances after the transaction was processedinnerInstructions: <array|null> - List of inner instructions or null if inner instruction recording was not enabled during this transactionpreTokenBalances: <array|undefined> - List of token balances from before the transaction was processed or omitted if token balance recording was not yet enabled during this transactionpostTokenBalances: <array|undefined> - List of token balances from after the transaction was processed or omitted if token balance recording was not yet enabled during this transactionlogMessages: <array|null> - array of string log messages or null if log message recording was not enabled during this transactionDEPRECATED: status: <object> - Transaction status"Ok": <null> - Transaction was successful"Err": <ERR> - Transaction failed with TransactionErrorsignatures: <array> - present if "signatures" are requested for transaction details; an array of signatures strings, corresponding to the transaction order in the blockrewards: <array> - present if rewards are requested; an array of JSON objects containing:pubkey: <string> - The public key, as base-58 encoded string, of the account that received the rewardlamports: <i64>- number of reward lamports credited or debited by the account, as a i64postBalance: <u64> - account balance in lamports after the reward was appliedrewardType: <string|undefined> - type of reward: "fee", "rent", "voting", "staking"commission: <u8|undefined> - vote account commission when the reward was credited, only present for voting and staking rewardsblockTime: <i64|null> - estimated production time, as Unix timestamp (seconds since the Unix epoch). null if not availableFor more details on returned data:​Transaction StructureInner Instructions StructureToken Balances StructureCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getConfirmedBlock",    "params": [430, "base64"]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "blockTime": null,    "blockhash": "3Eq21vXNB5s86c62bVuUfTeaMif1N2kUqRPBmGRJhyTA",    "parentSlot": 429,    "previousBlockhash": "mfcyqEXB3DnHXki6KjjmZck6YjmZLvpAByy2fj4nh6B",    "rewards": [],    "transactions": [      {        "meta": {          "err": null,          "fee": 5000,          "innerInstructions": [],          "logMessages": [],          "postBalances": [499998932500, 26858640, 1, 1, 1],          "postTokenBalances": [],          "preBalances": [499998937500, 26858640, 1, 1, 1],          "preTokenBalances": [],          "status": {            "Ok": null          }        },        "transaction": [          "AVj7dxHlQ9IrvdYVIjuiRFs1jLaDMHixgrv+qtHBwz51L4/ImLZhszwiyEJDIp7xeBSpm/TX5B7mYzxa+fPOMw0BAAMFJMJVqLw+hJYheizSoYlLm53KzgT82cDVmazarqQKG2GQsLgiqktA+a+FDR4/7xnDX7rsusMwryYVUdixfz1B1Qan1RcZLwqvxvJl4/t3zHragsUp0L47E24tAFUgAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAHYUgdNXR0u3xNdiTr072z2DVec9EQQ/wNo1OAAAAAAAtxOUhPBp2WSjUNJEgfvy70BbxI00fZyEPvFHNfxrtEAQQEAQIDADUCAAAAAQAAAAAAAACtAQAAAAAAAAdUE18R96XTJCe+YfRfUp6WP+YKCy/72ucOL8AoBFSpAA==",          "base64"        ]      }    ]  },  "id": 1}getConfirmedBlocks​DEPRECATEDThis method is expected to be removed in solana-core v2.0
Please use getBlocks insteadReturns a list of confirmed blocks between two slotsParameters:​start_slot, as u64 integerConfiguration object containing the following fields:Result:​The result field will be an array of u64 integers listing confirmed blocks
between start_slot and either end_slot - if provided, or latest confirmed block,
inclusive. Max range allowed is 500,000 slots.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc": "2.0","id":1,"method":"getConfirmedBlocks","params":[5, 10]}'Response:​{ "jsonrpc": "2.0", "result": [5, 6, 7, 8, 9, 10], "id": 1 }getConfirmedBlocksWithLimit​DEPRECATEDThis method is expected to be removed in solana-core v2.0
Please use getBlocksWithLimit insteadReturns a list of confirmed blocks starting at the given slotParameters:​start_slot, as u64 integerlimit, as u64 integerConfiguration object containing the following fields:Result:​The result field will be an array of u64 integers listing confirmed blocks
starting at start_slot for up to limit blocks, inclusive.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0", "id": 1,    "method": "getConfirmedBlocksWithLimit",    "params": [5, 3]  }'Response:​{ "jsonrpc": "2.0", "result": [5, 6, 7], "id": 1 }getConfirmedSignaturesForAddress2​DEPRECATEDThis method is expected to be removed in solana-core v2.0
Please use getSignaturesForAddress insteadReturns signatures for confirmed transactions that include the given address in
their accountKeys list. Returns signatures backwards in time from the
provided signature or most recent confirmed blockParameters:​account address, as base-58 encoded stringConfiguration object containing the following fields:maximum transaction signatures to return (between 1 and 1,000, default: 1,000).start searching backwards from this transaction signature. (If not provided the search starts from the top of the highest max confirmed block.)search until this transaction signature, if found before limit reached.Result:​The result field will be an array of <object>, ordered
from newest to oldest transaction, containing transaction signature information with the following fields:signature: <string> - transaction signature as base-58 encoded stringslot: <u64> - The slot that contains the block with the transactionerr: <object|null> - Error if transaction failed, null if transaction succeeded. TransactionError definitionsmemo: <string|null> - Memo associated with the transaction, null if no memo is presentblockTime: <i64|null> - estimated production time, as Unix timestamp (seconds since the Unix epoch) of when transaction was processed. null if not available.Code sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getConfirmedSignaturesForAddress2",    "params": [      "Vote111111111111111111111111111111111111111",      {        "limit": 1      }    ]  }'Response:​{  "jsonrpc": "2.0",  "result": [    {      "err": null,      "memo": null,      "signature": "5h6xBEauJ3PK6SWCZ1PGjBvj8vDdWG3KpwATGy1ARAXFSDwt8GFXM7W5Ncn16wmqokgpiKRLuS83KUxyZyv2sUYv",      "slot": 114,      "blockTime": null    }  ],  "id": 1}getConfirmedTransaction​DEPRECATEDThis method is expected to be removed in solana-core v2.0
Please use getTransaction insteadReturns transaction details for a confirmed transactionParameters:​transaction signature, as base-58 encoded stringConfiguration object containing the following fields:Encoding format for Account dataValues: jsonbase58base64jsonParsedDetailsbase58 is slow and limited to less than 129 bytes of Account data.jsonParsed encoding attempts to use program-specific instruction parsers
to return more human-readable and explicit data in the transaction.message.instructions list.If jsonParsed is requested but a parser cannot be found, the instruction
falls back to regular json encoding (accounts, data, and programIdIndex fields).Result:​<null> - if transaction is not found or not confirmed<object> - if transaction is confirmed, an object with the following fields:slot: <u64> - the slot this transaction was processed intransaction: <object|[string,encoding]> - Transaction object, either in JSON format or encoded binary data, depending on encoding parameterblockTime: <i64|null> - estimated production time, as Unix timestamp (seconds since the Unix epoch) of when the transaction was processed. null if not availablemeta: <object|null> - transaction status metadata object:err: <object|null> - Error if transaction failed, null if transaction succeeded. TransactionError definitionsfee: <u64> - fee this transaction was charged, as u64 integerpreBalances: <array> - array of u64 account balances from before the transaction was processedpostBalances: <array> - array of u64 account balances after the transaction was processedinnerInstructions: <array|null> - List of inner instructions or null if inner instruction recording was not enabled during this transactionpreTokenBalances: <array|undefined> - List of token balances from before the transaction was processed or omitted if token balance recording was not yet enabled during this transactionpostTokenBalances: <array|undefined> - List of token balances from after the transaction was processed or omitted if token balance recording was not yet enabled during this transactionlogMessages: <array|null> - array of string log messages or null if log message recording was not enabled during this transactionDEPRECATED: status: <object> - Transaction status"Ok": <null> - Transaction was successful"Err": <ERR> - Transaction failed with TransactionErrorCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getConfirmedTransaction",    "params": [      "2nBhEBYYvfaAe16UMNqRHre4YNSskvuYgx3M6E4JP1oDYvZEJHvoPzyUidNgNX5r9sTyN1J9UxtbCXy2rqYcuyuv",      "base64"    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "meta": {      "err": null,      "fee": 5000,      "innerInstructions": [],      "postBalances": [499998932500, 26858640, 1, 1, 1],      "postTokenBalances": [],      "preBalances": [499998937500, 26858640, 1, 1, 1],      "preTokenBalances": [],      "status": {        "Ok": null      }    },    "slot": 430,    "transaction": [      "AVj7dxHlQ9IrvdYVIjuiRFs1jLaDMHixgrv+qtHBwz51L4/ImLZhszwiyEJDIp7xeBSpm/TX5B7mYzxa+fPOMw0BAAMFJMJVqLw+hJYheizSoYlLm53KzgT82cDVmazarqQKG2GQsLgiqktA+a+FDR4/7xnDX7rsusMwryYVUdixfz1B1Qan1RcZLwqvxvJl4/t3zHragsUp0L47E24tAFUgAAAABqfVFxjHdMkoVmOYaR1etoteuKObS21cc1VbIQAAAAAHYUgdNXR0u3xNdiTr072z2DVec9EQQ/wNo1OAAAAAAAtxOUhPBp2WSjUNJEgfvy70BbxI00fZyEPvFHNfxrtEAQQEAQIDADUCAAAAAQAAAAAAAACtAQAAAAAAAAdUE18R96XTJCe+YfRfUp6WP+YKCy/72ucOL8AoBFSpAA==",      "base64"    ]  },  "id": 1}getFeeCalculatorForBlockhash​DEPRECATEDThis method is expected to be removed in solana-core v2.0
Please use isBlockhashValid or getFeeForMessage insteadReturns the fee calculator associated with the query blockhash, or null if the blockhash has expiredParameters:​query blockhash, as a base-58 encoded stringConfiguration object containing the following fields:The minimum slot that the request can be evaluated atResult:​The result will be an RpcResponse JSON object with value equal to:<null> - if the query blockhash has expired; or<object> - otherwise, a JSON object containing:feeCalculator: <object> - FeeCalculator object describing the cluster fee rate at the queried blockhashCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {    "jsonrpc": "2.0",    "id": 1,    "method": "getFeeCalculatorForBlockhash",    "params": [      "GJxqhuxcgfn5Tcj6y3f8X4FeCDd2RQ6SnEMo1AAxrPRZ"    ]  }'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 221    },    "value": {      "feeCalculator": {        "lamportsPerSignature": 5000      }    }  },  "id": 1}getFeeRateGovernor​DEPRECATEDThis method is expected to be removed in solana-core v2.0Returns the fee rate governor information from the root bankParameters:​NoneResult:​The result will be an RpcResponse JSON object with value equal to an object with the following fields:burnPercent: <u8> - Percentage of fees collected to be destroyedmaxLamportsPerSignature: <u64> - Largest value lamportsPerSignature can attain for the next slotminLamportsPerSignature: <u64> - Smallest value lamportsPerSignature can attain for the next slottargetLamportsPerSignature: <u64> - Desired fee rate for the clustertargetSignaturesPerSlot: <u64> - Desired signature rate for the clusterCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getFeeRateGovernor"}'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 54    },    "value": {      "feeRateGovernor": {        "burnPercent": 50,        "maxLamportsPerSignature": 100000,        "minLamportsPerSignature": 5000,        "targetLamportsPerSignature": 10000,        "targetSignaturesPerSlot": 20000      }    }  },  "id": 1}getFees​DEPRECATEDThis method is expected to be removed in solana-core v2.0
Please use getFeeForMessage insteadReturns a recent block hash from the ledger, a fee schedule that can be used to
compute the cost of submitting a transaction using it, and the last slot in
which the blockhash will be valid.Parameters:​Pubkey of account to query, as base-58 encoded stringConfiguration object containing the following fields:Result:​The result will be an RpcResponse JSON object with value set to a JSON object with the following fields:blockhash: <string> - a Hash as base-58 encoded stringfeeCalculator: <object> - FeeCalculator object, the fee schedule for this block hashlastValidSlot: <u64> - DEPRECATED - this value is inaccurate and should not be relied uponlastValidBlockHeight: <u64> - last block height at which the blockhash will be validCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  { "jsonrpc":"2.0", "id": 1, "method":"getFees"}'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1    },    "value": {      "blockhash": "CSymwgTNX1j3E4qhKfJAUE41nBWEwXufoYryPbkde5RR",      "feeCalculator": {        "lamportsPerSignature": 5000      },      "lastValidSlot": 297,      "lastValidBlockHeight": 296    }  },  "id": 1}getRecentBlockhash​DEPRECATEDThis method is expected to be removed in solana-core v2.0
Please use getLatestBlockhash insteadReturns a recent block hash from the ledger, and a fee schedule that can be used to compute the cost of submitting a transaction using it.Parameters:​Pubkey of account to query, as base-58 encoded stringConfiguration object containing the following fields:Result:​An RpcResponse containing a JSON object consisting of a string blockhash and FeeCalculator JSON object.RpcResponse<object> - RpcResponse JSON object with value field set to a JSON object including:blockhash: <string> - a Hash as base-58 encoded stringfeeCalculator: <object> - FeeCalculator object, the fee schedule for this block hashCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getRecentBlockhash"}'Response:​{  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 1    },    "value": {      "blockhash": "CSymwgTNX1j3E4qhKfJAUE41nBWEwXufoYryPbkde5RR",      "feeCalculator": {        "lamportsPerSignature": 5000      }    }  },  "id": 1}getSnapshotSlot​DEPRECATEDThis method is expected to be removed in solana-core v2.0
Please use getHighestSnapshotSlot insteadReturns the highest slot that the node has a snapshot forParameters:​NoneResult:​<u64> - Snapshot slotCode sample:​curl http://localhost:8899 -X POST -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getSnapshotSlot"}'Response:​{ "jsonrpc": "2.0", "result": 100, "id": 1 }Result when the node has no snapshot:{  "jsonrpc": "2.0",  "error": { "code": -32008, "message": "No snapshot" },  "id": 1}After connecting to the RPC PubSub websocket at ws://<ADDRESS>/:Submit subscription requests to the websocket using the methods belowMultiple subscriptions may be active at onceMany subscriptions take the optional commitment parameter, defining how finalized a change should be to trigger a notification. For subscriptions, if commitment is unspecified, the default value is finalized.RPC PubSub WebSocket Endpoint​Default port: 8900 e.g. ws://localhost:8900, http://192.168.1.88:8900Methods​The following methods are supported in the RPC Websocket API:accountSubscribe​Subscribe to an account to receive notifications when the lamports or data for a given account public key changesParameters:​Account Pubkey, as base-58 encoded stringConfiguration object containing the following fields:Encoding format for Account dataValues: base58base64base64+zstdjsonParsedDetailsbase58 is slow.jsonParsed encoding attempts to use program-specific state parsers to return more
human-readable and explicit account state dataIf jsonParsed is requested but a parser cannot be found, the field falls back to
binary encoding, detectable when the datafield is typestring.Result:​<number> - Subscription id (needed to unsubscribe)Code sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "accountSubscribe",  "params": [    "CM78CPUeXjn8o3yroDHxUtKsZZgoy4GPkPPXfouKNH12",    {      "encoding": "jsonParsed",      "commitment": "finalized"    }  ]}Response:​{ "jsonrpc": "2.0", "result": 23784, "id": 1 }Notification Format:​The notification format is the same as seen in the getAccountInfo RPC HTTP method.Base58 encoding:{  "jsonrpc": "2.0",  "method": "accountNotification",  "params": {    "result": {      "context": {        "slot": 5199307      },      "value": {        "data": [          "11116bv5nS2h3y12kD1yUKeMZvGcKLSjQgX6BeV7u1FrjeJcKfsHPXHRDEHrBesJhZyqnnq9qJeUuF7WHxiuLuL5twc38w2TXNLxnDbjmuR",          "base58"        ],        "executable": false,        "lamports": 33594,        "owner": "11111111111111111111111111111111",        "rentEpoch": 635,        "space": 80      }    },    "subscription": 23784  }}Parsed-JSON encoding:{  "jsonrpc": "2.0",  "method": "accountNotification",  "params": {    "result": {      "context": {        "slot": 5199307      },      "value": {        "data": {          "program": "nonce",          "parsed": {            "type": "initialized",            "info": {              "authority": "Bbqg1M4YVVfbhEzwA9SpC9FhsaG83YMTYoR4a8oTDLX",              "blockhash": "LUaQTmM7WbMRiATdMMHaRGakPtCkc2GHtH57STKXs6k",              "feeCalculator": {                "lamportsPerSignature": 5000              }            }          }        },        "executable": false,        "lamports": 33594,        "owner": "11111111111111111111111111111111",        "rentEpoch": 635,        "space": 80      }    },    "subscription": 23784  }}accountUnsubscribe​Unsubscribe from account change notificationsParameters:​id of the account Subscription to cancelResult:​<bool> - unsubscribe success messageCode sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "accountUnsubscribe",  "params": [0]}Response:​{ "jsonrpc": "2.0", "result": true, "id": 1 }blockSubscribe​Subscribe to receive notification anytime a new block is Confirmed or Finalized.cautionThis subscription is unstable and only available if the validator was started
with the --rpc-pubsub-enable-block-subscription flag.NOTE: The format of this subscription may change in the futureParameters:​filter criteria for the logs to receive results by account type; currently supported:all - include all transactions in blockA JSON object with the following field:mentionsAccountOrProgram: <string> - return only transactions that mention the provided public key (as base-58 encoded string). If no mentions in a given block, then no notification will be sent.Configuration object containing the following fields:level of transaction detail to return, either "full", "signatures", or "none".whether to populate the `rewards` array.Encoding format for Account dataValues: base58base64base64+zstdjsonParsedDetailsbase58 is slowjsonParsed encoding attempts to use program-specific state parsers to return
more human-readable and explicit account state data.If jsonParsed is requested but a parser cannot be found, the field falls back
to base64 encoding, detectable when the data field is type string.Result:​integer - subscription id (needed to unsubscribe)Code sample:​{  "jsonrpc": "2.0",  "id": "1",  "method": "blockSubscribe",  "params": ["all"]}{  "jsonrpc": "2.0",  "id": "1",  "method": "blockSubscribe",  "params": [    {      "mentionsAccountOrProgram": "LieKvPRE8XeX3Y2xVNHjKlpAScD12lYySBVQ4HqoJ5op"    },    {      "commitment": "confirmed",      "encoding": "base64",      "showRewards": true,      "transactionDetails": "full"    }  ]}Response:​{ "jsonrpc": "2.0", "result": 0, "id": 1 }Notification Format:​The notification will be an object with the following fields:slot: <u64> - The corresponding slot.err: <object|null> - Error if something went wrong publishing the notification otherwise null.block: <object|null> - A block object as seen in the getBlock RPC HTTP method.{  "jsonrpc": "2.0",  "method": "blockNotification",  "params": {    "result": {      "context": {        "slot": 112301554      },      "value": {        "slot": 112301554,        "block": {          "previousBlockhash": "GJp125YAN4ufCSUvZJVdCyWQJ7RPWMmwxoyUQySydZA",          "blockhash": "6ojMHjctdqfB55JDpEpqfHnP96fiaHEcvzEQ2NNcxzHP",          "parentSlot": 112301553,          "transactions": [            {              "transaction": [                "OpltwoUvWxYi1P2U8vbIdE/aPntjYo5Aa0VQ2JJyeJE2g9Vvxk8dDGgFMruYfDu8/IfUWb0REppTe7IpAuuLRgIBAAkWnj4KHRpEWWW7gvO1c0BHy06wZi2g7/DLqpEtkRsThAXIdBbhXCLvltw50ZnjDx2hzw74NVn49kmpYj2VZHQJoeJoYJqaKcvuxCi/2i4yywedcVNDWkM84Iuw+cEn9/ROCrXY4qBFI9dveEERQ1c4kdU46xjxj9Vi+QXkb2Kx45QFVkG4Y7HHsoS6WNUiw2m4ffnMNnOVdF9tJht7oeuEfDMuUEaO7l9JeUxppCvrGk3CP45saO51gkwVYEgKzhpKjCx3rgsYxNR81fY4hnUQXSbbc2Y55FkwgRBpVvQK7/+clR4Gjhd3L4y+OtPl7QF93Akg1LaU9wRMs5nvfDFlggqI9PqJl+IvVWrNRdBbPS8LIIhcwbRTkSbqlJQWxYg3Bo2CTVbw7rt1ZubuHWWp0mD/UJpLXGm2JprWTePNULzHu67sfqaWF99LwmwjTyYEkqkRt1T0Je5VzHgJs0N5jY4iIU9K3lMqvrKOIn/2zEMZ+ol2gdgjshx+sphIyhw65F3J/Dbzk04LLkK+CULmN571Y+hFlXF2ke0BIuUG6AUF+4214Cu7FXnqo3rkxEHDZAk0lRrAJ8X/Z+iwuwI5cgbd9uHXZaGT2cvhRs7reawctIXtX1s3kTqM9YV+/wCpDLAp8axcEkaQkLDKRoWxqp8XLNZSKial7Rk+ELAVVKWoWLRXRZ+OIggu0OzMExvVLE5VHqy71FNHq4gGitkiKYNFWSLIE4qGfdFLZXy/6hwS+wq9ewjikCpd//C9BcCL7Wl0iQdUslxNVCBZHnCoPYih9JXvGefOb9WWnjGy14sG9j70+RSVx6BlkFELWwFvIlWR/tHn3EhHAuL0inS2pwX7ZQTAU6gDVaoqbR2EiJ47cKoPycBNvHLoKxoY9AZaBjPl6q8SKQJSFyFd9n44opAgI6zMTjYF/8Ok4VpXEESp3QaoUyTI9sOJ6oFP6f4dwnvQelgXS+AEfAsHsKXxGAIUDQENAgMEBQAGBwgIDg8IBJCER3QXl1AVDBADCQoOAAQLERITDAjb7ugh3gOuTy==",                "base64"              ],              "meta": {                "err": null,                "status": {                  "Ok": null                },                "fee": 5000,                "preBalances": [                  1758510880, 2067120, 1566000, 1461600, 2039280, 2039280,                  1900080, 1865280, 0, 3680844220, 2039280                ],                "postBalances": [                  1758505880, 2067120, 1566000, 1461600, 2039280, 2039280,                  1900080, 1865280, 0, 3680844220, 2039280                ],                "innerInstructions": [                  {                    "index": 0,                    "instructions": [                      {                        "programIdIndex": 13,                        "accounts": [1, 15, 3, 4, 2, 14],                        "data": "21TeLgZXNbtHXVBzCaiRmH"                      },                      {                        "programIdIndex": 14,                        "accounts": [3, 4, 1],                        "data": "6qfC8ic7Aq99"                      },                      {                        "programIdIndex": 13,                        "accounts": [1, 15, 3, 5, 2, 14],                        "data": "21TeLgZXNbsn4QEpaSEr3q"                      },                      {                        "programIdIndex": 14,                        "accounts": [3, 5, 1],                        "data": "6LC7BYyxhFRh"                      }                    ]                  },                  {                    "index": 1,                    "instructions": [                      {                        "programIdIndex": 14,                        "accounts": [4, 3, 0],                        "data": "7aUiLHFjSVdZ"                      },                      {                        "programIdIndex": 19,                        "accounts": [17, 18, 16, 9, 11, 12, 14],                        "data": "8kvZyjATKQWYxaKR1qD53V"                      },                      {                        "programIdIndex": 14,                        "accounts": [9, 11, 18],                        "data": "6qfC8ic7Aq99"                      }                    ]                  }                ],                "logMessages": [                  "Program QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB invoke [1]",                  "Program QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV invoke [2]"                ],                "preTokenBalances": [                  {                    "accountIndex": 4,                    "mint": "iouQcQBAiEXe6cKLS85zmZxUqaCqBdeHFpqKoSz615u",                    "uiTokenAmount": {                      "uiAmount": null,                      "decimals": 6,                      "amount": "0",                      "uiAmountString": "0"                    },                    "owner": "LieKvPRE8XeX3Y2xVNHjKlpAScD12lYySBVQ4HqoJ5op",                    "programId": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"                  },                  {                    "accountIndex": 5,                    "mint": "iouQcQBAiEXe6cKLS85zmZxUqaCqBdeHFpqKoSz615u",                    "uiTokenAmount": {                      "uiAmount": 11513.0679,                      "decimals": 6,                      "amount": "11513067900",                      "uiAmountString": "11513.0679"                    },                    "owner": "rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk",                    "programId": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"                  },                  {                    "accountIndex": 10,                    "mint": "Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1",                    "uiTokenAmount": {                      "uiAmount": null,                      "decimals": 6,                      "amount": "0",                      "uiAmountString": "0"                    },                    "owner": "CL9wkGFT3SZRRNa9dgaovuRV7jrVVigBUZ6DjcgySsCU",                    "programId": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"                  },                  {                    "accountIndex": 11,                    "mint": "Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1",                    "uiTokenAmount": {                      "uiAmount": 15138.514093,                      "decimals": 6,                      "amount": "15138514093",                      "uiAmountString": "15138.514093"                    },                    "owner": "LieKvPRE8XeX3Y2xVNHjKlpAScD12lYySBVQ4HqoJ5op",                    "programId": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"                  }                ],                "postTokenBalances": [                  {                    "accountIndex": 4,                    "mint": "iouQcQBAiEXe6cKLS85zmZxUqaCqBdeHFpqKoSz615u",                    "uiTokenAmount": {                      "uiAmount": null,                      "decimals": 6,                      "amount": "0",                      "uiAmountString": "0"                    },                    "owner": "LieKvPRE8XeX3Y2xVNHjKlpAScD12lYySBVQ4HqoJ5op",                    "programId": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"                  },                  {                    "accountIndex": 5,                    "mint": "iouQcQBAiEXe6cKLS85zmZxUqaCqBdeHFpqKoSz615u",                    "uiTokenAmount": {                      "uiAmount": 11513.103028,                      "decimals": 6,                      "amount": "11513103028",                      "uiAmountString": "11513.103028"                    },                    "owner": "rXhAofQCT7NN9TUqigyEAUzV1uLL4boeD8CRkNBSkYk",                    "programId": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"                  },                  {                    "accountIndex": 10,                    "mint": "Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1",                    "uiTokenAmount": {                      "uiAmount": null,                      "decimals": 6,                      "amount": "0",                      "uiAmountString": "0"                    },                    "owner": "CL9wkGFT3SZRRNa9dgaovuRV7jrVVigBUZ6DjcgySsCU",                    "programId": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"                  },                  {                    "accountIndex": 11,                    "mint": "Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1",                    "uiTokenAmount": {                      "uiAmount": 15489.767829,                      "decimals": 6,                      "amount": "15489767829",                      "uiAmountString": "15489.767829"                    },                    "owner": "BeiHVPRE8XeX3Y2xVNrSsTpAScH94nYySBVQ4HqgN9at",                    "programId": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"                  }                ],                "rewards": []              }            }          ],          "blockTime": 1639926816,          "blockHeight": 101210751        },        "err": null      }    },    "subscription": 14  }}blockUnsubscribe​Unsubscribe from block notificationsParameters:​subscription id to cancelResult:​<bool> - unsubscribe success messageCode sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "blockUnsubscribe",  "params": [0]}Response:​{ "jsonrpc": "2.0", "result": true, "id": 1 }logsSubscribe​Subscribe to transaction loggingParameters:​filter criteria for the logs to receive results by account type. The following filters types are currently supported:A string with one of the following values:all - subscribe to all transactions except for simple vote transactionsallWithVotes - subscribe to all transactions, including simple vote
transactionsAn object with the following field:mentions: [ <string> ] - array containing a single Pubkey (as base-58
encoded string); if present, subscribe to only transactions mentioning this addresscautionCurrently, the mentions field
only supports one
Pubkey string per method call. Listing additional addresses will result in an
error.Configuration object containing the following fields:Result:​<integer> - Subscription id (needed to unsubscribe)Code sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "logsSubscribe",  "params": [    {      "mentions": [ "11111111111111111111111111111111" ]    },    {      "commitment": "finalized"    }  ]}{  "jsonrpc": "2.0",  "id": 1,  "method": "logsSubscribe",  "params": [ "all" ]}Response:​{ "jsonrpc": "2.0", "result": 24040, "id": 1 }Notification Format:​The notification will be an RpcResponse JSON object with value equal to:signature: <string> - The transaction signature base58 encoded.err: <object|null> - Error if transaction failed, null if transaction
succeeded.
TransactionError definitionslogs: <array|null> - Array of log messages the transaction instructions
output during execution, null if simulation failed before the transaction was
able to execute (for example due to an invalid blockhash or signature
verification failure)Example:{  "jsonrpc": "2.0",  "method": "logsNotification",  "params": {    "result": {      "context": {        "slot": 5208469      },      "value": {        "signature": "5h6xBEauJ3PK6SWCZ1PGjBvj8vDdWG3KpwATGy1ARAXFSDwt8GFXM7W5Ncn16wmqokgpiKRLuS83KUxyZyv2sUYv",        "err": null,        "logs": [          "SBF program 83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri success"        ]      }    },    "subscription": 24040  }}logsUnsubscribe​Unsubscribe from transaction loggingParameters:​subscription id to cancelResult:​<bool> - unsubscribe success messageCode sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "logsUnsubscribe",  "params": [0]}Response:​{ "jsonrpc": "2.0", "result": true, "id": 1 }programSubscribe​Subscribe to a program to receive notifications when the lamports or data for an account owned by the given program changesParameters:​Pubkey of the program_id, as base-58 encoded stringConfiguration object containing the following fields:filter results using various filter objectsinfoThe resultant account must meet ALL filter criteria to be included in the returned resultsEncoding format for Account dataValues: base58base64base64+zstdjsonParsedDetailsbase58 is slow.jsonParsed encoding attempts to use program-specific
state parsers to return more human-readable and explicit account state data.If jsonParsed is requested but a parser cannot be found, the field falls
back to base64 encoding, detectable when the data field is type string.Result:​<integer> - Subscription id (needed to unsubscribe)Code sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "programSubscribe",  "params": [    "11111111111111111111111111111111",    {      "encoding": "base64",      "commitment": "finalized"    }  ]}{  "jsonrpc": "2.0",  "id": 1,  "method": "programSubscribe",  "params": [    "11111111111111111111111111111111",    {      "encoding": "jsonParsed"    }  ]}{  "jsonrpc": "2.0",  "id": 1,  "method": "programSubscribe",  "params": [    "11111111111111111111111111111111",    {      "encoding": "base64",      "filters": [        {          "dataSize": 80        }      ]    }  ]}Response:​{ "jsonrpc": "2.0", "result": 24040, "id": 1 }Notification format​The notification format is a single program account object as seen in the getProgramAccounts RPC HTTP method.Base58 encoding:{  "jsonrpc": "2.0",  "method": "programNotification",  "params": {    "result": {      "context": {        "slot": 5208469      },      "value": {        "pubkey": "H4vnBqifaSACnKa7acsxstsY1iV1bvJNxsCY7enrd1hq",        "account": {          "data": [            "11116bv5nS2h3y12kD1yUKeMZvGcKLSjQgX6BeV7u1FrjeJcKfsHPXHRDEHrBesJhZyqnnq9qJeUuF7WHxiuLuL5twc38w2TXNLxnDbjmuR",            "base58"          ],          "executable": false,          "lamports": 33594,          "owner": "11111111111111111111111111111111",          "rentEpoch": 636,          "space": 80        }      }    },    "subscription": 24040  }}Parsed-JSON encoding:{  "jsonrpc": "2.0",  "method": "programNotification",  "params": {    "result": {      "context": {        "slot": 5208469      },      "value": {        "pubkey": "H4vnBqifaSACnKa7acsxstsY1iV1bvJNxsCY7enrd1hq",        "account": {          "data": {            "program": "nonce",            "parsed": {              "type": "initialized",              "info": {                "authority": "Bbqg1M4YVVfbhEzwA9SpC9FhsaG83YMTYoR4a8oTDLX",                "blockhash": "LUaQTmM7WbMRiATdMMHaRGakPtCkc2GHtH57STKXs6k",                "feeCalculator": {                  "lamportsPerSignature": 5000                }              }            }          },          "executable": false,          "lamports": 33594,          "owner": "11111111111111111111111111111111",          "rentEpoch": 636,          "space": 80        }      }    },    "subscription": 24040  }}programUnsubscribe​Unsubscribe from program-owned account change notificationsParameters:​id of account Subscription to cancelResult:​<bool> - unsubscribe success messageCode sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "programUnsubscribe",  "params": [0]}Response:​{ "jsonrpc": "2.0", "result": true, "id": 1 }signatureSubscribe​Subscribe to a transaction signature to receive notification when a given transaction is committed. On signatureNotification - the subscription is automatically cancelled.
The signature must be a txid, the first signature of a transaction.Parameters:​Transaction Signature, as base-58 encoded stringConfiguration object containing the following fields:Result:​<integer> - subscription id (needed to unsubscribe)Code sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "signatureSubscribe",  "params": [    "2EBVM6cB8vAAD93Ktr6Vd8p67XPbQzCJX47MpReuiCXJAtcjaxpvWpcg9Ege1Nr5Tk3a2GFrByT7WPBjdsTycY9b",    {      "commitment": "finalized"    }  ]}Response:​{ "jsonrpc": "2.0", "result": 0, "id": 1 }Notification Format:​The notification will be an RpcResponse JSON object with value containing an object with:err: <object|null> - Error if transaction failed, null if transaction succeeded. TransactionError definitionsExample:{  "jsonrpc": "2.0",  "method": "signatureNotification",  "params": {    "result": {      "context": {        "slot": 5207624      },      "value": {        "err": null      }    },    "subscription": 24006  }}signatureUnsubscribe​Unsubscribe from signature confirmation notificationParameters:​subscription id to cancelResult:​<bool> - unsubscribe success messageCode sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "signatureUnsubscribe",  "params": [0]}Response:​{ "jsonrpc": "2.0", "result": true, "id": 1 }slotSubscribe​Subscribe to receive notification anytime a slot is processed by the validatorParameters:​NoneResult:​<integer> - Subscription id (needed to unsubscribe)Code sample:​{ "jsonrpc": "2.0", "id": 1, "method": "slotSubscribe" }Response:​{ "jsonrpc": "2.0", "result": 0, "id": 1 }Notification Format:​The notification will be an object with the following fields:parent: <u64> - The parent slotroot: <u64> - The current root slotslot: <u64> - The newly set slot valueExample:{  "jsonrpc": "2.0",  "method": "slotNotification",  "params": {    "result": {      "parent": 75,      "root": 44,      "slot": 76    },    "subscription": 0  }}slotUnsubscribe​Unsubscribe from slot notificationsParameters:​subscription id to cancelResult:​<bool> - unsubscribe success messageCode sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "slotUnsubscribe",  "params": [0]}Response:​{ "jsonrpc": "2.0", "result": true, "id": 1 }slotsUpdatesSubscribe​Subscribe to receive a notification from the validator on a variety of updates
on every slotcautionThis subscription is unstableNOTE: the format of this subscription may change in the future and it may not always be supportedParameters:​NoneResult:​<integer> - Subscription id (needed to unsubscribe)Code sample:​{ "jsonrpc": "2.0", "id": 1, "method": "slotsUpdatesSubscribe" }Response:​{ "jsonrpc": "2.0", "result": 0, "id": 1 }Notification Format:​The notification will be an object with the following fields:parent: <u64> - The parent slotslot: <u64> - The newly updated slottimestamp: <i64> - The Unix timestamp of the updatetype: <string> - The update type, one of:"firstShredReceived""completed""createdBank""frozen""dead""optimisticConfirmation""root"{  "jsonrpc": "2.0",  "method": "slotsUpdatesNotification",  "params": {    "result": {      "parent": 75,      "slot": 76,      "timestamp": 1625081266243,      "type": "optimisticConfirmation"    },    "subscription": 0  }}slotsUpdatesUnsubscribe​Unsubscribe from slot-update notificationsParameters:​subscription id to cancelResult:​<bool> - unsubscribe success messageCode sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "slotsUpdatesUnsubscribe",  "params": [0]}Response:​{ "jsonrpc": "2.0", "result": true, "id": 1 }rootSubscribe​Subscribe to receive notification anytime a new root is set by the validator.Parameters:​NoneResult:​integer - subscription id (needed to unsubscribe)Code sample:​{ "jsonrpc": "2.0", "id": 1, "method": "rootSubscribe" }Response:​{ "jsonrpc": "2.0", "result": 0, "id": 1 }Notification Format:​The result is the latest root slot number.{  "jsonrpc": "2.0",  "method": "rootNotification",  "params": {    "result": 42,    "subscription": 0  }}rootUnsubscribe​Unsubscribe from root notificationsParameters:​subscription id to cancelResult:​<bool> - unsubscribe success messageCode sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "rootUnsubscribe",  "params": [0]}Response:​{ "jsonrpc": "2.0", "result": true, "id": 1 }voteSubscribe​Subscribe to receive notification anytime a new vote is observed in gossip.
These votes are pre-consensus therefore there is no guarantee these votes will
enter the ledger.cautionThis subscription is unstable and only available if the validator was started
with the --rpc-pubsub-enable-vote-subscription flag. The format of this
subscription may change in the futureParameters:​NoneResult:​<integer> - subscription id (needed to unsubscribe)Code sample:​{ "jsonrpc": "2.0", "id": 1, "method": "voteSubscribe" }Response:​{ "jsonrpc": "2.0", "result": 0, "id": 1 }Notification Format:​The notification will be an object with the following fields:hash: <string> - The vote hashslots: <array> - The slots covered by the vote, as an array of u64 integerstimestamp: <i64|null> - The timestamp of the votesignature: <string> - The signature of the transaction that contained this vote{  "jsonrpc": "2.0",  "method": "voteNotification",  "params": {    "result": {      "hash": "8Rshv2oMkPu5E4opXTRyuyBeZBqQ4S477VG26wUTFxUM",      "slots": [1, 2],      "timestamp": null    },    "subscription": 0  }}voteUnsubscribe​Unsubscribe from vote notificationsParameters:​subscription id to cancelResult:​<bool> - unsubscribe success messageCode sample:​{  "jsonrpc": "2.0",  "id": 1,  "method": "voteUnsubscribe",  "params": [0]}Response:​{ "jsonrpc": "2.0", "result": true, "id": 1 }In this section, we will describe how to use the Solana command-line tools to
create a wallet, to send and receive SOL tokens, and to participate in
the cluster by delegating stake.To interact with a Solana cluster, we will use its command-line interface, also
known as the CLI. We use the command-line because it is the first place the
Solana core team deploys new functionality. The command-line interface is not
necessarily the easiest to use, but it provides the most direct, flexible, and
secure access to your Solana accounts.Getting Started​To get started using the Solana Command Line (CLI) tools:Install the Solana ToolsChoose a ClusterCreate a WalletCheck out our CLI conventionsYou can check what cluster the Solana command-line tool (CLI) is currently targeting by
running the following command:Use solana config set command to target a particular cluster. After setting
a cluster target, any future subcommands will send/receive information from that
cluster.solana config set --url https://api.devnet.solana.comThough not strictly necessary, the CLI will generally work best when its version
matches the software version running on the cluster. To get the locally-installed
CLI version, run:Ensure the local CLI version is greater than or equal to the cluster version.Before running any Solana CLI commands, let's go over some conventions that
you will see across all commands. First, the Solana CLI is actually a collection
of different commands for each action you might want to take. You can view the list
of all possible commands by running:To zoom in on how to use a particular command, run:where you replace the text <COMMAND> with the name of the command you want
to learn more about.The command's usage message will typically contain words such as <AMOUNT>,
<ACCOUNT_ADDRESS> or <KEYPAIR>. Each word is a placeholder for the type of
text you can execute the command with. For example, you can replace <AMOUNT>
with a number such as 42 or 100.42. You can replace <ACCOUNT_ADDRESS> with
the base58 encoding of your public key, such as
9grmKMwTiZwUHSExjtbFzHLPTdWoXgcg1bZkhvwTrTww.Keypair conventions​Many commands using the CLI tools require a value for a <KEYPAIR>. The value
you should use for the keypair depends on what type of
command line wallet you created.For example, the CLI help shows that the way to display any wallet's address
(also known as the keypair's pubkey), is:solana-keygen pubkey <KEYPAIR>Below, we show how to resolve what you should put in <KEYPAIR> depending
on your wallet type.Paper Wallet​In a paper wallet, the keypair is securely derived from the seed words and
optional passphrase you entered when the wallet was created. To use a paper
wallet keypair anywhere the <KEYPAIR> text is shown in examples or help
documents, enter the uri scheme prompt:// and the program will prompt you to
enter your seed words when you run the command.To display the wallet address of a Paper Wallet:solana-keygen pubkey prompt://File System Wallet​With a file system wallet, the keypair is stored in a file on your computer.
Replace <KEYPAIR> with the complete file path to the keypair file.For example, if the file system keypair file location is
/home/solana/my_wallet.json, to display the address, do:solana-keygen pubkey /home/solana/my_wallet.jsonHardware Wallet​If you chose a hardware wallet, use your
keypair URL,
such as usb://ledger?key=0.solana-keygen pubkey usb://ledger?key=0For an overview of staking, read first the
Staking and Inflation FAQ.After you have received SOL, you might consider putting
it to use by delegating stake to a validator. Stake is what we call tokens
in a stake account. Solana weights validator votes by the amount of stake
delegated to them, which gives those validators more influence in determining
then next valid block of transactions in the blockchain. Solana then generates
new SOL periodically to reward stakers and validators. You earn more rewards
the more stake you delegate.Create a Stake Account​To delegate stake, you will need to transfer some tokens into a stake account.
To create an account, you will need a keypair. Its public key will be used as
the stake account address.
No need for a password or encryption here; this keypair will be discarded right
after creating the stake account.solana-keygen new --no-passphrase -o stake-account.jsonThe output will contain the public key after the text pubkey:.pubkey: GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiVCopy the public key and store it for safekeeping. You will need it any time you
want to perform an action on the stake account you create next.Now, create a stake account:solana create-stake-account --from <KEYPAIR> stake-account.json <AMOUNT> \    --stake-authority <KEYPAIR> --withdraw-authority <KEYPAIR> \    --fee-payer <KEYPAIR><AMOUNT> tokens are transferred from the account at the "from" <KEYPAIR> to
a new stake account at the public key of stake-account.json.The stake-account.json file can now be discarded. To authorize additional
actions, you will use the --stake-authority or --withdraw-authority keypair,
not stake-account.json.View the new stake account with the solana stake-account command:solana stake-account <STAKE_ACCOUNT_ADDRESS>The output will look similar to this:Total Stake: 5000 SOLStake account is undelegatedStake Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5FWithdraw Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5FStake and withdraw authorities
can be set when creating an account via the
--stake-authority and --withdraw-authority options, or afterward with the
solana stake-authorize command. For example, to set a new stake authority,
run:solana stake-authorize <STAKE_ACCOUNT_ADDRESS> \    --stake-authority <KEYPAIR> --new-stake-authority <PUBKEY> \    --fee-payer <KEYPAIR>This will use the existing stake authority <KEYPAIR> to authorize a new stake
authority <PUBKEY> on the stake account <STAKE_ACCOUNT_ADDRESS>.Advanced: Derive Stake Account Addresses​When you delegate stake, you delegate all tokens in the stake account to a
single validator. To delegate to multiple validators, you will need multiple
stake accounts. Creating a new keypair for each account and managing those
addresses can be cumbersome. Fortunately, you can derive stake addresses using
the --seed option:solana create-stake-account --from <KEYPAIR> <STAKE_ACCOUNT_KEYPAIR> --seed <STRING> <AMOUNT> \    --stake-authority <PUBKEY> --withdraw-authority <PUBKEY> --fee-payer <KEYPAIR><STRING> is an arbitrary string up to 32 bytes, but will typically be a
number corresponding to which derived account this is. The first account might
be "0", then "1", and so on. The public key of <STAKE_ACCOUNT_KEYPAIR> acts
as the base address. The command derives a new address from the base address
and seed string. To see what stake address the command will derive, use solana create-address-with-seed:solana create-address-with-seed --from <PUBKEY> <SEED_STRING> STAKE<PUBKEY> is the public key of the <STAKE_ACCOUNT_KEYPAIR> passed to
solana create-stake-account.The command will output a derived address, which can be used for the
<STAKE_ACCOUNT_ADDRESS> argument in staking operations.Delegate Stake​To delegate your stake to a validator, you will need its vote account address.
Find it by querying the cluster for the list of all validators and their vote
accounts with the solana validators command:The first column of each row contains the validator's identity and the second
is the vote account address. Choose a validator and use its vote account
address in solana delegate-stake:solana delegate-stake --stake-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> <VOTE_ACCOUNT_ADDRESS> \    --fee-payer <KEYPAIR>The stake authority <KEYPAIR> authorizes the operation on the account with
address <STAKE_ACCOUNT_ADDRESS>. The stake is delegated to the vote account
with address <VOTE_ACCOUNT_ADDRESS>.After delegating stake, use solana stake-account to observe the changes
to the stake account:solana stake-account <STAKE_ACCOUNT_ADDRESS>You will see new fields "Delegated Stake" and "Delegated Vote Account Address"
in the output. The output will look similar to this:Total Stake: 5000 SOLCredits Observed: 147462Delegated Stake: 4999.99771712 SOLDelegated Vote Account Address: CcaHc2L43ZWjwCHART3oZoJvHLAe9hzT2DJNUpBzoTN1Stake activates starting from epoch: 42Stake Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5FWithdraw Authority: EXU95vqs93yPeCeAU7mPPu6HbRUmTFPEiGug9oCdvQ5FDeactivate Stake​Once delegated, you can undelegate stake with the solana deactivate-stake
command:solana deactivate-stake --stake-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> \    --fee-payer <KEYPAIR>The stake authority <KEYPAIR> authorizes the operation on the account
with address <STAKE_ACCOUNT_ADDRESS>.Note that stake takes several epochs to "cool down". Attempts to delegate stake
in the cool down period will fail.Withdraw Stake​Transfer tokens out of a stake account with the solana withdraw-stake command:solana withdraw-stake --withdraw-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> <RECIPIENT_ADDRESS> <AMOUNT> \    --fee-payer <KEYPAIR><STAKE_ACCOUNT_ADDRESS> is the existing stake account, the stake authority
<KEYPAIR> is the withdraw authority, and <AMOUNT> is the number of tokens
to transfer to <RECIPIENT_ADDRESS>.Split Stake​You may want to delegate stake to additional validators while your existing
stake is not eligible for withdrawal. It might not be eligible because it is
currently staked, cooling down, or locked up. To transfer tokens from an
existing stake account to a new one, use the solana split-stake command:solana split-stake --stake-authority <KEYPAIR> <STAKE_ACCOUNT_ADDRESS> <NEW_STAKE_ACCOUNT_KEYPAIR> <AMOUNT> \    --fee-payer <KEYPAIR><STAKE_ACCOUNT_ADDRESS> is the existing stake account, the stake authority
<KEYPAIR> is the stake authority, <NEW_STAKE_ACCOUNT_KEYPAIR> is the
keypair for the new account, and <AMOUNT> is the number of tokens to transfer
to the new account.To split a stake account into a derived account address, use the --seed
option. See
Derive Stake Account Addresses
for details.Developers can deploy on-chain programs (often called
smart contracts elsewhere) with the Solana tools.To learn about developing and executing programs on Solana, start with the
intro to Solana programs and then dig into the
details of on-chain programs.To deploy a program, use the Solana tools to interact with the on-chain loader
to:Initialize a program accountUpload the program's shared object to the program account's data bufferVerify the uploaded programFinalize the program by marking the program account executable.Once deployed, anyone can execute the program by sending transactions that
reference it to the cluster.Usage​Deploy a program​To deploy a program, you will need the location of the program's shared object
(the program binary .so)solana program deploy <PROGRAM_FILEPATH>Successful deployment will return the program id of the deployed program, for
example:Program Id: 3KS2k14CmtnuVv2fvYcvdrNgC94Y11WETBpMUGgXyWZLSpecify the keypair in the deploy command to deploy to a specific program id:solana program deploy --program-id <KEYPAIR_FILEPATH> <PROGRAM_FILEPATH>If the program id is not specified on the command line the tools will first look
for a keypair file matching the <PROGRAM_FILEPATH>, or internally generate a
new keypair.A matching program keypair file is in the same directory as the program's shared
object, and named <PROGRAM_NAME>-keypair.json. Matching program keypairs are
generated automatically by the program build tools:./path-to-program/program.so./path-to-program/program-keypair.jsonShowing a program account​To get information about a deployed program:solana program show <ACCOUNT_ADDRESS>An example output looks like:Program Id: 3KS2k14CmtnuVv2fvYcvdrNgC94Y11WETBpMUGgXyWZLOwner: BPFLoaderUpgradeab1e11111111111111111111111ProgramData Address: EHsACWBhgmw8iq5dmUZzTA1esRqcTognhKNHUkPi4q4gAuthority: FwoGJNUaJN2zfVEex9BB11Dqb3NJKy3e9oY3KTh9XzCULast Deployed In Slot: 63890568Data Length: 5216 (0x1460) bytesProgram Id is the address that can be referenced in an instruction's
program_id field when invoking a program.Owner: The loader this program was deployed with.ProgramData Address is the account associated with the program account that
holds the program's data (shared object).Authority is the program's upgrade authority.Last Deployed In Slot is the slot in which the program was last deployed.Data Length is the size of the space reserved for deployments. The actual
space used by the currently deployed program may be less.Redeploy a program​A program can be redeployed to the same address to facilitate rapid development,
bug fixes, or upgrades. Matching keypair files are generated once so that
redeployments will be to the same program address.The command looks the same as the deployment command:solana program deploy <PROGRAM_FILEPATH>By default, programs are deployed to accounts that are twice the size of the
original deployment. Doing so leaves room for program growth in future
redeployments. But, if the initially deployed program is very small (like a
simple helloworld program) and then later grows substantially, the redeployment
may fail. To avoid this, specify a max_len that is at least the size (in
bytes) that the program is expected to become (plus some wiggle room).solana program deploy --max-len 200000 <PROGRAM_FILEPATH>Note that program accounts are required to be
rent-exempt, and the
max-len is fixed after initial deployment, so any SOL in the program accounts
is locked up permanently.Resuming a failed deploy​If program deployment fails, there will be a hanging intermediate buffer account
that contains a non-zero balance. In order to recoup that balance you may
resume a failed deployment by providing the same intermediate buffer to a new
call to deploy.Deployment failures will print an error message specifying the seed phrase
needed to recover the generated intermediate buffer's keypair:==================================================================================Recover the intermediate account's ephemeral keypair file with`solana-keygen recover` and the following 12-word seed phrase:==================================================================================valley flat great hockey share token excess clever benefit traffic avocado athlete==================================================================================To resume a deploy, pass the recovered keypair asthe [BUFFER_SIGNER] to `solana program deploy` or `solana program write-buffer'.Or to recover the account's lamports, pass it as the[BUFFER_ACCOUNT_ADDRESS] argument to `solana program drain`.==================================================================================To recover the keypair:solana-keygen recover -o <KEYPAIR_PATH>When asked, enter the 12-word seed phrase.Then issue a new deploy command and specify the buffer:solana program deploy --buffer <KEYPAIR_PATH> <PROGRAM_FILEPATH>Closing program and buffer accounts, and reclaiming their lamports​Both program and buffer accounts can be closed and their lamport balances
transferred to a recipient's account.If deployment fails there will be a left over buffer account that holds
lamports. The buffer account can either be used to resume a
deploy or closed.The program or buffer account's authority must be present to close an account,
to list all the open program or buffer accounts that match the default
authority:solana program show --programssolana program show --buffersTo specify a different authority:solana program show --programs --buffer-authority <AURTHORITY_ADRESS>solana program show --buffers --buffer-authority <AURTHORITY_ADRESS>To close a single account:solana program close <BADDRESS>To close a single account and specify a different authority than the default:solana program close <ADDRESS> --buffer-authority <KEYPAIR_FILEPATH>To close a single account and specify a different recipient than the default:solana program close <ADDRESS> --recipient <RECIPIENT_ADDRESS>To close all the buffer accounts associated with the current authority:solana program close --buffersTo show all buffer accounts regardless of the authoritysolana program show --buffers --allThe program's upgrade authority must to be present to deploy a program. If no
authority is specified during program deployment, the default keypair is used as
the authority. This is why redeploying a program in the steps above didn't
require an authority to be explicitly specified.The authority can be specified during deployment:solana program deploy --upgrade-authority <UPGRADE_AUTHORITY_SIGNER> <PROGRAM_FILEPATH>Or after deployment and using the default keypair as the current authority:solana program set-upgrade-authority <PROGRAM_ADDRESS> --new-upgrade-authority <NEW_UPGRADE_AUTHORITY>Or after deployment and specifying the current authority:solana program set-upgrade-authority <PROGRAM_ADDRESS> --upgrade-authority <UPGRADE_AUTHORITY_SIGNER> --new-upgrade-authority <NEW_UPGRADE_AUTHORITY>Immutable programs​A program can be marked immutable, which prevents all further redeployments, by
specifying the --final flag during deployment:solana program deploy <PROGRAM_FILEPATH> --finalOr anytime after:solana program set-upgrade-authority <PROGRAM_ADDRESS> --finalDumping a program to a file​The deployed program may be dumped back to a local file:solana program dump <ACCOUNT_ADDRESS> <OUTPUT_FILEPATH>The dumped file will be in the same as what was deployed, so in the case of a
shared object, the dumped file will be a fully functional shared object. Note
that the dump command dumps the entire data space, which means the output file
will have trailing zeros after the shared object's data up to max_len.
Sometimes it is useful to dump and compare a program to ensure it matches a
known program binary. The original program file can be zero-extended, hashed,
and compared to the hash of the dumped file.$ solana dump <ACCOUNT_ADDRESS> dump.so$ cp original.so extended.so$ truncate -r dump.so extended.so$ sha256sum extended.so dump.soUsing an intermediary Buffer account​Instead of deploying directly to the program account, the program can be written
to an intermediary buffer account. Intermediary accounts can be useful for things
like multi-entity governed programs where the governing members fist verify the
intermediary buffer contents and then vote to allow an upgrade using it.solana program write-buffer <PROGRAM_FILEPATH>Buffer accounts support authorities like program accounts:solana program set-buffer-authority <BUFFER_ADDRESS> --new-buffer-authority <NEW_BUFFER_AUTHORITY>One exception is that buffer accounts cannot be marked immutable like program
accounts can, so they don't support --final.The buffer account, once entirely written, can be passed to deploy to deploy
the program:solana program deploy --program-id <PROGRAM_ADDRESS> --buffer <BUFFER_ADDRESS>Note, the buffer's authority must match the program's upgrade authority.Buffers also support show and dump just like programs do.There are multiple ways to install the Solana tools on your computer
depending on your preferred workflow:Use Solana's Install Tool (Simplest option)Download Prebuilt BinariesBuild from SourceUse HomebrewMacOS & Linux​Open your favorite Terminal applicationInstall the Solana release
v1.14.18 on your
machine by running:sh -c "$(curl -sSfL https://release.solana.com/v1.14.18/install)"You can replace v1.14.18 with the release tag matching
the software version of your desired release, or use one of the three symbolic
channel names: stable, beta, or edge.The following output indicates a successful update:downloading v1.14.18 installerConfiguration: /home/solana/.config/solana/install/config.ymlActive release directory: /home/solana/.local/share/solana/install/active_release* Release version: v1.14.18* Release URL: https://github.com/solana-labs/solana/releases/download/v1.14.18/solana-release-x86_64-unknown-linux-gnu.tar.bz2Update successfulDepending on your system, the end of the installer messaging may prompt you
toPlease update your PATH environment variable to include the solana programs:If you get the above message, copy and paste the recommended command below
it to update PATHConfirm you have the desired version of solana installed by running:After a successful install, solana-install update may be used to easily
update the Solana software to a newer version at any time.Windows​Open a Command Prompt (cmd.exe) as an AdministratorSearch for Command Prompt in the Windows search bar. When the Command
Prompt app appears, right-click and select “Open as Administrator”.
If you are prompted by a pop-up window asking “Do you want to allow this app to
make changes to your device?”, click Yes.Copy and paste the following command, then press Enter to download the Solana
installer into a temporary directory:curl https://release.solana.com/v1.14.18/solana-install-init-x86_64-pc-windows-msvc.exe --output C:\solana-install-tmp\solana-install-init.exe --create-dirsCopy and paste the following command, then press Enter to install the latest
version of Solana. If you see a security pop-up by your system, please select
to allow the program to run.C:\solana-install-tmp\solana-install-init.exe v1.14.18When the installer is finished, press Enter.Close the command prompt window and re-open a new command prompt window as a
normal userSearch for "Command Prompt" in the search bar, then left click on the
Command Prompt app icon, no need to run as Administrator)Confirm you have the desired version of solana installed by entering:After a successful install, solana-install update may be used to easily
update the Solana software to a newer version at any time.Download Prebuilt Binaries​If you would rather not use solana-install to manage the install, you can
manually download and install the binaries.Linux​Download the binaries by navigating to
https://github.com/solana-labs/solana/releases/latest,
download solana-release-x86_64-unknown-linux-gnu.tar.bz2, then extract the
archive:tar jxf solana-release-x86_64-unknown-linux-gnu.tar.bz2cd solana-release/export PATH=$PWD/bin:$PATHMacOS​Download the binaries by navigating to
https://github.com/solana-labs/solana/releases/latest,
download solana-release-x86_64-apple-darwin.tar.bz2, then extract the
archive:tar jxf solana-release-x86_64-apple-darwin.tar.bz2cd solana-release/export PATH=$PWD/bin:$PATHWindows​Download the binaries by navigating to
https://github.com/solana-labs/solana/releases/latest,
download solana-release-x86_64-pc-windows-msvc.tar.bz2, then extract the
archive using WinZip or similar.Open a Command Prompt and navigate to the directory into which you extracted
the binaries and run:cd solana-release/set PATH=%cd%/bin;%PATH%Build From Source​If you are unable to use the prebuilt binaries or prefer to build it yourself
from source, navigate to
https://github.com/solana-labs/solana/releases/latest,
and download the Source Code archive. Extract the code and build the
binaries with:./scripts/cargo-install-all.sh .export PATH=$PWD/bin:$PATHYou can then run the following command to obtain the same result as with
prebuilt binaries:Use Homebrew​This option requires you to have Homebrew package manager on your MacOS or Linux machine.MacOS & Linux​Follow instructions at: https://formulae.brew.sh/formula/solanaHomebrew formulae
is updated after each solana release, however it is possible that
the Homebrew version is outdated.Confirm you have the desired version of solana installed by entering:This page decribes how to receive and send SOL tokens using the command line
tools with a command line wallet such as a paper wallet,
a file system wallet, or a
hardware wallet. Before you begin, make sure
you have created a wallet and have access to its address (pubkey) and the
signing keypair. Check out our
conventions for entering keypairs for different wallet types.Testing your Wallet​Before sharing your public key with others, you may want to first ensure the
key is valid and that you indeed hold the corresponding private key.In this example, we will create a second wallet in addition to your first wallet,
and then transfer some tokens to it. This will confirm that you can send and
receive tokens on your wallet type of choice.This test example uses our Developer Testnet, called devnet. Tokens issued
on devnet have no value, so don't worry if you lose them.Airdrop some tokens to get started​First, airdrop yourself some play tokens on the devnet.solana airdrop 1 <RECIPIENT_ACCOUNT_ADDRESS> --url https://api.devnet.solana.comwhere you replace the text <RECIPIENT_ACCOUNT_ADDRESS> with your base58-encoded
public key/wallet address.A response with the signature of the transaction will be returned. If the balance
of the address does not change by the expected amount, run the following command
for more information on what potentially went wrong:solana confirm -v <TRANSACTION_SIGNATURE>Check your balance​Confirm the airdrop was successful by checking the account's balance.
It should output 1 SOL:solana balance <ACCOUNT_ADDRESS> --url https://api.devnet.solana.comCreate a second wallet address​We will need a new address to receive our tokens. Create a second
keypair and record its pubkey:solana-keygen new --no-passphrase --no-outfileThe output will contain the address after the text pubkey:. Copy the
address. We will use it in the next step.pubkey: GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiVYou can also create a second (or more) wallet of any type:
paper,
file system,
or hardware.Transfer tokens from your first wallet to the second address​Next, prove that you own the airdropped tokens by transferring them.
The Solana cluster will only accept the transfer if you sign the transaction
with the private keypair corresponding to the sender's public key in the
transaction.solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR>where you replace <KEYPAIR> with the path to a keypair in your first wallet,
and replace <RECIPIENT_ACCOUNT_ADDRESS> with the address of your second
wallet.Confirm the updated balances with solana balance:solana balance <ACCOUNT_ADDRESS> --url http://api.devnet.solana.comwhere <ACCOUNT_ADDRESS> is either the public key from your keypair or the
recipient's public key.Full example of test transfer​$ solana-keygen new --outfile my_solana_wallet.json   # Creating my first wallet, a file system walletGenerating a new keypairFor added security, enter a passphrase (empty for no passphrase):Wrote new keypair to my_solana_wallet.json==========================================================================pubkey: DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK                          # Here is the address of the first wallet==========================================================================Save this seed phrase to recover your new keypair:width enhance concert vacant ketchup eternal spy craft spy guard tag punch    # If this was a real wallet, never share these words on the internet like this!==========================================================================$ solana airdrop 1 DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK --url https://api.devnet.solana.com  # Airdropping 1 SOL to my wallet's address/pubkeyRequesting airdrop of 1 SOL from 35.233.193.70:99001 SOL$ solana balance DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK --url https://api.devnet.solana.com # Check the address's balance1 SOL$ solana-keygen new --no-outfile  # Creating a second wallet, a paper walletGenerating a new keypairFor added security, enter a passphrase (empty for no passphrase):====================================================================pubkey: 7S3P4HxJpyyigGzodYwHtCxZyUQe9JiBMHyRWXArAaKv                   # Here is the address of the second, paper, wallet.====================================================================Save this seed phrase to recover your new keypair:clump panic cousin hurt coast charge engage fall eager urge win love   # If this was a real wallet, never share these words on the internet like this!====================================================================$ solana transfer --from my_solana_wallet.json 7S3P4HxJpyyigGzodYwHtCxZyUQe9JiBMHyRWXArAaKv 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer my_solana_wallet.json  # Transferring tokens to the public address of the paper wallet3gmXvykAd1nCQQ7MjosaHLf69Xyaqyq1qw2eu1mgPyYXd5G4v1rihhg1CiRw35b9fHzcftGKKEu4mbUeXY2pEX2z  # This is the transaction signature$ solana balance DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK --url https://api.devnet.solana.com0.499995 SOL  # The sending account has slightly less than 0.5 SOL remaining due to the 0.000005 SOL transaction fee payment$ solana balance 7S3P4HxJpyyigGzodYwHtCxZyUQe9JiBMHyRWXArAaKv --url https://api.devnet.solana.com0.5 SOL  # The second wallet has now received the 0.5 SOL transfer from the first walletReceive Tokens​To receive tokens, you will need an address for others to send tokens to. In
Solana, the wallet address is the public key of a keypair. There are a variety
of techniques for generating keypairs. The method you choose will depend on how
you choose to store keypairs. Keypairs are stored in wallets. Before receiving
tokens, you will need to create a wallet.
Once completed, you should have a public key
for each keypair you generated. The public key is a long string of base58
characters. Its length varies from 32 to 44 characters.Send Tokens​If you already hold SOL and want to send tokens to someone, you will need
a path to your keypair, their base58-encoded public key, and a number of
tokens to transfer. Once you have that collected, you can transfer tokens
with the solana transfer command:solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> <AMOUNT> --fee-payer <KEYPAIR>Confirm the updated balances with solana balance:solana balance <ACCOUNT_ADDRESS>The solana-cli crate provides a command-line interface tool for SolanaExamples​Get Pubkey​// Command$ solana-keygen pubkey// Return<PUBKEY>Airdrop SOL/Lamports​// Command$ solana airdrop 1// Return"1 SOL"Get Balance​// Command$ solana balance// Return"3.00050001 SOL"Confirm Transaction​// Command$ solana confirm <TX_SIGNATURE>// Return"Confirmed" / "Not found" / "Transaction failed with error <ERR>"Deploy program​// Command$ solana program deploy <PATH>// Return<PROGRAM_ID>Usage​solana-cli​solana-cli 1.14.18 (src:b00d18ce; feat:1879391783)Blockchain, Rebuilt for ScaleUSAGE:    solana [FLAGS] [OPTIONS] <SUBCOMMAND>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterSUBCOMMANDS:    account                              Show the contents of an account    address                              Get your public key    address-lookup-table                 Address lookup table management    airdrop                              Request SOL from a faucet    authorize-nonce-account              Assign account authority to a new entity    balance                              Get your balance    block                                Get a confirmed block    block-height                         Get current block height    block-production                     Show information about block production    block-time                           Get estimated production time of a block    catchup                              Wait for a validator to catch up to the cluster    close-vote-account                   Close a vote account and withdraw all funds remaining    cluster-date                         Get current cluster date, computed from genesis creation time and network                                         time    cluster-version                      Get the version of the cluster entrypoint    completion                           Generate completion scripts for various shells    config                               Solana command-line tool configuration settings    confirm                              Confirm transaction by signature    create-address-with-seed             Generate a derived account address with a seed    create-nonce-account                 Create a nonce account    create-stake-account                 Create a stake account    create-stake-account-checked         Create a stake account, checking the withdraw authority as a signer    create-vote-account                  Create a vote account    deactivate-stake                     Deactivate the delegated stake from the stake account    decode-transaction                   Decode a serialized transaction    delegate-stake                       Delegate stake to a vote account    epoch                                Get current epoch    epoch-info                           Get information about the current epoch    feature                              Runtime feature management    fees                                 Display current cluster fees (Deprecated in v1.8.0)    first-available-block                Get the first available block in the storage    genesis-hash                         Get the genesis hash    gossip                               Show the current gossip network nodes    help                                 Prints this message or the help of the given subcommand(s)    inflation                            Show inflation information    largest-accounts                     Get addresses of largest cluster accounts    leader-schedule                      Display leader schedule    live-slots                           Show information about the current slot progression    logs                                 Stream transaction logs    merge-stake                          Merges one stake account into another    new-nonce                            Generate a new nonce, rendering the existing nonce useless    nonce                                Get the current nonce value    nonce-account                        Show the contents of a nonce account    ping                                 Submit transactions sequentially    program                              Program management    redelegate-stake                     Redelegate active stake to another vote account    rent                                 Calculate per-epoch and rent-exempt-minimum values for a given account data                                         field length.    resolve-signer                       Checks that a signer is valid, and returns its specific path; useful for                                         signers that may be specified generally, eg. usb://ledger    slot                                 Get current slot    split-stake                          Duplicate a stake account, splitting the tokens between the two    stake-account                        Show the contents of a stake account    stake-authorize                      Authorize a new signing keypair for the given stake account    stake-authorize-checked              Authorize a new signing keypair for the given stake account, checking the                                         authority as a signer    stake-history                        Show the stake history    stake-minimum-delegation             Get the stake minimum delegation amount    stake-set-lockup                     Set Lockup for the stake account    stake-set-lockup-checked             Set Lockup for the stake account, checking the new authority as a signer    stakes                               Show stake account information    supply                               Get information about the cluster supply of SOL    transaction-count                    Get current transaction count    transaction-history                  Show historical transactions affecting the given address from newest to                                         oldest    transfer                             Transfer funds between system accounts    upgrade-nonce-account                One-time idempotent upgrade of legacy nonce versions in order to bump them                                         out of chain blockhash domain.    validator-info                       Publish/get Validator info on Solana    validators                           Show summary information about the current validators    vote-account                         Show the contents of a vote account    vote-authorize-voter                 Authorize a new vote signing keypair for the given vote account    vote-authorize-voter-checked         Authorize a new vote signing keypair for the given vote account, checking                                         the new authority as a signer    vote-authorize-withdrawer            Authorize a new withdraw signing keypair for the given vote account    vote-authorize-withdrawer-checked    Authorize a new withdraw signing keypair for the given vote account,                                         checking the new authority as a signer    vote-update-commission               Update the vote account's commission    vote-update-validator                Update the vote account's validator identity    wait-for-max-stake                   Wait for the max stake of any one node to drop below a percentage of total.    withdraw-from-nonce-account          Withdraw SOL from the nonce account    withdraw-from-vote-account           Withdraw lamports from a vote account into a specified account    withdraw-stake                       Withdraw the unstaked SOL from the stake accountsolana-account​solana-accountShow the contents of an accountUSAGE:    solana account [FLAGS] [OPTIONS] <ACCOUNT_ADDRESS>FLAGS:    -h, --help                           Prints help information        --lamports                       Display balance in lamports instead of SOL        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair    -o, --output-file <FILEPATH>           Write the account data to this file        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <ACCOUNT_ADDRESS>    Account key URI. , one of:                           * a base58-encoded public key                           * a path to a keypair file                           * a hyphen; signals a JSON-encoded keypair on stdin                           * the 'ASK' keyword; to recover a keypair via its seed phrase                           * a hardware wallet keypair URL (i.e. usb://ledger)solana-address​solana-addressGet your public keyUSAGE:    solana address [FLAGS] [OPTIONS]FLAGS:        --confirm-key                    Confirm key on device; only relevant if using remote wallet    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-address-lookup-table​solana-address-lookup-tableAddress lookup table managementUSAGE:    solana address-lookup-table [FLAGS] [OPTIONS] <SUBCOMMAND>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterSUBCOMMANDS:    close         Permanently closes a lookup table    create        Create a lookup table    deactivate    Permanently deactivates a lookup table    extend        Append more addresses to a lookup table    freeze        Permanently freezes a lookup table    get           Display information about a lookup table    help          Prints this message or the help of the given subcommand(s)solana-airdrop​solana-airdropRequest SOL from a faucetUSAGE:    solana airdrop [FLAGS] [OPTIONS] <AMOUNT> [RECIPIENT_ADDRESS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <AMOUNT>               The airdrop amount to request, in SOL    <RECIPIENT_ADDRESS>    The account address of airdrop recipient. , one of:                             * a base58-encoded public key                             * a path to a keypair file                             * a hyphen; signals a JSON-encoded keypair on stdin                             * the 'ASK' keyword; to recover a keypair via its seed phrase                             * a hardware wallet keypair URL (i.e. usb://ledger)solana-authorize-nonce-accountAssign account authority to a new entityUSAGE:    solana authorize-nonce-account [FLAGS] [OPTIONS] <NONCE_ACCOUNT_ADDRESS> <AUTHORITY_PUBKEY>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <NONCE_ACCOUNT_ADDRESS>    Address of the nonce account. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)    <AUTHORITY_PUBKEY>         Account to be granted authority of the nonce account. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-balance​solana-balanceGet your balanceUSAGE:    solana balance [FLAGS] [OPTIONS] [ACCOUNT_ADDRESS]FLAGS:    -h, --help                           Prints help information        --lamports                       Display balance in lamports instead of SOL        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <ACCOUNT_ADDRESS>    The account address of the balance to check. , one of:                           * a base58-encoded public key                           * a path to a keypair file                           * a hyphen; signals a JSON-encoded keypair on stdin                           * the 'ASK' keyword; to recover a keypair via its seed phrase                           * a hardware wallet keypair URL (i.e. usb://ledger)solana-block​solana-blockGet a confirmed blockUSAGE:    solana block [FLAGS] [OPTIONS] [SLOT]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <SLOT>solana-block-height​solana-block-heightGet current block heightUSAGE:    solana block-height [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-block-production​solana-block-productionShow information about block productionUSAGE:    solana block-production [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]        --epoch <epoch>                    Epoch to show block production for [default: current epoch]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --slot-limit <slot_limit>          Limit results to this many slots from the end of the epoch [default: full                                           epoch]        --ws <URL>                         WebSocket URL for the solana clustersolana-block-time​solana-block-timeGet estimated production time of a blockUSAGE:    solana block-time [FLAGS] [OPTIONS] [SLOT]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <SLOT>    Slot number of the block to querysolana-catchup​solana-catchupWait for a validator to catch up to the clusterUSAGE:    solana catchup [FLAGS] [OPTIONS] [ARGS]FLAGS:        --follow                         Continue reporting progress even after the validator has caught up    -h, --help                           Prints help information        --log                            Don't update the progress inplace; instead show updates with its own new lines        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --our-localhost <PORT>             Guess Identity pubkey and validator rpc node assuming local (possibly                                           private) validator [default: 8899]        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <OUR_VALIDATOR_PUBKEY>    Identity pubkey of the validator, one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)    <OUR_URL>                 JSON RPC URL for validator, which is useful for validators with a private RPC servicesolana-close-vote-account​solana-close-vote-accountClose a vote account and withdraw all funds remainingUSAGE:    solana close-vote-account [FLAGS] [OPTIONS] <VOTE_ACCOUNT_ADDRESS> <RECIPIENT_ADDRESS>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --authorized-withdrawer <AUTHORIZED_KEYPAIR>      Authorized withdrawer [default: cli config keypair]        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <VOTE_ACCOUNT_ADDRESS>    Vote account to be closed. , one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)    <RECIPIENT_ADDRESS>       The recipient of all withdrawn SOL. , one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)solana-cluster-date​solana-cluster-dateGet current cluster date, computed from genesis creation time and network timeUSAGE:    solana cluster-date [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-cluster-version​solana-cluster-versionGet the version of the cluster entrypointUSAGE:    solana cluster-version [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-completion​solana-completionGenerate completion scripts for various shellsUSAGE:    solana completion [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]    -s, --shell <shell>                     [default: bash]  [possible values: bash, fish, zsh, powershell, elvish]        --ws <URL>                         WebSocket URL for the solana clustersolana-config​solana-configSolana command-line tool configuration settingsUSAGE:    solana config [FLAGS] [OPTIONS] <SUBCOMMAND>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterSUBCOMMANDS:    export-address-labels    Export the current address labels    get                      Get current config settings    help                     Prints this message or the help of the given subcommand(s)    import-address-labels    Import a list of address labels    set                      Set a config settingsolana-confirm​solana-confirmConfirm transaction by signatureUSAGE:    solana confirm [FLAGS] [OPTIONS] <TRANSACTION_SIGNATURE>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <TRANSACTION_SIGNATURE>    The transaction signature to confirmNote: This will show more detailed information for finalized transactions with verbose mode (-v/--verbose).Account modes:  |srwx|    s: signed    r: readable (always true)    w: writable    x: program account (inner instructions excluded)solana-create-address-with-seed​solana-create-address-with-seedGenerate a derived account address with a seedUSAGE:    solana create-address-with-seed [FLAGS] [OPTIONS] <SEED_STRING> <PROGRAM_ID>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]        --from <FROM_PUBKEY>               From (base) key, [default: cli config keypair]. , one of:                                             * a base58-encoded public key                                             * a path to a keypair file                                             * a hyphen; signals a JSON-encoded keypair on stdin                                             * the 'ASK' keyword; to recover a keypair via its seed phrase                                             * a hardware wallet keypair URL (i.e. usb://ledger)    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <SEED_STRING>    The seed.  Must not take more than 32 bytes to encode as utf-8    <PROGRAM_ID>     The program_id that the address will ultimately be used for,                     or one of NONCE, STAKE, and VOTE keywordssolana-create-nonce-account​solana-create-nonce-accountCreate a nonce accountUSAGE:    solana create-nonce-account [FLAGS] [OPTIONS] <ACCOUNT_KEYPAIR> <AMOUNT>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce-authority <PUBKEY>            Assign noncing authority to another entity. , one of:              * a base58-encoded public key              * a path to a keypair file              * a hyphen; signals a JSON-encoded keypair on stdin              * the 'ASK' keyword; to recover a keypair via its seed phrase              * a hardware wallet keypair URL (i.e. usb://ledger)        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --seed <STRING>            Seed for address generation; if specified, the resulting account will be at a derived address of the            NONCE_ACCOUNT pubkey        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <ACCOUNT_KEYPAIR>    Keypair of the nonce account to fund    <AMOUNT>             The amount to load the nonce account with, in SOL; accepts keyword ALLsolana-create-stake-account​solana-create-stake-accountCreate a stake accountUSAGE:    solana create-stake-account [FLAGS] [OPTIONS] <STAKE_ACCOUNT_KEYPAIR> <AMOUNT>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --custodian <PUBKEY>            Authority to modify lockups. , one of:              * a base58-encoded public key              * a path to a keypair file              * a hyphen; signals a JSON-encoded keypair on stdin              * the 'ASK' keyword; to recover a keypair via its seed phrase              * a hardware wallet keypair URL (i.e. usb://ledger)        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.        --from <KEYPAIR>                                  Source account of funds [default: cli config keypair]    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --lockup-date <RFC3339 DATETIME>            The date and time at which this account will be available for withdrawal        --lockup-epoch <NUMBER>            The epoch height at which this account will be available for withdrawal        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --seed <STRING>            Seed for address generation; if specified, the resulting account will be at a derived address of the            STAKE_ACCOUNT_KEYPAIR pubkey        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --stake-authority <PUBKEY>                        Authorized staker [default: cli config keypair]        --ws <URL>                                        WebSocket URL for the solana cluster        --withdraw-authority <PUBKEY>                     Authorized withdrawer [default: cli config keypair]ARGS:    <STAKE_ACCOUNT_KEYPAIR>    Stake account to create (or base of derived address if --seed is used)    <AMOUNT>                   The amount to send to the stake account, in SOL; accepts keyword ALLsolana-create-stake-account-checked​solana-create-stake-account-checkedCreate a stake account, checking the withdraw authority as a signerUSAGE:    solana create-stake-account-checked [FLAGS] [OPTIONS] <STAKE_ACCOUNT_KEYPAIR> <AMOUNT>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.        --from <KEYPAIR>                                  Source account of funds [default: cli config keypair]    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --seed <STRING>            Seed for address generation; if specified, the resulting account will be at a derived address of the            STAKE_ACCOUNT_KEYPAIR pubkey        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --stake-authority <PUBKEY>                        Authorized staker [default: cli config keypair]        --ws <URL>                                        WebSocket URL for the solana cluster        --withdraw-authority <KEYPAIR>                    Authorized withdrawer [default: cli config keypair]ARGS:    <STAKE_ACCOUNT_KEYPAIR>    Stake account to create (or base of derived address if --seed is used)    <AMOUNT>                   The amount to send to the stake account, in SOL; accepts keyword ALLsolana-create-vote-account​solana-create-vote-accountCreate a vote accountUSAGE:    solana create-vote-account [FLAGS] [OPTIONS] <ACCOUNT_KEYPAIR> <IDENTITY_KEYPAIR> <WITHDRAWER_PUBKEY>FLAGS:        --allow-unsafe-authorized-withdrawer    Allow an authorized withdrawer pubkey to be identical to the validator                                                identity account pubkey or vote account pubkey, which is normally an                                                unsafe configuration and should be avoided.        --dump-transaction-message              Display the base64 encoded binary transaction message in sign-only mode    -h, --help                                  Prints help information        --no-address-labels                     Do not use address labels in the output        --sign-only                             Sign the transaction offline        --skip-seed-phrase-validation           Skip validation of seed phrases. Use this if your phrase does not use                                                the BIP39 official English word list    -V, --version                               Prints version information    -v, --verbose                               Show additional informationOPTIONS:        --authorized-voter <VOTER_PUBKEY>            Public key of the authorized voter [default: validator identity pubkey]. , one of:              * a base58-encoded public key              * a path to a keypair file              * a hyphen; signals a JSON-encoded keypair on stdin              * the 'ASK' keyword; to recover a keypair via its seed phrase              * a hardware wallet keypair URL (i.e. usb://ledger)        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commission <PERCENTAGE>            The commission taken on reward redemption (0-100) [default: 100]        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --seed <STRING>            Seed for address generation; if specified, the resulting account will be at a derived address of the VOTE            ACCOUNT pubkey        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <ACCOUNT_KEYPAIR>      Vote account keypair to create    <IDENTITY_KEYPAIR>     Keypair of validator that will vote with this account    <WITHDRAWER_PUBKEY>    Public key of the authorized withdrawer, one of:                             * a base58-encoded public key                             * a path to a keypair file                             * a hyphen; signals a JSON-encoded keypair on stdin                             * the 'ASK' keyword; to recover a keypair via its seed phrase                             * a hardware wallet keypair URL (i.e. usb://ledger)solana-deactivate-stake​solana-deactivate-stakeDeactivate the delegated stake from the stake accountUSAGE:    solana deactivate-stake [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS>FLAGS:        --delinquent                     Deactivate abandoned stake that is currently delegated to a delinquent vote                                         account        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --seed <STRING>            Seed for address generation; if specified, the resulting account will be at a derived address of            STAKE_ACCOUNT_ADDRESS        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --stake-authority <KEYPAIR>                       Authorized staker [default: cli config keypair]        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <STAKE_ACCOUNT_ADDRESS>    Stake account to be deactivated (or base of derived address if --seed is used). , one                               of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-decode-transaction​solana-decode-transactionDecode a serialized transactionUSAGE:    solana decode-transaction [FLAGS] [OPTIONS] <TRANSACTION> <ENCODING>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <TRANSACTION>    transaction to decode    <ENCODING>       transaction encoding [default: base58]  [possible values: base58, base64]solana-delegate-stake​solana-delegate-stakeDelegate stake to a vote accountUSAGE:    solana delegate-stake [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS> <VOTE_ACCOUNT_ADDRESS>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --stake-authority <KEYPAIR>                       Authorized staker [default: cli config keypair]        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <STAKE_ACCOUNT_ADDRESS>    Stake account to delegate, one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)    <VOTE_ACCOUNT_ADDRESS>     The vote account to which the stake will be delegated, one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-epoch​solana-epochGet current epochUSAGE:    solana epoch [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-epoch-info​solana-epoch-infoGet information about the current epochUSAGE:    solana epoch-info [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-feature​solana-featureRuntime feature managementUSAGE:    solana feature [FLAGS] [OPTIONS] <SUBCOMMAND>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterSUBCOMMANDS:    activate    Activate a runtime feature    help        Prints this message or the help of the given subcommand(s)    status      Query runtime feature statussolana-fees​solana-feesDisplay current cluster fees (Deprecated in v1.8.0)USAGE:    solana fees [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>            Query fees for BLOCKHASH instead of the the most recent blockhash        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-first-available-block​solana-first-available-blockGet the first available block in the storageUSAGE:    solana first-available-block [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-genesis-hash​solana-genesis-hashGet the genesis hashUSAGE:    solana genesis-hash [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-gossip​solana-gossipShow the current gossip network nodesUSAGE:    solana gossip [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-help​solana-helpPrints this message or the help of the given subcommand(s)USAGE:    solana help [subcommand]...ARGS:    <subcommand>...    The subcommand whose help message to displaysolana-inflation​solana-inflationShow inflation informationUSAGE:    solana inflation [FLAGS] [OPTIONS] [SUBCOMMAND]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterSUBCOMMANDS:    help       Prints this message or the help of the given subcommand(s)    rewards    Show inflation rewards for a set of addressessolana-largest-accounts​solana-largest-accountsGet addresses of largest cluster accountsUSAGE:    solana largest-accounts [FLAGS] [OPTIONS]FLAGS:        --circulating                    Filter address list to only circulating accounts    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --non-circulating                Filter address list to only non-circulating accounts        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-leader-schedule​solana-leader-scheduleDisplay leader scheduleUSAGE:    solana leader-schedule [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]        --epoch <EPOCH>                    Epoch to show leader schedule for. [default: current]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-live-slots​solana-live-slotsShow information about the current slot progressionUSAGE:    solana live-slots [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-logs​solana-logsStream transaction logsUSAGE:    solana logs [FLAGS] [OPTIONS] [ADDRESS]FLAGS:    -h, --help                           Prints help information        --include-votes                  Include vote transactions when monitoring all transactions        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <ADDRESS>    Account address to monitor [default: monitor all transactions except for votes] , one of:                   * a base58-encoded public key                   * a path to a keypair file                   * a hyphen; signals a JSON-encoded keypair on stdin                   * the 'ASK' keyword; to recover a keypair via its seed phrase                   * a hardware wallet keypair URL (i.e. usb://ledger)solana-merge-stake​solana-merge-stakeMerges one stake account into anotherUSAGE:    solana merge-stake [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS> <SOURCE_STAKE_ACCOUNT_ADDRESS>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --stake-authority <KEYPAIR>                       Authorized staker [default: cli config keypair]        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <STAKE_ACCOUNT_ADDRESS>           Stake account to merge into, one of:                                        * a base58-encoded public key                                        * a path to a keypair file                                        * a hyphen; signals a JSON-encoded keypair on stdin                                        * the 'ASK' keyword; to recover a keypair via its seed phrase                                        * a hardware wallet keypair URL (i.e. usb://ledger)    <SOURCE_STAKE_ACCOUNT_ADDRESS>    Source stake account for the merge.  If successful, this stake account will no                                      longer exist after the merge, one of:                                        * a base58-encoded public key                                        * a path to a keypair file                                        * a hyphen; signals a JSON-encoded keypair on stdin                                        * the 'ASK' keyword; to recover a keypair via its seed phrase                                        * a hardware wallet keypair URL (i.e. usb://ledger)solana-new-nonce​solana-new-nonceGenerate a new nonce, rendering the existing nonce uselessUSAGE:    solana new-nonce [FLAGS] [OPTIONS] <NONCE_ACCOUNT_ADDRESS>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <NONCE_ACCOUNT_ADDRESS>    Address of the nonce account. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-nonce​solana-nonceGet the current nonce valueUSAGE:    solana nonce [FLAGS] [OPTIONS] <NONCE_ACCOUNT_ADDRESS>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <NONCE_ACCOUNT_ADDRESS>    Address of the nonce account to display. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-nonce-account​solana-nonce-accountShow the contents of a nonce accountUSAGE:    solana nonce-account [FLAGS] [OPTIONS] <NONCE_ACCOUNT_ADDRESS>FLAGS:    -h, --help                           Prints help information        --lamports                       Display balance in lamports instead of SOL        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <NONCE_ACCOUNT_ADDRESS>    Address of the nonce account to display. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-ping​solana-pingSubmit transactions sequentiallyUSAGE:    solana ping [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output    -D, --print-timestamp                Print timestamp (unix time + microseconds as in gettimeofday) before each line        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]    -c, --count <NUMBER>                                  Stop after submitting count transactions    -i, --interval <SECONDS>            Wait interval seconds between submitting the next transaction [default: 2]    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]    -t, --timeout <SECONDS>            Wait up to timeout seconds for transaction confirmation [default: 15]        --ws <URL>                                        WebSocket URL for the solana clustersolana-program​solana-programProgram managementUSAGE:    solana program [FLAGS] [OPTIONS] <SUBCOMMAND>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterSUBCOMMANDS:    close                    Close a program or buffer account and withdraw all lamports    deploy                   Deploy an upgradeable program    dump                     Write the program data to a file    help                     Prints this message or the help of the given subcommand(s)    set-buffer-authority     Set a new buffer authority    set-upgrade-authority    Set a new program authority    show                     Display information about a buffer or program    write-buffer             Writes a program into a buffer accountsolana-redelegate-stake​solana-redelegate-stakeRedelegate active stake to another vote accountUSAGE:    solana redelegate-stake [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS> <REDELEGATED_VOTE_ACCOUNT_ADDRESS> <REDELEGATION_STAKE_ACCOUNT>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>            Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>              Specify the fee-payer account. This may be a keypair file, the ASK keyword                                           or the pubkey of an offline signer, provided an appropriate --signer argument                                           is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --with-memo <MEMO>                 Specify a memo string to include in the transaction.        --nonce <PUBKEY>                   Provide the nonce account to use when creating a nonced                                           transaction. Nonced transactions are useful when a transaction                                           requires a lengthy signing process. Learn more about nonced                                           transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>        Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --signer <PUBKEY=SIGNATURE>...     Provide a public-key/signature pair for the transaction        --stake-authority <KEYPAIR>        Authorized staker [default: cli config keypair]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <STAKE_ACCOUNT_ADDRESS>               Existing delegated stake account that has been fully activated. On success                                          this stake account will be scheduled for deactivation and the rent-exempt                                          balance may be withdrawn once fully deactivated, one of:                                            * a base58-encoded public key                                            * a path to a keypair file                                            * a hyphen; signals a JSON-encoded keypair on stdin                                            * the 'ASK' keyword; to recover a keypair via its seed phrase                                            * a hardware wallet keypair URL (i.e. usb://ledger)    <REDELEGATED_VOTE_ACCOUNT_ADDRESS>    The vote account to which the stake will be redelegated, one of:                                            * a base58-encoded public key                                            * a path to a keypair file                                            * a hyphen; signals a JSON-encoded keypair on stdin                                            * the 'ASK' keyword; to recover a keypair via its seed phrase                                            * a hardware wallet keypair URL (i.e. usb://ledger)    <REDELEGATION_STAKE_ACCOUNT>          Stake account to create for the redelegation. On success this stake                                          account will be created and scheduled for activation with all the stake in                                          the existing stake account, exclusive of the rent-exempt balance retained                                          in the existing accountsolana-rent​solana-rentCalculate per-epoch and rent-exempt-minimum values for a given account data field length.USAGE:    solana rent [FLAGS] [OPTIONS] <DATA_LENGTH_OR_MONIKER>FLAGS:    -h, --help                           Prints help information        --lamports                       Display rent in lamports instead of SOL        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <DATA_LENGTH_OR_MONIKER>    Length of data field in the account to calculate rent for, or moniker: [nonce,                                stake, system, vote]solana-resolve-signer​solana-resolve-signerChecks that a signer is valid, and returns its specific path; useful for signers that may be specified generally, eg.usb://ledgerUSAGE:    solana resolve-signer [FLAGS] [OPTIONS] <SIGNER_KEYPAIR>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <SIGNER_KEYPAIR>    The signer path to resolvesolana-slot​solana-slotGet current slotUSAGE:    solana slot [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-split-stake​solana-split-stakeDuplicate a stake account, splitting the tokens between the twoUSAGE:    solana split-stake [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS> <SPLIT_STAKE_ACCOUNT> <AMOUNT>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --seed <STRING>            Seed for address generation; if specified, the resulting account will be at a derived address of            SPLIT_STAKE_ACCOUNT        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --stake-authority <KEYPAIR>                       Authorized staker [default: cli config keypair]        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <STAKE_ACCOUNT_ADDRESS>    Stake account to split (or base of derived address if --seed is used). , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)    <SPLIT_STAKE_ACCOUNT>      Keypair of the new stake account    <AMOUNT>                   The amount to move into the new stake account, in SOLsolana-stake-account​solana-stake-accountShow the contents of a stake accountUSAGE:    solana stake-account [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS>FLAGS:    -h, --help                           Prints help information        --lamports                       Display balance in lamports instead of SOL        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional information        --with-rewards                   Display inflation rewardsOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --num-rewards-epochs <NUM>         Display rewards for NUM recent epochs, max 10 [default: latest epoch only]        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <STAKE_ACCOUNT_ADDRESS>    The stake account to display. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-stake-authorize​solana-stake-authorizeAuthorize a new signing keypair for the given stake accountUSAGE:    solana stake-authorize [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS> --new-stake-authority <PUBKEY> --new-withdraw-authority <PUBKEY>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --no-wait                        Return signature immediately after submitting the transaction, instead of                                         waiting for confirmations        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --custodian <KEYPAIR>                             Authority to override account lockup        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --new-stake-authority <PUBKEY>            New authorized staker, one of:              * a base58-encoded public key              * a path to a keypair file              * a hyphen; signals a JSON-encoded keypair on stdin              * the 'ASK' keyword; to recover a keypair via its seed phrase              * a hardware wallet keypair URL (i.e. usb://ledger)        --new-withdraw-authority <PUBKEY>            New authorized withdrawer. , one of:              * a base58-encoded public key              * a path to a keypair file              * a hyphen; signals a JSON-encoded keypair on stdin              * the 'ASK' keyword; to recover a keypair via its seed phrase              * a hardware wallet keypair URL (i.e. usb://ledger)        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --stake-authority <KEYPAIR>                       Authorized staker [default: cli config keypair]        --ws <URL>                                        WebSocket URL for the solana cluster        --withdraw-authority <KEYPAIR>                    Authorized withdrawer [default: cli config keypair]ARGS:    <STAKE_ACCOUNT_ADDRESS>    Stake account in which to set a new authority. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-stake-authorize-checked​solana-stake-authorize-checkedAuthorize a new signing keypair for the given stake account, checking the authority as a signerUSAGE:    solana stake-authorize-checked [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS> --new-stake-authority <KEYPAIR> --new-withdraw-authority <KEYPAIR>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --no-wait                        Return signature immediately after submitting the transaction, instead of                                         waiting for confirmations        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --custodian <KEYPAIR>                             Authority to override account lockup        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --new-stake-authority <KEYPAIR>                   New authorized staker        --new-withdraw-authority <KEYPAIR>                New authorized withdrawer        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --stake-authority <KEYPAIR>                       Authorized staker [default: cli config keypair]        --ws <URL>                                        WebSocket URL for the solana cluster        --withdraw-authority <KEYPAIR>                    Authorized withdrawer [default: cli config keypair]ARGS:    <STAKE_ACCOUNT_ADDRESS>    Stake account in which to set a new authority. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-stake-history​solana-stake-historyShow the stake historyUSAGE:    solana stake-history [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --lamports                       Display balance in lamports instead of SOL        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --limit <NUM>                      Display NUM recent epochs worth of stake history in text mode. 0 for all                                           [default: 10]        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-stake-minimum-delegation​solana-stake-minimum-delegationGet the stake minimum delegation amountUSAGE:    solana stake-minimum-delegation [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --lamports                       Display minimum delegation in lamports instead of SOL        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-stake-set-lockup​solana-stake-set-lockupSet Lockup for the stake accountUSAGE:    solana stake-set-lockup [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS> <--lockup-epoch <NUMBER>|--lockup-date <RFC3339 DATETIME>|--new-custodian <PUBKEY>>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --custodian <KEYPAIR>                             Keypair of the existing custodian [default: cli config pubkey]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --lockup-date <RFC3339 DATETIME>            The date and time at which this account will be available for withdrawal        --lockup-epoch <NUMBER>            The epoch height at which this account will be available for withdrawal        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --new-custodian <PUBKEY>            Identity of a new lockup custodian. , one of:              * a base58-encoded public key              * a path to a keypair file              * a hyphen; signals a JSON-encoded keypair on stdin              * the 'ASK' keyword; to recover a keypair via its seed phrase              * a hardware wallet keypair URL (i.e. usb://ledger)        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <STAKE_ACCOUNT_ADDRESS>    Stake account for which to set lockup parameters. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-stake-set-lockup-checked​solana-stake-set-lockup-checkedSet Lockup for the stake account, checking the new authority as a signerUSAGE:    solana stake-set-lockup-checked [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS> <--lockup-epoch <NUMBER>|--lockup-date <RFC3339 DATETIME>|--new-custodian <KEYPAIR>>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --custodian <KEYPAIR>                             Keypair of the existing custodian [default: cli config pubkey]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --lockup-date <RFC3339 DATETIME>            The date and time at which this account will be available for withdrawal        --lockup-epoch <NUMBER>            The epoch height at which this account will be available for withdrawal        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --new-custodian <KEYPAIR>                         Keypair of a new lockup custodian        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <STAKE_ACCOUNT_ADDRESS>    Stake account for which to set lockup parameters. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-stakes​solana-stakesShow stake account informationUSAGE:    solana stakes [FLAGS] [OPTIONS] [VOTE_ACCOUNT_PUBKEYS]...FLAGS:    -h, --help                           Prints help information        --lamports                       Display balance in lamports instead of SOL        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana cluster        --withdraw-authority <PUBKEY>      Only show stake accounts with the provided withdraw authority. , one of:                                             * a base58-encoded public key                                             * a path to a keypair file                                             * a hyphen; signals a JSON-encoded keypair on stdin                                             * the 'ASK' keyword; to recover a keypair via its seed phrase                                             * a hardware wallet keypair URL (i.e. usb://ledger)ARGS:    <VOTE_ACCOUNT_PUBKEYS>...    Only show stake accounts delegated to the provided vote accounts. , one of:                                   * a base58-encoded public key                                   * a path to a keypair file                                   * a hyphen; signals a JSON-encoded keypair on stdin                                   * the 'ASK' keyword; to recover a keypair via its seed phrase                                   * a hardware wallet keypair URL (i.e. usb://ledger)solana-supply​solana-supplyGet information about the cluster supply of SOLUSAGE:    solana supply [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --print-accounts                 Print list of non-circualting account addresses        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-transaction-count​solana-transaction-countGet current transaction countUSAGE:    solana transaction-count [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clustersolana-transaction-history​solana-transaction-historyShow historical transactions affecting the given address from newest to oldestUSAGE:    solana transaction-history [FLAGS] [OPTIONS] <ADDRESS>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --show-transactions              Display the full transactions        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --before <TRANSACTION_SIGNATURE>    Start with the first signature older than this one        --commitment <COMMITMENT_LEVEL>     Return information at the selected commitment level [possible values:                                            processed, confirmed, finalized]    -C, --config <FILEPATH>                 Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>              URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                            testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                 Filepath or URL to a keypair        --limit <LIMIT>                     Maximum number of transaction signatures to return [default: 1000]        --output <FORMAT>                   Return information in specified output format [possible values: json, json-                                            compact]        --ws <URL>                          WebSocket URL for the solana clusterARGS:    <ADDRESS>    Account address, one of:                   * a base58-encoded public key                   * a path to a keypair file                   * a hyphen; signals a JSON-encoded keypair on stdin                   * the 'ASK' keyword; to recover a keypair via its seed phrase                   * a hardware wallet keypair URL (i.e. usb://ledger)solana-transfer​solana-transferTransfer funds between system accountsUSAGE:    solana transfer [FLAGS] [OPTIONS] <RECIPIENT_ADDRESS> <AMOUNT>FLAGS:        --allow-unfunded-recipient       Complete the transfer even if the recipient address is not funded        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --no-wait                        Return signature immediately after submitting the transaction, instead of                                         waiting for confirmations        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.        --from <FROM_ADDRESS>            Source account of funds (if different from client local account). , one of:              * a base58-encoded public key              * a path to a keypair file              * a hyphen; signals a JSON-encoded keypair on stdin              * the 'ASK' keyword; to recover a keypair via its seed phrase              * a hardware wallet keypair URL (i.e. usb://ledger)    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <RECIPIENT_ADDRESS>    The account address of recipient. , one of:                             * a base58-encoded public key                             * a path to a keypair file                             * a hyphen; signals a JSON-encoded keypair on stdin                             * the 'ASK' keyword; to recover a keypair via its seed phrase                             * a hardware wallet keypair URL (i.e. usb://ledger)    <AMOUNT>               The amount to send, in SOL; accepts keyword ALLsolana-upgrade-nonce-account​solana-upgrade-nonce-accountOne-time idempotent upgrade of legacy nonce versions in order to bump them out of chain blockhash domain.USAGE:    solana upgrade-nonce-account [FLAGS] [OPTIONS] <NONCE_ACCOUNT_ADDRESS>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <NONCE_ACCOUNT_ADDRESS>    Nonce account to upgrade. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-validator-info​solana-validator-infoPublish/get Validator info on SolanaUSAGE:    solana validator-info [FLAGS] [OPTIONS] <SUBCOMMAND>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterSUBCOMMANDS:    get        Get and parse Solana Validator info    help       Prints this message or the help of the given subcommand(s)    publish    Publish Validator info on Solanasolana-validators​solana-validatorsShow summary information about the current validatorsUSAGE:    solana validators [FLAGS] [OPTIONS]FLAGS:    -h, --help                           Prints help information        --keep-unstaked-delinquents      Don't discard unstaked, delinquent validators        --lamports                       Display balance in lamports instead of SOL        --no-address-labels              Do not use address labels in the output    -n, --number                         Number the validators    -r, --reverse                        Reverse order while sorting        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --delinquent-slot-distance <SLOT_DISTANCE>            Minimum slot distance from the tip to consider a validator delinquent. [default: 128]    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                           Filepath or URL to a keypair        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --sort <sort>            Sort order (does not affect JSON output) [default: stake]  [possible values: delinquent, commission,            credits, identity, last-vote, root, skip-rate, stake, version, vote-account]        --ws <URL>                                    WebSocket URL for the solana clustersolana-vote-account​solana-vote-accountShow the contents of a vote accountUSAGE:    solana vote-account [FLAGS] [OPTIONS] <VOTE_ACCOUNT_ADDRESS>FLAGS:    -h, --help                           Prints help information        --lamports                       Display balance in lamports instead of SOL        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional information        --with-rewards                   Display inflation rewardsOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --num-rewards-epochs <NUM>         Display rewards for NUM recent epochs, max 10 [default: latest epoch only]        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <VOTE_ACCOUNT_ADDRESS>    Vote account pubkey. , one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)solana-vote-authorize-voter​solana-vote-authorize-voterAuthorize a new vote signing keypair for the given vote accountUSAGE:    solana vote-authorize-voter [FLAGS] [OPTIONS] <VOTE_ACCOUNT_ADDRESS> <AUTHORIZED_KEYPAIR> <NEW_AUTHORIZED_PUBKEY>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <VOTE_ACCOUNT_ADDRESS>     Vote account in which to set the authorized voter. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)    <AUTHORIZED_KEYPAIR>       Current authorized vote signer.    <NEW_AUTHORIZED_PUBKEY>    New authorized vote signer. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)solana-vote-authorize-voter-checked​solana-vote-authorize-voter-checkedAuthorize a new vote signing keypair for the given vote account, checking the new authority as a signerUSAGE:    solana vote-authorize-voter-checked [FLAGS] [OPTIONS] <VOTE_ACCOUNT_ADDRESS> <AUTHORIZED_KEYPAIR> <NEW_AUTHORIZED_KEYPAIR>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <VOTE_ACCOUNT_ADDRESS>      Vote account in which to set the authorized voter. , one of:                                  * a base58-encoded public key                                  * a path to a keypair file                                  * a hyphen; signals a JSON-encoded keypair on stdin                                  * the 'ASK' keyword; to recover a keypair via its seed phrase                                  * a hardware wallet keypair URL (i.e. usb://ledger)    <AUTHORIZED_KEYPAIR>        Current authorized vote signer.    <NEW_AUTHORIZED_KEYPAIR>    New authorized vote signer.solana-vote-authorize-withdrawer​solana-vote-authorize-withdrawerAuthorize a new withdraw signing keypair for the given vote accountUSAGE:    solana vote-authorize-withdrawer [FLAGS] [OPTIONS] <VOTE_ACCOUNT_ADDRESS> <AUTHORIZED_KEYPAIR> <AUTHORIZED_PUBKEY>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <VOTE_ACCOUNT_ADDRESS>    Vote account in which to set the authorized withdrawer. , one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)    <AUTHORIZED_KEYPAIR>      Current authorized withdrawer.    <AUTHORIZED_PUBKEY>       New authorized withdrawer. , one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)solana-vote-authorize-withdrawer-checked​solana-vote-authorize-withdrawer-checkedAuthorize a new withdraw signing keypair for the given vote account, checking the new authority as a signerUSAGE:    solana vote-authorize-withdrawer-checked [FLAGS] [OPTIONS] <VOTE_ACCOUNT_ADDRESS> <AUTHORIZED_KEYPAIR> <NEW_AUTHORIZED_KEYPAIR>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <VOTE_ACCOUNT_ADDRESS>      Vote account in which to set the authorized withdrawer. , one of:                                  * a base58-encoded public key                                  * a path to a keypair file                                  * a hyphen; signals a JSON-encoded keypair on stdin                                  * the 'ASK' keyword; to recover a keypair via its seed phrase                                  * a hardware wallet keypair URL (i.e. usb://ledger)    <AUTHORIZED_KEYPAIR>        Current authorized withdrawer.    <NEW_AUTHORIZED_KEYPAIR>    New authorized withdrawer.solana-vote-update-commission​solana-vote-update-commissionUpdate the vote account's commissionUSAGE:    solana vote-update-commission [FLAGS] [OPTIONS] <VOTE_ACCOUNT_ADDRESS> <PERCENTAGE> <AUTHORIZED_KEYPAIR>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <VOTE_ACCOUNT_ADDRESS>    Vote account to update. , one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)    <PERCENTAGE>              The new commission    <AUTHORIZED_KEYPAIR>      Authorized withdrawer keypairsolana-vote-update-validator​solana-vote-update-validatorUpdate the vote account's validator identityUSAGE:    solana vote-update-validator [FLAGS] [OPTIONS] <VOTE_ACCOUNT_ADDRESS> <IDENTITY_KEYPAIR> <AUTHORIZED_KEYPAIR>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <VOTE_ACCOUNT_ADDRESS>    Vote account to update. , one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)    <IDENTITY_KEYPAIR>        Keypair of new validator that will vote with this account    <AUTHORIZED_KEYPAIR>      Authorized withdrawer keypairsolana-wait-for-max-stake​solana-wait-for-max-stakeWait for the max stake of any one node to drop below a percentage of total.USAGE:    solana wait-for-max-stake [FLAGS] [OPTIONS] [PERCENT]FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>    Return information at the selected commitment level [possible values:                                           processed, confirmed, finalized]    -C, --config <FILEPATH>                Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>             URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta,                                           testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                Filepath or URL to a keypair        --output <FORMAT>                  Return information in specified output format [possible values: json, json-                                           compact]        --ws <URL>                         WebSocket URL for the solana clusterARGS:    <PERCENT>solana-withdraw-from-nonce-account​solana-withdraw-from-nonce-accountWithdraw SOL from the nonce accountUSAGE:    solana withdraw-from-nonce-account [FLAGS] [OPTIONS] <NONCE_ACCOUNT_ADDRESS> <RECIPIENT_ADDRESS> <AMOUNT>FLAGS:    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <NONCE_ACCOUNT_ADDRESS>    Nonce account to withdraw from. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)    <RECIPIENT_ADDRESS>        The account to which the SOL should be transferred. , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)    <AMOUNT>                   The amount to withdraw from the nonce account, in SOLsolana-withdraw-from-vote-account​solana-withdraw-from-vote-accountWithdraw lamports from a vote account into a specified accountUSAGE:    solana withdraw-from-vote-account [FLAGS] [OPTIONS] <VOTE_ACCOUNT_ADDRESS> <RECIPIENT_ADDRESS> <AMOUNT>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --authorized-withdrawer <AUTHORIZED_KEYPAIR>      Authorized withdrawer [default: cli config keypair]        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana clusterARGS:    <VOTE_ACCOUNT_ADDRESS>    Vote account from which to withdraw. , one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)    <RECIPIENT_ADDRESS>       The recipient of withdrawn SOL. , one of:                                * a base58-encoded public key                                * a path to a keypair file                                * a hyphen; signals a JSON-encoded keypair on stdin                                * the 'ASK' keyword; to recover a keypair via its seed phrase                                * a hardware wallet keypair URL (i.e. usb://ledger)    <AMOUNT>                  The amount to withdraw, in SOL; accepts keyword ALL, which for this command means                              account balance minus rent-exempt minimumsolana-withdraw-stake​solana-withdraw-stakeWithdraw the unstaked SOL from the stake accountUSAGE:    solana withdraw-stake [FLAGS] [OPTIONS] <STAKE_ACCOUNT_ADDRESS> <RECIPIENT_ADDRESS> <AMOUNT>FLAGS:        --dump-transaction-message       Display the base64 encoded binary transaction message in sign-only mode    -h, --help                           Prints help information        --no-address-labels              Do not use address labels in the output        --sign-only                      Sign the transaction offline        --skip-seed-phrase-validation    Skip validation of seed phrases. Use this if your phrase does not use the BIP39                                         official English word list    -V, --version                        Prints version information    -v, --verbose                        Show additional informationOPTIONS:        --blockhash <BLOCKHASH>                           Use the supplied blockhash        --commitment <COMMITMENT_LEVEL>            Return information at the selected commitment level [possible values: processed, confirmed, finalized]        --with-compute-unit-price <COMPUTE-UNIT-PRICE>            Set compute unit price for transaction, in increments of 0.000001 lamports per compute unit.    -C, --config <FILEPATH>            Configuration file to use [default: ~/.config/solana/cli/config.yml]        --custodian <KEYPAIR>                             Authority to override account lockup        --fee-payer <KEYPAIR>            Specify the fee-payer account. This may be a keypair file, the ASK keyword            or the pubkey of an offline signer, provided an appropriate --signer argument            is also passed. Defaults to the client keypair.    -u, --url <URL_OR_MONIKER>            URL for Solana's JSON RPC or moniker (or their first letter): [mainnet-beta, testnet, devnet, localhost]    -k, --keypair <KEYPAIR>                               Filepath or URL to a keypair        --with-memo <MEMO>                                Specify a memo string to include in the transaction.        --nonce <PUBKEY>            Provide the nonce account to use when creating a nonced            transaction. Nonced transactions are useful when a transaction            requires a lengthy signing process. Learn more about nonced            transactions at https://docs.solana.com/offline-signing/durable-nonce        --nonce-authority <KEYPAIR>            Provide the nonce authority keypair to use when signing a nonced transaction        --output <FORMAT>            Return information in specified output format [possible values: json, json-compact]        --seed <STRING>            Seed for address generation; if specified, the resulting account will be at a derived address of            STAKE_ACCOUNT_ADDRESS        --signer <PUBKEY=SIGNATURE>...                    Provide a public-key/signature pair for the transaction        --ws <URL>                                        WebSocket URL for the solana cluster        --withdraw-authority <KEYPAIR>                    Authorized withdrawer [default: cli config keypair]ARGS:    <STAKE_ACCOUNT_ADDRESS>    Stake account from which to withdraw (or base of derived address if --seed is used).                               , one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)    <RECIPIENT_ADDRESS>        Recipient of withdrawn SOL, one of:                                 * a base58-encoded public key                                 * a path to a keypair file                                 * a hyphen; signals a JSON-encoded keypair on stdin                                 * the 'ASK' keyword; to recover a keypair via its seed phrase                                 * a hardware wallet keypair URL (i.e. usb://ledger)    <AMOUNT>                   The amount to withdraw from the stake account, in SOL; accepts keyword ALLThe Solana git repository contains all the scripts you might need to spin up your own local testnet. Depending on what you're looking to achieve, you may want to run a different variation, as the full-fledged, performance-enhanced multinode testnet is considerably more complex to set up than a Rust-only, singlenode testnode. If you are looking to develop high-level features, such as experimenting with smart contracts, save yourself some setup headaches and stick to the Rust-only singlenode demo. If you're doing performance optimization of the transaction pipeline, consider the enhanced singlenode demo. If you're doing consensus work, you'll need at least a Rust-only multinode demo. If you want to reproduce our TPS metrics, run the enhanced multinode demo.For all four variations, you'd need the latest Rust toolchain and the Solana source code:First, setup Rust, Cargo and system packages as described in the Solana READMENow checkout the code from github:git clone https://github.com/solana-labs/solana.gitcd solanaThe demo code is sometimes broken between releases as we add new low-level features, so if this is your first time running the demo, you'll improve your odds of success if you check out the latest release before proceeding:TAG=$(git describe --tags $(git rev-list --tags --max-count=1))git checkout $TAGConfiguration Setup​Ensure important programs such as the vote program are built before any nodes are started. Note that we are using the release build here for good performance.
If you want the debug build, use just cargo build and omit the NDEBUG=1 part of the command.The network is initialized with a genesis ledger generated by running the following script.NDEBUG=1 ./multinode-demo/setup.shFaucet​In order for the validators and clients to work, we'll need to spin up a faucet to give out some test tokens. The faucet delivers Milton Friedman-style "air drops" (free tokens to requesting clients) to be used in test transactions.Start the faucet with:NDEBUG=1 ./multinode-demo/faucet.shSinglenode Testnet​Before you start a validator, make sure you know the IP address of the machine you want to be the bootstrap validator for the demo, and make sure that udp ports 8000-10000 are open on all the machines you want to test with.Now start the bootstrap validator in a separate shell:NDEBUG=1 ./multinode-demo/bootstrap-validator.shWait a few seconds for the server to initialize. It will print "leader ready..." when it's ready to receive transactions. The leader will request some tokens from the faucet if it doesn't have any. The faucet does not need to be running for subsequent leader starts.Multinode Testnet​To run a multinode testnet, after starting a leader node, spin up some additional validators in separate shells:NDEBUG=1 ./multinode-demo/validator-x.shTo run a performance-enhanced validator on Linux, CUDA 10.0 must be installed on your system:./fetch-perf-libs.shNDEBUG=1 SOLANA_CUDA=1 ./multinode-demo/bootstrap-validator.shNDEBUG=1 SOLANA_CUDA=1 ./multinode-demo/validator.shTestnet Client Demo​Now that your singlenode or multinode testnet is up and running let's send it some transactions!In a separate shell start the client:NDEBUG=1 ./multinode-demo/bench-tps.sh # runs against localhost by defaultWhat just happened? The client demo spins up several threads to send 500,000 transactions to the testnet as quickly as it can. The client then pings the testnet periodically to see how many transactions it processed in that time. Take note that the demo intentionally floods the network with UDP packets, such that the network will almost certainly drop a bunch of them. This ensures the testnet has an opportunity to reach 710k TPS. The client demo completes after it has convinced itself the testnet won't process any additional transactions. You should see several TPS measurements printed to the screen. In the multinode variation, you'll see TPS measurements for each validator node as well.Testnet Debugging​There are some useful debug messages in the code, you can enable them on a per-module and per-level basis. Before running a leader or validator set the normal RUST_LOG environment variable.For exampleTo enable info everywhere and debug only in the solana::banking_stage module:export RUST_LOG=solana=info,solana::banking_stage=debugTo enable BPF program logging:export RUST_LOG=solana_bpf_loader=traceGenerally we are using debug for infrequent debug messages, trace for potentially frequent messages and info for performance-related logging.You can also attach to a running process with GDB. The leader's process is named solana-validator:sudo gdbattach <PID>set logging onthread apply all btThis will dump all the threads stack traces into gdb.txtDeveloper Testnet​In this example the client connects to our public testnet. To run validators on the testnet you would need to open udp ports 8000-10000.NDEBUG=1 ./multinode-demo/bench-tps.sh --entrypoint entrypoint.devnet.solana.com:8001 --faucet api.devnet.solana.com:9900 --duration 60 --tx_count 50You can observe the effects of your client's transactions on our metrics dashboardThe commitment metric gives clients a standard measure of the network confirmation for the block. Clients can then use this information to derive their own measures of commitment.There are three specific commitment statuses:ProcessedConfirmedFinalizedPropertyProcessedConfirmedFinalizedReceived blockXXXBlock on majority forkXXXBlock contains target txXXX66%+ stake voted on block-XX31+ confirmed blocks built atop block--XThis section describes how forks naturally occur as a consequence of leader rotation.Overview​Nodes take turns being leader and generating the PoH that encodes state changes. The cluster can tolerate loss of connection to any leader by synthesizing what the leader would have generated had it been connected but not ingesting any state changes. The possible number of forks is thereby limited to a "there/not-there" skip list of forks that may arise on leader rotation slot boundaries. At any given slot, only a single leader's transactions will be accepted.Message Flow​Transactions are ingested by the current leader.Leader filters valid transactions.Leader executes valid transactions updating its state.Leader packages transactions into entries based off its current PoH slot.Leader transmits the entries to validator nodes (in signed shreds)The PoH stream includes ticks; empty entries that indicate liveness of the leader and the passage of time on the cluster.A leader's stream begins with the tick entries necessary to complete PoH back to the leader's most recently observed prior leader slot.Validators retransmit entries to peers in their set and to further downstream nodes.Validators validate the transactions and execute them on their state.Validators compute the hash of the state.At specific times, i.e. specific PoH tick counts, validators transmit votes to the leader.Votes are signatures of the hash of the computed state at that PoH tick count.Votes are also propagated via gossip.Leader executes the votes, the same as any other transaction, and broadcasts them to the cluster.Validators observe their votes and all the votes from the cluster.Partitions, Forks​Forks can arise at PoH tick counts that correspond to a vote. The next leader may not have observed the last vote slot and may start their slot with generated virtual PoH entries. These empty ticks are generated by all nodes in the cluster at a cluster-configured rate for hashes/per/tick Z.There are only two possible versions of the PoH during a voting slot: PoH with T ticks and entries generated by the current leader, or PoH with just ticks. The "just ticks" version of the PoH can be thought of as a virtual ledger, one that all nodes in the cluster can derive from the last tick in the previous slot.Validators can ignore forks at other points (e.g. from the wrong leader), or slash the leader responsible for the fork.Validators vote based on a greedy choice to maximize their reward described in Tower BFT.Validator's View​Time Progression​The diagram below represents a validator's view of the PoH stream with possible forks over time. L1, L2, etc. are leader slots, and Es represent entries from that leader during that leader's slot. The xs represent ticks only, and time flows downwards in the diagram.Note that an E appearing on 2 forks at the same slot is a slashable condition, so a validator observing E3 and E3' can slash L3 and safely choose x for that slot. Once a validator commits to a fork, other forks can be discarded below that tick count. For any slot, validators need only consider a single "has entries" chain or a "ticks only" chain to be proposed by a leader. But multiple virtual entries may overlap as they link back to the a previous slot.Time Division​It's useful to consider leader rotation over PoH tick count as time division of the job of encoding state for the cluster. The following table presents the above tree of forks as a time-divided ledger.leader slotL1L2L3L4L5dataE1E2E3E4E5ticks since prevxxxNote that only data from leader L3 will be accepted during leader slot L3. Data from L3 may include "catchup" ticks back to a slot other than L2 if L3 did not observe L2's data. L4 and L5's transmissions include the "ticks to prev" PoH entries.This arrangement of the network data streams permits nodes to save exactly this to the ledger for replay, restart, and checkpoints.Leader's View​When a new leader begins a slot, it must first transmit any PoH (ticks) required to link the new slot with the most recently observed and voted slot. The fork the leader proposes would link the current slot to a previous fork that the leader has voted on with virtual ticks.At any given moment, a cluster expects only one validator to produce ledger entries. By having only one leader at a time, all validators are able to replay identical copies of the ledger. The drawback of only one leader at a time, however, is that a malicious leader is capable of censoring votes and transactions. Since censoring cannot be distinguished from the network dropping packets, the cluster cannot simply elect a single node to hold the leader role indefinitely. Instead, the cluster minimizes the influence of a malicious leader by rotating which node takes the lead.Each validator selects the expected leader using the same algorithm, described below. When the validator receives a new signed ledger entry, it can be certain that an entry was produced by the expected leader. The order of slots which each leader is assigned a slot is called a leader schedule.Leader Schedule Rotation​A validator rejects blocks that are not signed by the slot leader. The list of identities of all slot leaders is called a leader schedule. The leader schedule is recomputed locally and periodically. It assigns slot leaders for a duration of time called an epoch. The schedule must be computed far in advance of the slots it assigns, such that the ledger state it uses to compute the schedule is finalized. That duration is called the leader schedule offset. Solana sets the offset to the duration of slots until the next epoch. That is, the leader schedule for an epoch is calculated from the ledger state at the start of the previous epoch. The offset of one epoch is fairly arbitrary and assumed to be sufficiently long such that all validators will have finalized their ledger state before the next schedule is generated. A cluster may choose to shorten the offset to reduce the time between stake changes and leader schedule updates.While operating without partitions lasting longer than an epoch, the schedule only needs to be generated when the root fork crosses the epoch boundary. Since the schedule is for the next epoch, any new stakes committed to the root fork will not be active until the next epoch. The block used for generating the leader schedule is the first block to cross the epoch boundary.Without a partition lasting longer than an epoch, the cluster will work as follows:A validator continuously updates its own root fork as it votes.The validator updates its leader schedule each time the slot height crosses an epoch boundary.For example:Let's assume an epoch duration of 100 slots, which in reality is magnitudes higher. The root fork is updated from fork computed at slot height 99 to a fork computed at slot height 102. Forks with slots at height 100, 101 were skipped because of failures. The new leader schedule is computed using fork at slot height 102. It is active from slot 200 until it is updated again.No inconsistency can exist because every validator that is voting with the cluster has skipped 100 and 101 when its root passes 102. All validators, regardless of voting pattern, would be committing to a root that is either 102, or a descendant of 102.Leader Schedule Rotation with Epoch Sized Partitions.​The duration of the leader schedule offset has a direct relationship to the likelihood of a cluster having an inconsistent view of the correct leader schedule.Consider the following scenario:Two partitions that are generating half of the blocks each. Neither is coming to a definitive supermajority fork. Both will cross epoch 100 and 200 without actually committing to a root and therefore a cluster-wide commitment to a new leader schedule.In this unstable scenario, multiple valid leader schedules exist.A leader schedule is generated for every fork whose direct parent is in the previous epoch.The leader schedule is valid after the start of the next epoch for descendant forks until it is updated.Each partition's schedule will diverge after the partition lasts more than an epoch. For this reason, the epoch duration should be selected to be much much larger then slot time and the expected length for a fork to be committed to root.After observing the cluster for a sufficient amount of time, the leader schedule offset can be selected based on the median partition duration and its standard deviation. For example, an offset longer then the median partition duration plus six standard deviations would reduce the likelihood of an inconsistent ledger schedule in the cluster to 1 in 1 million.Leader Schedule Generation at Genesis​The genesis config declares the first leader for the first epoch. This leader ends up scheduled for the first two epochs because the leader schedule is also generated at slot 0 for the next epoch. The length of the first two epochs can be specified in the genesis config as well. The minimum length of the first epochs must be greater than or equal to the maximum rollback depth as defined in Tower BFT.Leader Schedule Generation Algorithm​Leader schedule is generated using a predefined seed. The process is as follows:Periodically use the PoH tick height (a monotonically increasing counter) to seed a stable pseudo-random algorithm.At that height, sample the bank for all the staked accounts with leader identities that have voted within a cluster-configured number of ticks. The sample is called the active set.Sort the active set by stake weight.Use the random seed to select nodes weighted by stake to create a stake-weighted ordering.This ordering becomes valid after a cluster-configured number of ticks.Schedule Attack Vectors​Seed​The seed that is selected is predictable but unbiasable. There is no grinding attack to influence its outcome.Active Set​A leader can bias the active set by censoring validator votes. Two possible ways exist for leaders to censor the active set:Ignore votes from validatorsRefuse to vote for blocks with votes from validatorsTo reduce the likelihood of censorship, the active set is calculated at the leader schedule offset boundary over an active set sampling duration. The active set sampling duration is long enough such that votes will have been collected by multiple leaders.Staking​Leaders can censor new staking transactions or refuse to validate blocks with new stakes. This attack is similar to censorship of validator votes.Validator operational key loss​Leaders and validators are expected to use ephemeral keys for operation, and stake owners authorize the validators to do work with their stake via delegation.The cluster should be able to recover from the loss of all the ephemeral keys used by leaders and validators, which could occur through a common software vulnerability shared by all the nodes. Stake owners should be able to vote directly by co-signing a validator vote even though the stake is currently delegated to a validator.Appending Entries​The lifetime of a leader schedule is called an epoch. The epoch is split into slots, where each slot has a duration of T PoH ticks.A leader transmits entries during its slot. After T ticks, all the validators switch to the next scheduled leader. Validators must ignore entries sent outside a leader's assigned slot.All T ticks must be observed by the next leader for it to build its own entries on. If entries are not observed (leader is down) or entries are invalid (leader is buggy or malicious), the next leader must produce ticks to fill the previous leader's slot. Note that the next leader should do repair requests in parallel, and postpone sending ticks until it is confident other validators also failed to observe the previous leader's entries. If a leader incorrectly builds on its own ticks, the leader following it must replace all its ticks.The ledger is permitted to fork at slot boundaries. The resulting data structure forms a tree called a blockstore. When the validator interprets the blockstore, it must maintain state for each fork in the chain. We call each instance an active fork. It is the responsibility of a validator to weigh those forks, such that it may eventually select a fork.A validator selects a fork by submiting a vote to a slot leader on that fork. The vote commits the validator for a duration of time called a lockout period. The validator is not permitted to vote on a different fork until that lockout period expires. Each subsequent vote on the same fork doubles the length of the lockout period. After some cluster-configured number of votes (currently 32), the length of the lockout period reaches what's called max lockout. Until the max lockout is reached, the validator has the option to wait until the lockout period is over and then vote on another fork. When it votes on another fork, it performs an operation called rollback, whereby the state rolls back in time to a shared checkpoint and then jumps forward to the tip of the fork that it just voted on. The maximum distance that a fork may roll back is called the rollback depth. Rollback depth is the number of votes required to achieve max lockout. Whenever a validator votes, any checkpoints beyond the rollback depth become unreachable. That is, there is no scenario in which the validator will need to roll back beyond rollback depth. It therefore may safely prune unreachable forks and squash all checkpoints beyond rollback depth into the root checkpoint.Active Forks​An active fork is as a sequence of checkpoints that has a length at least one longer than the rollback depth. The shortest fork will have a length exactly one longer than the rollback depth. For example:The following sequences are active forks:{4, 2, 1}{5, 2, 1}{6, 3, 1}{7, 3, 1}Pruning and Squashing​A validator may vote on any checkpoint in the tree. In the diagram above, that's every node except the leaves of the tree. After voting, the validator prunes nodes that fork from a distance farther than the rollback depth and then takes the opportunity to minimize its memory usage by squashing any nodes it can into the root.Starting from the example above, with a rollback depth of 2, consider a vote on 5 versus a vote on 6. First, a vote on 5:The new root is 2, and any active forks that are not descendants from 2 are pruned.Alternatively, a vote on 6:The tree remains with a root of 1, since the active fork starting at 6 is only 2 checkpoints from the root.A Solana cluster is a set of validators working together to serve client transactions and maintain the integrity of the ledger. Many clusters may coexist. When two clusters share a common genesis block, they attempt to converge. Otherwise, they simply ignore the existence of the other. Transactions sent to the wrong one are quietly rejected. In this section, we'll discuss how a cluster is created, how nodes join the cluster, how they share the ledger, how they ensure the ledger is replicated, and how they cope with buggy and malicious nodes.Creating a Cluster​Before starting any validators, one first needs to create a genesis config. The config references two public keys, a mint and a bootstrap validator. The validator holding the bootstrap validator's private key is responsible for appending the first entries to the ledger. It initializes its internal state with the mint's account. That account will hold the number of native tokens defined by the genesis config. The second validator then contacts the bootstrap validator to register as a validator. Additional validators then register with any registered member of the cluster.A validator receives all entries from the leader and submits votes confirming those entries are valid. After voting, the validator is expected to store those entries. Once the validator observes a sufficient number of copies exist, it deletes its copy.Joining a Cluster​Validators enter the cluster via registration messages sent to its control plane. The control plane is implemented using a gossip protocol, meaning that a node may register with any existing node, and expect its registration to propagate to all nodes in the cluster. The time it takes for all nodes to synchronize is proportional to the square of the number of nodes participating in the cluster. Algorithmically, that's considered very slow, but in exchange for that time, a node is assured that it eventually has all the same information as every other node, and that information cannot be censored by any one node.Sending Transactions to a Cluster​Clients send transactions to any validator's Transaction Processing Unit (TPU) port. If the node is in the validator role, it forwards the transaction to the designated leader. If in the leader role, the node bundles incoming transactions, timestamps them creating an entry, and pushes them onto the cluster's data plane. Once on the data plane, the transactions are validated by validator nodes, effectively appending them to the ledger.Confirming Transactions​A Solana cluster is capable of subsecond confirmation for thousands of nodes with plans to scale up to hundreds of thousands of nodes.  Confirmation times are expected to increase only with the logarithm of the number of validators, where the logarithm's base is very high. If the base is one thousand, for example, it means that for the first thousand nodes, confirmation will be the duration of three network hops plus the time it takes the slowest validator of a supermajority to vote. For the next million nodes, confirmation increases by only one network hop.Solana defines confirmation as the duration of time from when the leader timestamps a new entry to the moment when it recognizes a supermajority of ledger votes.Scalable confirmation can be achieved using the following combination of techniques:Timestamp transactions with a VDF sample and sign the timestamp.Split the transactions into batches, send each to separate nodes and have each node share its batch with its peers.Repeat the previous step recursively until all nodes have all batches.Solana rotates leaders at fixed intervals, called slots. Each leader may only produce entries during its allotted slot. The leader therefore timestamps transactions so that validators may lookup the public key of the designated leader. The leader then signs the timestamp so that a validator may verify the signature, proving the signer is owner of the designated leader's public key.Next, transactions are broken into batches so that a node can send transactions to multiple parties without making multiple copies. If, for example, the leader needed to send 60 transactions to 6 nodes, it would break that collection of 60 into batches of 10 transactions and send one to each node. This allows the leader to put 60 transactions on the wire, not 60 transactions for each node. Each node then shares its batch with its peers. Once the node has collected all 6 batches, it reconstructs the original set of 60 transactions.A batch of transactions can only be split so many times before it is so small that header information becomes the primary consumer of network bandwidth. At the time of this writing (December, 2021), the approach is scaling well up to about 1,250 validators. To scale up to hundreds of thousands of validators, each node can apply the same technique as the leader node to another set of nodes of equal size. We call the technique Turbine Block Propagation.Solana cluster performance is measured as average number of transactions per second that the network can sustain (TPS). And, how long it takes for a transaction to be confirmed by super majority of the cluster (Confirmation Time).Each cluster node maintains various counters that are incremented on certain events. These counters are periodically uploaded to a cloud based database. Solana's metrics dashboard fetches these counters, and computes the performance metrics and displays it on the dashboard.TPS​Each node's bank runtime maintains a count of transactions that it has processed. The dashboard first calculates the median count of transactions across all metrics enabled nodes in the cluster. The median cluster transaction count is then averaged over a 2 second period and displayed in the TPS time series graph. The dashboard also shows the Mean TPS, Max TPS and Total Transaction Count stats which are all calculated from the median transaction count.Confirmation Time​Each validator node maintains a list of active ledger forks that are visible to the node. A fork is considered to be frozen when the node has received and processed all entries corresponding to the fork. A fork is considered to be confirmed when it receives cumulative super majority vote, and when one of its children forks is frozen.The node assigns a timestamp to every new fork, and computes the time it took to confirm the fork. This time is reflected as validator confirmation time in performance metrics. The performance dashboard displays the average of each validator node's confirmation time as a time series graph.Hardware setup​The validator software is deployed to GCP n1-standard-16 instances with 1TB pd-ssd disk, and 2x Nvidia V100 GPUs. These are deployed in the us-west-1 region.solana-bench-tps is started after the network converges from a client machine with n1-standard-16 CPU-only instance with the following arguments: --tx\_count=50000 --thread-batch-sleep 1000TPS and confirmation metrics are captured from the dashboard numbers over a 5 minute average of when the bench-tps transfer stage begins.Solana maintains dedicated api nodes to fulfill JSON-RPC
requests for each public cluster, and third parties may as well. Here are the
public RPC endpoints currently available and recommended for each public cluster:Devnet​Endpoint​https://api.devnet.solana.com - single Solana-hosted api node; rate-limitedRate Limits​Maximum number of requests per 10 seconds per IP: 100Maximum number of requests per 10 seconds per IP for a single RPC: 40Maximum concurrent connections per IP: 40Maximum connection rate per 10 seconds per IP: 40Maximum amount of data per 30 second: 100 MBTestnet​Endpoint​https://api.testnet.solana.com - single Solana-hosted api node; rate-limitedRate Limits​Maximum number of requests per 10 seconds per IP: 100Maximum number of requests per 10 seconds per IP for a single RPC: 40Maximum concurrent connections per IP: 40Maximum connection rate per 10 seconds per IP: 40Maximum amount of data per 30 second: 100 MBMainnet Beta​Endpoints*​https://api.mainnet-beta.solana.com - Solana-hosted api node cluster, backed by a load balancer; rate-limitedRate Limits​Maximum number of requests per 10 seconds per IP: 100Maximum number of requests per 10 seconds per IP for a single RPC: 40Maximum concurrent connections per IP: 40Maximum connection rate per 10 seconds per IP: 40Maximum amount of data per 30 second: 100 MB*The public RPC endpoints are not intended for production applications. Please
use dedicated/private RPC servers when you launch your application, drop NFTs,
etc. The public services are subject to abuse and rate limits may change
without prior notice. Likewise, high-traffic websites may be blocked without
prior notice.Common HTTP Error Codes​403 -- Your IP address or website has been blocked. It is time to run your own RPC server(s) or find a private service.429 -- Your IP address is exceeding the rate limits. Slow down! Use the
Retry-After
HTTP response header to determine how long to wait before making another
request.Stakers are rewarded for helping to validate the ledger. They do this by delegating their stake to validator nodes. Those validators do the legwork of replaying the ledger and sending votes to a per-node vote account to which stakers can delegate their stakes. The rest of the cluster uses those stake-weighted votes to select a block when forks arise. Both the validator and staker need some economic incentive to play their part. The validator needs to be compensated for its hardware and the staker needs to be compensated for the risk of getting its stake slashed. The economics are covered in staking rewards. This section, on the other hand, describes the underlying mechanics of its implementation.Basic Design​The general idea is that the validator owns a Vote account. The Vote account tracks validator votes, counts validator generated credits, and provides any additional validator specific state. The Vote account is not aware of any stakes delegated to it and has no staking weight.A separate Stake account (created by a staker) names a Vote account to which the stake is delegated. Rewards generated are proportional to the amount of lamports staked. The Stake account is owned by the staker only. Some portion of the lamports stored in this account are the stake.Passive Delegation​Any number of Stake accounts can delegate to a single Vote account without an interactive action from the identity controlling the Vote account or submitting votes to the account.The total stake allocated to a Vote account can be calculated by the sum of all the Stake accounts that have the Vote account pubkey as the StakeState::Stake::voter_pubkey.Vote and Stake accounts​The rewards process is split into two on-chain programs. The Vote program solves the problem of making stakes slashable. The Stake program acts as custodian of the rewards pool and provides for passive delegation. The Stake program is responsible for paying rewards to staker and voter when shown that a staker's delegate has participated in validating the ledger.VoteState​VoteState is the current state of all the votes the validator has submitted to the network. VoteState contains the following state information:votes - The submitted votes data structure.credits - The total number of rewards this Vote program has generated over its lifetime.root_slot - The last slot to reach the full lockout commitment necessary for rewards.commission - The commission taken by this VoteState for any rewards claimed by staker's Stake accounts. This is the percentage ceiling of the reward.Account::lamports - The accumulated lamports from the commission. These do not count as stakes.authorized_voter - Only this identity is authorized to submit votes. This field can only modified by this identity.node_pubkey - The Solana node that votes in this account.authorized_withdrawer - the identity of the entity in charge of the lamports of this account, separate from the account's address and the authorized vote signer.VoteInstruction::Initialize(VoteInit)​account[0] - RW - The VoteState.VoteInit carries the new vote account's node_pubkey, authorized_voter, authorized_withdrawer, and commission.other VoteState members defaulted.Updates the account with a new authorized voter or withdrawer, according to the VoteAuthorize parameter (Voter or Withdrawer). The transaction must be signed by the Vote account's current authorized_voter or authorized_withdrawer.account[0] - RW - The VoteState.
VoteState::authorized_voter or authorized_withdrawer is set to Pubkey.VoteInstruction::AuthorizeWithSeed(VoteAuthorizeWithSeedArgs)​Updates the account with a new authorized voter or withdrawer, according to the VoteAuthorize parameter (Voter or Withdrawer). Unlike VoteInstruction::Authorize this instruction is for use when the Vote account's current authorized_voter or authorized_withdrawer is a derived key. The transaction must be signed by someone who can sign for the base key of that derived key.account[0] - RW - The VoteState.
VoteState::authorized_voter or authorized_withdrawer is set to Pubkey.VoteInstruction::Vote(Vote)​account[0] - RW - The VoteState.
VoteState::lockouts and VoteState::credits are updated according to voting lockout rules see Tower BFT.account[1] - RO - sysvar::slot_hashes A list of some N most recent slots and their hashes for the vote to be verified against.account[2] - RO - sysvar::clock The current network time, expressed in slots, epochs.StakeState​A StakeState takes one of four forms, StakeState::Uninitialized, StakeState::Initialized, StakeState::Stake, and StakeState::RewardsPool. Only the first three forms are used in staking, but only StakeState::Stake is interesting. All RewardsPools are created at genesis.StakeState::Stake​StakeState::Stake is the current delegation preference of the staker and contains the following state information:Account::lamports - The lamports available for staking.stake - the staked amount (subject to warmup and cooldown) for generating rewards, always less than or equal to Account::lamports.voter_pubkey - The pubkey of the VoteState instance the lamports are delegated to.credits_observed - The total credits claimed over the lifetime of the program.activated - the epoch at which this stake was activated/delegated. The full stake will be counted after warmup.deactivated - the epoch at which this stake was de-activated, some cooldown epochs are required before the account is fully deactivated, and the stake available for withdrawal.authorized_staker - the pubkey of the entity that must sign delegation, activation, and deactivation transactions.authorized_withdrawer - the identity of the entity in charge of the lamports of this account, separate from the account's address, and the authorized staker.StakeState::RewardsPool​To avoid a single network-wide lock or contention in redemption, 256 RewardsPools are part of genesis under pre-determined keys, each with std::u64::MAX credits to be able to satisfy redemptions according to point value.The Stakes and the RewardsPool are accounts that are owned by the same Stake program.StakeInstruction::DelegateStake​The Stake account is moved from Initialized to StakeState::Stake form, or from a deactivated (i.e. fully cooled-down) StakeState::Stake to activated StakeState::Stake. This is how stakers choose the vote account and validator node to which their stake account lamports are delegated. The transaction must be signed by the stake's authorized_staker.account[0] - RW - The StakeState::Stake instance. StakeState::Stake::credits_observed is initialized to VoteState::credits, StakeState::Stake::voter_pubkey is initialized to account[1]. If this is the initial delegation of stake, StakeState::Stake::stake is initialized to the account's balance in lamports, StakeState::Stake::activated is initialized to the current Bank epoch, and StakeState::Stake::deactivated is initialized to std::u64::MAXaccount[1] - R - The VoteState instance.account[2] - R - sysvar::clock account, carries information about current Bank epoch.account[3] - R - sysvar::stakehistory account, carries information about stake history.account[4] - R - stake::Config account, carries warmup, cooldown, and slashing configuration.StakeInstruction::Authorize(Pubkey, StakeAuthorize)​Updates the account with a new authorized staker or withdrawer, according to the StakeAuthorize parameter (Staker or Withdrawer). The transaction must be by signed by the Stakee account's current authorized_staker or authorized_withdrawer. Any stake lock-up must have expired, or the lock-up custodian must also sign the transaction.account[0] - RW - The StakeState.StakeState::authorized_staker or authorized_withdrawer is set to to Pubkey.StakeInstruction::Deactivate​A staker may wish to withdraw from the network. To do so he must first deactivate his stake, and wait for cooldown.
The transaction must be signed by the stake's authorized_staker.account[0] - RW - The StakeState::Stake instance that is deactivating.account[1] - R - sysvar::clock account from the Bank that carries current epoch.StakeState::Stake::deactivated is set to the current epoch + cooldown. The account's stake will ramp down to zero by that epoch, and Account::lamports will be available for withdrawal.StakeInstruction::Withdraw(u64)​Lamports build up over time in a Stake account and any excess over activated stake can be withdrawn. The transaction must be signed by the stake's authorized_withdrawer.account[0] - RW - The StakeState::Stake from which to withdraw.account[1] - RW - Account that should be credited with the withdrawn lamports.account[2] - R - sysvar::clock account from the Bank that carries current epoch, to calculate stake.account[3] - R - sysvar::stake_history account from the Bank that carries stake warmup/cooldown history.Benefits of the design​Single vote for all the stakers.Clearing of the credit variable is not necessary for claiming rewards.Each delegated stake can claim its rewards independently.Commission for the work is deposited when a reward is claimed by the delegated stake.Example Callflow​Staking Rewards​The specific mechanics and rules of the validator rewards regime is outlined here. Rewards are earned by delegating stake to a validator that is voting correctly. Voting incorrectly exposes that validator's stakes to slashing.Basics​The network pays rewards from a portion of network inflation. The number of lamports available to pay rewards for an epoch is fixed and must be evenly divided among all staked nodes according to their relative stake weight and participation. The weighting unit is called a point.Rewards for an epoch are not available until the end of that epoch.At the end of each epoch, the total number of points earned during the epoch is summed and used to divide the rewards portion of epoch inflation to arrive at a point value. This value is recorded in the bank in a sysvar that maps epochs to point values.During redemption, the stake program counts the points earned by the stake for each epoch, multiplies that by the epoch's point value, and transfers lamports in that amount from a rewards account into the stake and vote accounts according to the vote account's commission setting.Economics​Point value for an epoch depends on aggregate network participation. If participation in an epoch drops off, point values are higher for those that do participate.Earning credits​Validators earn one vote credit for every correct vote that exceeds maximum lockout, i.e. every time the validator's vote account retires a slot from its lockout list, making that vote a root for the node.Stakers who have delegated to that validator earn points in proportion to their stake. Points earned is the product of vote credits and stake.Stake warmup, cooldown, withdrawal​Stakes, once delegated, do not become effective immediately. They must first pass through a warmup period. During this period some portion of the stake is considered "effective", the rest is considered "activating". Changes occur on epoch boundaries.The stake program limits the rate of change to total network stake, reflected in the stake program's config::warmup_rate (set to 25% per epoch in the current implementation).The amount of stake that can be warmed up each epoch is a function of the previous epoch's total effective stake, total activating stake, and the stake program's configured warmup rate.Cooldown works the same way. Once a stake is deactivated, some part of it is considered "effective", and also "deactivating". As the stake cools down, it continues to earn rewards and be exposed to slashing, but it also becomes available for withdrawal.Bootstrap stakes are not subject to warmup.Rewards are paid against the "effective" portion of the stake for that epoch.Warmup example​Consider the situation of a single stake of 1,000 activated at epoch N, with network warmup rate of 20%, and a quiescent total network stake at epoch N of 2,000.At epoch N+1, the amount available to be activated for the network is 400 (20% of 2000), and at epoch N, this example stake is the only stake activating, and so is entitled to all of the warmup room available.epocheffectiveactivatingtotal effectivetotal activatingN-12,0000N01,0002,0001,000N+14006002,400600N+28801202,880120N+3100003,0000Were 2 stakes (X and Y) to activate at epoch N, they would be awarded a portion of the 20% in proportion to their stakes. At each epoch effective and activating for each stake is a function of the previous epoch's state.epochX effX actY effY acttotal effectivetotal activatingN-12,0000N01,00002002,0001,200N+1333667671332,400800N+2733267146542,880321N+31000020003,2000Withdrawal​Only lamports in excess of effective+activating stake may be withdrawn at any time. This means that during warmup, effectively no stake can be withdrawn. During cooldown, any tokens in excess of effective stake may be withdrawn (activating == 0). Because earned rewards are automatically added to stake, withdrawal is generally only possible after deactivation.Lock-up​Stake accounts support the notion of lock-up, wherein the stake account balance is unavailable for withdrawal until a specified time. Lock-up is specified as an epoch height, i.e. the minimum epoch height that must be reached by the network before the stake account balance is available for withdrawal, unless the transaction is also signed by a specified custodian. This information is gathered when the stake account is created, and stored in the Lockup field of the stake account's state. Changing the authorized staker or withdrawer is also subject to lock-up, as such an operation is effectively a transfer.Fast, reliable synchronization is the biggest reason Solana is able to achieve such high throughput. Traditional blockchains synchronize on large chunks of transactions called blocks. By synchronizing on blocks, a transaction cannot be processed until a duration, called "block time", has passed. In Proof of Work consensus, these block times need to be very large (~10 minutes) to minimize the odds of multiple validators producing a new valid block at the same time. There's no such constraint in Proof of Stake consensus, but without reliable timestamps, a validator cannot determine the order of incoming blocks. The popular workaround is to tag each block with a wallclock timestamp. Because of clock drift and variance in network latencies, the timestamp is only accurate within an hour or two. To workaround the workaround, these systems lengthen block times to provide reasonable certainty that the median timestamp on each block is always increasing.Solana takes a very different approach, which it calls Proof of History or PoH. Leader nodes "timestamp" blocks with cryptographic proofs that some duration of time has passed since the last proof. All data hashed into the proof most certainly have occurred before the proof was generated. The node then shares the new block with validator nodes, which are able to verify those proofs. The blocks can arrive at validators in any order or even could be replayed years later. With such reliable synchronization guarantees, Solana is able to break blocks into smaller batches of transactions called entries. Entries are streamed to validators in realtime, before any notion of block consensus.Solana technically never sends a block, but uses the term to describe the sequence of entries that validators vote on to achieve confirmation. In that way, Solana's confirmation times can be compared apples to apples to block-based systems. The current implementation sets block time to 800ms.What's happening under the hood is that entries are streamed to validators as quickly as a leader node can batch a set of valid transactions into an entry. Validators process those entries long before it is time to vote on their validity. By processing the transactions optimistically, there is effectively no delay between the time the last entry is received and the time when the node can vote. In the event consensus is not achieved, a node simply rolls back its state. This optimisic processing technique was introduced in 1981 and called Optimistic Concurrency Control. It can be applied to blockchain architecture where a cluster votes on a hash that represents the full ledger up to some block height. In Solana, it is implemented trivially using the last entry's PoH hash.Relationship to VDFs​The Proof of History technique was first described for use in blockchain by Solana in November of 2017. In June of the following year, a similar technique was described at Stanford and called a verifiable delay function or VDF.A desirable property of a VDF is that verification time is very fast. Solana's approach to verifying its delay function is proportional to the time it took to create it. Split over a 4000 core GPU, it is sufficiently fast for Solana's needs, but if you asked the authors of the paper cited above, they might tell you (and have) that Solana's approach is algorithmically slow and it shouldn't be called a VDF. We argue the term VDF should represent the category of verifiable delay functions and not just the subset with certain performance characteristics. Until that's resolved, Solana will likely continue using the term PoH for its application-specific VDF.Another difference between PoH and VDFs is that a VDF is used only for tracking duration. PoH's hash chain, on the other hand, includes hashes of any data the application observed. That data is a double-edged sword. On one side, the data "proves history" - that the data most certainly existed before hashes after it. On the other side, it means the application can manipulate the hash chain by changing when the data is hashed. The PoH chain therefore does not serve as a good source of randomness whereas a VDF without that data could. Solana's leader rotation algorithm, for example, is derived only from the VDF height and not its hash at that height.Relationship to Consensus Mechanisms​Proof of History is not a consensus mechanism, but it is used to improve the performance of Solana's Proof of Stake consensus. It is also used to improve the performance of the data plane protocols.More on Proof of History​water clock analogyProof of History overviewA Solana cluster uses a multi-layer block propagation mechanism called Turbine to broadcast transaction shreds to all nodes with minimal amount of duplicate messages. The cluster divides itself into small collections of nodes, called neighborhoods. Each node is responsible for propagating any data it receives on to a small set of nodes in downstream neighborhoods and possibly sharing data with the other nodes in its neighborhood. This way each node only has to communicate with a small number of nodes.Neighborhood Assignment - Weighted Selection​In order for data plane fanout to work, the entire cluster must agree on how the cluster is divided into neighborhoods. To achieve this, all the recognized validator nodes (the TVU peers) are sorted by stake and stored in a list. This list is then indexed in different ways to figure out neighborhood boundaries and retransmit peers. For example, the leader will simply select the first DATA_PLANE_FANOUT nodes to make up layer 1. These will automatically be the highest stake holders, allowing the heaviest votes to come back to the leader first. Layer 1 and lower-layer nodes use the same logic to find their neighbors and next layer peers.To reduce the possibility of attack vectors, each shred is transmitted over a random tree of neighborhoods. Each node uses the same set of nodes representing the cluster. A random tree is generated from the set for each shred using a seed derived from the slot leader id, slot, shred index, and shred type.Layer and Neighborhood Structure​The leader can be thought of as layer 0 and communicates with layer 1, which is made up of at most DATA_PLANE_FANOUT nodes. If this layer 1 is smaller than the number of nodes in the cluster, then the data plane fanout mechanism adds layers below. Subsequent layers follow these constraints to determine layer-capacity: Each neighborhood contains DATA_PLANE_FANOUT nodes. Layer 1 starts with 1 neighborhood. The number of nodes in each additional neighborhood/layer grows by a factor of DATA_PLANE_FANOUT.A good way to think about this is, layer 1 starts with 1 neighborhood with fanout nodes, layer 2 adds fanout neighborhoods, each with fanout nodes and layer 3 will have fanout * number of nodes in layer 2 and so on.The following diagram shows a three layer cluster with a fanout of 2.Configuration Values​DATA_PLANE_FANOUT - Determines the size of layer 1. Subsequent layers grow by a factor of DATA_PLANE_FANOUT. The number of nodes in a neighborhood is equal to the fanout value. Neighborhoods will fill to capacity before new ones are added, i.e if a neighborhood isn't full, it must be the last one.Currently, configuration is set when the cluster is launched. In the future, these parameters may be hosted on-chain, allowing modification on the fly as the cluster sizes change.Shred Propagation Flow​During its slot, the leader node (layer 0) makes its initial broadcasts to a special root node sitting atop the turbine tree. This root node is rotated every shred. The root shares data within its neighborhood (layer 1). Nodes in this neighborhood then retransmit shreds to one node in some neighborhoods in the next layer (layer 2). In general, the layer-1 root/anchor node (first node in the neighborhood, rotated on every shred) shares their data with their neighborhood peers, and every node in layer-1 retransmits to nodes in the next layer, etc, until all nodes in the cluster have received all the shreds.As mentioned above, each node in a layer only has to broadcast its shreds to exactly 1 node in some next-layer neighborhoods (and to its neighbors if it is the anchor node), instead of to every TVU peer in the cluster. In this way, each node only has to communicate with a maximum of 2 * DATA_PLANE_FANOUT - 1 nodes if it is the anchor node and DATA_PLANE_FANOUT if it is not the anchor node.The following diagram shows how the leader sends shreds with a fanout of 2 to the root from Neighborhood 0 in Layer 1 and how the root from Neighborhood 0 shares its data with its neighbors.The following diagram shows how Neighborhood 0 fans out to Neighborhoods 1 and 2.Neighborhood Interaction​The following diagram shows how two neighborhoods in different layers interact. To cripple a neighborhood, enough nodes (erasure codes +1) from the neighborhood above need to fail. Since each neighborhood receives shreds from multiple nodes in a neighborhood in the upper layer, we'd need a big network failure in the upper layers to end up with incomplete data.Calculating the required FEC rate​Turbine relies on retransmission of packets between validators. Due to
retransmission, any network wide packet loss is compounded, and the
probability of the packet failing to reach its destination increases
on each hop. The FEC rate needs to take into account the network wide
packet loss, and the propagation depth.A shred group is the set of data and coding packets that can be used
to reconstruct each other. Each shred group has a chance of failure,
based on the likelyhood of the number of packets failing that exceeds
the FEC rate. If a validator fails to reconstruct the shred group,
then the block cannot be reconstructed, and the validator has to rely
on repair to fixup the blocks.The probability of the shred group failing can be computed using the
binomial distribution. If the FEC rate is 16:4, then the group size
is 20, and at least 4 of the shreds must fail for the group to fail.
Which is equal to the sum of the probability of 4 or more trials failing
out of 20.Probability of a block succeeding in turbine:Probability of packet failure: P = 1 - (1 - network_packet_loss_rate)^2FEC rate: K:MNumber of trials: N = K + MShred group failure rate: S = 1 - (SUM of i=0 -> M for binomial(prob_failure = P, trials = N, failures = i))Shreds per block: GBlock success rate: B = (1 - S) ^ (G / N)Binomial distribution for exactly i results with probability of P in N trials is defined as (N choose i) * P^i * (1 - P)^(N-i)For example:Network packet loss rate is 15%.50k tps network generates 6400 shreds per second.FEC rate increases the total shreds per block by the FEC ratio.With a FEC rate: 16:4G = 8000P = 1 - 0.85 * 0.85 = 1 - 0.7225 = 0.2775S = 1 - (SUM of i=0 -> 4 for binomial(prob_failure = 0.2775, trials = 20, failures = i)) = 0.689414B = (1 - 0.689) ^ (8000 / 20) = 10^-203With FEC rate of 16:16G = 12800S = 1 - (SUM of i=0 -> 16 for binomial(prob_failure = 0.2775, trials = 32, failures = i)) = 0.002132B = (1 - 0.002132) ^ (12800 / 32) = 0.42583With FEC rate of 32:32G = 12800S = 1 - (SUM of i=0 -> 32 for binomial(prob_failure = 0.2775, trials = 64, failures = i)) = 0.000048B = (1 - 0.000048) ^ (12800 / 64) = 0.99045A validator receives entries from the current leader and submits votes confirming those entries are valid. This vote submission presents a security challenge, because forged votes that violate consensus rules could be used to slash the validator's stake.The validator votes on its chosen fork by submitting a transaction that uses an asymmetric key to sign the result of its validation work. Other entities can verify this signature using the validator's public key. If the validator's key is used to sign incorrect data (e.g. votes on multiple forks of the ledger), the node's stake or its resources could be compromised.Validators, Vote Signers, and Stakeholders​When a validator receives multiple blocks for the same slot, it tracks all possible forks until it can determine a "best" one. A validator selects the best fork by submitting a vote to it.A stakeholder is an identity that has control of the staked capital. The stakeholder can delegate its stake to the vote signer. Once a stake is delegated, the vote signer's votes represent the voting weight of all the delegated stakes, and produce rewards for all the delegated stakes.Validator voting​A validator node, at startup, creates a new vote account and registers it with the cluster via gossip. The other nodes on the cluster include the new validator in the active set. Subsequently, the validator submits a "new vote" transaction signed with the validator's voting private key on each voting event.Solana maintains several different clusters with different purposes.Before you begin make sure you have first
installed the Solana command line toolsExplorers:http://explorer.solana.com/.http://solanabeach.io/.Devnet​Devnet serves as a playground for anyone who wants to take Solana for a
test drive, as a user, token holder, app developer, or validator.Application developers should target Devnet.Potential validators should first target Devnet.Key differences between Devnet and Mainnet Beta:Devnet tokens are not realDevnet includes a token faucet for airdrops for application testingDevnet may be subject to ledger resetsDevnet typically runs the same software release branch version as Mainnet Beta,
but may run a newer minor release version than Mainnet Beta.Gossip entrypoint for Devnet: entrypoint.devnet.solana.com:8001Metrics environment variable for Devnet:export SOLANA_METRICS_CONFIG="host=https://metrics.solana.com:8086,db=devnet,u=scratch_writer,p=topsecret"RPC URL for Devnet: https://api.devnet.solana.comExample solana command-line configuration​solana config set --url https://api.devnet.solana.comExample solana-validator command-line​$ solana-validator \    --identity validator-keypair.json \    --vote-account vote-account-keypair.json \    --known-validator dv1ZAGvdsz5hHLwWXsVnM94hWf1pjbKVau1QVkaMJ92 \    --known-validator dv2eQHeP4RFrJZ6UeiZWoc3XTtmtZCUKxxCApCDcRNV \    --known-validator dv4ACNkpYPcE3aKmYDqZm9G5EB3J4MRoeE7WNDRBVJB \    --known-validator dv3qDFk1DTF36Z62bNvrCXe9sKATA6xvVy6A798xxAS \    --only-known-rpc \    --ledger ledger \    --rpc-port 8899 \    --dynamic-port-range 8000-8020 \    --entrypoint entrypoint.devnet.solana.com:8001 \    --entrypoint entrypoint2.devnet.solana.com:8001 \    --entrypoint entrypoint3.devnet.solana.com:8001 \    --entrypoint entrypoint4.devnet.solana.com:8001 \    --entrypoint entrypoint5.devnet.solana.com:8001 \    --expected-genesis-hash EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG \    --wal-recovery-mode skip_any_corrupted_record \    --limit-ledger-sizeThe --known-validators
are operated by Solana LabsTestnet​Testnet is where the Solana core contributors stress test recent release features on a live
cluster, particularly focused on network performance, stability and validator
behavior.Testnet tokens are not realTestnet may be subject to ledger resets.Testnet includes a token faucet for airdrops for application testingTestnet typically runs a newer software release branch than both
Devnet and Mainnet BetaGossip entrypoint for Testnet: entrypoint.testnet.solana.com:8001Metrics environment variable for Testnet:export SOLANA_METRICS_CONFIG="host=https://metrics.solana.com:8086,db=tds,u=testnet_write,p=c4fa841aa918bf8274e3e2a44d77568d9861b3ea"RPC URL for Testnet: https://api.testnet.solana.comExample solana command-line configuration​solana config set --url https://api.testnet.solana.comExample solana-validator command-line​$ solana-validator \    --identity validator-keypair.json \    --vote-account vote-account-keypair.json \    --known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \    --known-validator dDzy5SR3AXdYWVqbDEkVFdvSPCtS9ihF5kJkHCtXoFs \    --known-validator Ft5fbkqNa76vnsjYNwjDZUXoTWpP7VYm3mtsaQckQADN \    --known-validator eoKpUABi59aT4rR9HGS3LcMecfut9x7zJyodWWP43YQ \    --known-validator 9QxCLckBiJc783jnMvXZubK4wH86Eqqvashtrwvcsgkv \    --only-known-rpc \    --ledger ledger \    --rpc-port 8899 \    --dynamic-port-range 8000-8020 \    --entrypoint entrypoint.testnet.solana.com:8001 \    --entrypoint entrypoint2.testnet.solana.com:8001 \    --entrypoint entrypoint3.testnet.solana.com:8001 \    --expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \    --wal-recovery-mode skip_any_corrupted_record \    --limit-ledger-sizeThe identities of the
--known-validators are:5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on - Solana LabsdDzy5SR3AXdYWVqbDEkVFdvSPCtS9ihF5kJkHCtXoFs - MonkeDAOFt5fbkqNa76vnsjYNwjDZUXoTWpP7VYm3mtsaQckQADN - Certus OneeoKpUABi59aT4rR9HGS3LcMecfut9x7zJyodWWP43YQ - SerGo9QxCLckBiJc783jnMvXZubK4wH86Eqqvashtrwvcsgkv - Algo|StakeMainnet Beta​A permissionless, persistent cluster for Solana users, builders, validators and token holders.Tokens that are issued on Mainnet Beta are real SOLGossip entrypoint for Mainnet Beta: entrypoint.mainnet-beta.solana.com:8001Metrics environment variable for Mainnet Beta:export SOLANA_METRICS_CONFIG="host=https://metrics.solana.com:8086,db=mainnet-beta,u=mainnet-beta_write,p=password"RPC URL for Mainnet Beta: https://api.mainnet-beta.solana.comExample solana command-line configuration​solana config set --url https://api.mainnet-beta.solana.comExample solana-validator command-line​$ solana-validator \    --identity ~/validator-keypair.json \    --vote-account ~/vote-account-keypair.json \    --known-validator 7Np41oeYqPefeNQEHSv1UDhYrehxin3NStELsSKCT4K2 \    --known-validator GdnSyH3YtwcxFvQrVVJMm1JhTS4QVX7MFsX56uJLUfiZ \    --known-validator DE1bawNcRJB9rVm3buyMVfr8mBEoyyu73NBovf2oXJsJ \    --known-validator CakcnaRDHka2gXyfbEd2d3xsvkJkqsLw2akB3zsN1D2S \    --only-known-rpc \    --ledger ledger \    --rpc-port 8899 \    --private-rpc \    --dynamic-port-range 8000-8020 \    --entrypoint entrypoint.mainnet-beta.solana.com:8001 \    --entrypoint entrypoint2.mainnet-beta.solana.com:8001 \    --entrypoint entrypoint3.mainnet-beta.solana.com:8001 \    --entrypoint entrypoint4.mainnet-beta.solana.com:8001 \    --entrypoint entrypoint5.mainnet-beta.solana.com:8001 \    --expected-genesis-hash 5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d \    --wal-recovery-mode skip_any_corrupted_record \    --limit-ledger-sizeAll four --known-validators
are operated by Solana LabsAs the Solana developer ecosystem grows, so does the need for clear expectations around
breaking API and behavior changes affecting applications and tooling built for Solana.
In a perfect world, Solana development could continue at a very fast pace without ever
causing issues for existing developers. However, some compromises will need to be made
and so this document attempts to clarify and codify the process for new releases.Expectations​Solana software releases include APIs, SDKs, and CLI tooling (with a few exceptions).Solana software releases follow semantic versioning, more details below.Software for a MINOR version release will be compatible across all software on the
same MAJOR version.Deprecation Process​In any PATCH or MINOR release, a feature, API, endpoint, etc. could be marked as deprecated.According to code upgrade difficulty, some features will be remain deprecated for a few release
cycles.In a future MAJOR release, deprecated features will be removed in an incompatible way.Release Cadence​The Solana RPC API, Rust SDK, CLI tooling, and BPF Program SDK are all updated and shipped
along with each Solana software release and should always be compatible between PATCH
updates of a particular MINOR version release.Release Channels​edge software that contains cutting-edge features with no backward compatibility policybeta software that runs on the Solana Testnet clusterstable software that run on the Solana Mainnet Beta and Devnet clustersMajor Releases (x.0.0)​MAJOR version releases (e.g. 2.0.0) may contain breaking changes and removal of previously
deprecated features. Client SDKs and tooling will begin using new features and endpoints
that were enabled in the previous MAJOR version.Minor Releases (1.x.0)​New features and proposal implementations are added to new MINOR version
releases (e.g. 1.4.0) and are first run on Solana's Testnet cluster. While running
on the testnet, MINOR versions are considered to be in the beta release channel. After
those changes have been patched as needed and proven to be reliable, the MINOR version will
be upgraded to the stable release channel and deployed to the Mainnet Beta cluster.Patch Releases (1.0.x)​Low risk features, non-breaking changes, and security and bug fixes are shipped as part
of PATCH version releases (e.g. 1.0.11). Patches may be applied to both beta and stable
release channels.RPC API​Patch releases:Bug fixesSecurity fixesEndpoint / feature deprecationMinor releases:New RPC endpoints and featuresMajor releases:Removal of deprecated featuresRust Crates​solana-sdk - Rust SDK for creating transactions and parsing account statesolana-program - Rust SDK for writing programssolana-client - Rust client for connecting to RPC APIsolana-cli-config - Rust client for managing Solana CLI config filessolana-geyser-plugin-interface - Rust interface for developing Solana Geyser plugins.Patch releases:Bug fixesSecurity fixesPerformance improvementsMinor releases:New APIsMajor releasesRemoval of deprecated APIsBackwards incompatible behavior changesCLI Tools​Patch releases:Bug and security fixesPerformance improvementsSubcommand / argument deprecationMinor releases:New subcommandsMajor releases:Switch to new RPC API endpoints / configuration introduced in the previous major version.Removal of deprecated featuresRuntime Features​New Solana runtime features are feature-switched and manually activated. Runtime features
include: the introduction of new native programs, sysvars, and syscalls; and changes to
their behavior. Feature activation is cluster agnostic, allowing confidence to be built on
Testnet before activation on Mainnet-beta.The release process is as follows:New runtime feature is included in a new release, deactivated by defaultOnce sufficient staked validators upgrade to the new release, the runtime feature switch
is activated manually with an instructionThe feature takes effect at the beginning of the next epochInfrastructure Changes​Public API Nodes​Solana provides publicly available RPC API nodes for all developers to use. The Solana team
will make their best effort to communicate any changes to the host, port, rate-limiting behavior,
availability, etc. However, we recommend that developers rely on their own validator nodes to
discourage dependence upon Solana operated nodes.Local cluster scripts and Docker images​Breaking changes will be limited to MAJOR version updates. MINOR and PATCH updates should always
be backwards compatible.Exceptions​Web3 JavaScript SDK​The Web3.JS SDK also follows semantic versioning specifications but is shipped separately from Solana
software releases.Attack Vectors​If a new attack vector is discovered in existing code, the above processes may be
circumvented in order to rapidly deploy a fix, depending on the severity of the issue.CLI Tooling Output​CLI tooling json output (output --json) compatibility will be preserved; however, output directed
for a human reader is subject to change. This includes output as well as potential help, warning, or
error messages.What is Solana-Web3.js?​The Solana-Web3.js library aims to provide complete coverage of Solana. The library was built on top of the Solana JSON RPC API.You can find the full documentation for the @solana/web3.js library here.Common Terminology​TermDefinitionProgramStateless executable code written to interpret instructions. Programs are capable of performing actions based on the instructions provided.InstructionThe smallest unit of a program that a client can include in a transaction. Within its processing code, an instruction may contain one or more cross-program invocations.TransactionOne or more instructions signed by the client using one or more Keypairs and executed atomically with only two possible outcomes: success or failure.For the full list of terms, see Solana terminologyGetting Started​Installation​yarn​$ yarn add @solana/web3.jsnpm​$ npm install --save @solana/web3.jsBundle​<!-- Development (un-minified) --><script src="https://unpkg.com/@solana/web3.js@latest/lib/index.iife.js"></script><!-- Production (minified) --><script src="https://unpkg.com/@solana/web3.js@latest/lib/index.iife.min.js"></script>Usage​Javascript​const solanaWeb3 = require("@solana/web3.js");console.log(solanaWeb3);ES6​import * as solanaWeb3 from "@solana/web3.js";console.log(solanaWeb3);Browser Bundle​// solanaWeb3 is provided in the global namespace by the bundle scriptconsole.log(solanaWeb3);Quickstart​Connecting to a Wallet​To allow users to use your dApp or application on Solana, they will need to get access to their Keypair. A Keypair is a private key with a matching public key, used to sign transactions.There are two ways to obtain a Keypair:Generate a new KeypairObtain a Keypair using the secret keyYou can obtain a new Keypair with the following:const { Keypair } = require("@solana/web3.js");let keypair = Keypair.generate();This will generate a brand new Keypair for a user to fund and use within your application.You can allow entry of the secretKey using a textbox, and obtain the Keypair with Keypair.fromSecretKey(secretKey).const { Keypair } = require("@solana/web3.js");let secretKey = Uint8Array.from([  202, 171, 192, 129, 150, 189, 204, 241, 142, 71, 205, 2, 81, 97, 2, 176, 48,  81, 45, 1, 96, 138, 220, 132, 231, 131, 120, 77, 66, 40, 97, 172, 91, 245, 84,  221, 157, 190, 9, 145, 176, 130, 25, 43, 72, 107, 190, 229, 75, 88, 191, 136,  7, 167, 109, 91, 170, 164, 186, 15, 142, 36, 12, 23,]);let keypair = Keypair.fromSecretKey(secretKey);Many wallets today allow users to bring their Keypair using a variety of extensions or web wallets. The general recommendation is to use wallets, not Keypairs, to sign transactions. The wallet creates a layer of separation between the dApp and the Keypair, ensuring that the dApp never has access to the secret key. You can find ways to connect to external wallets with the wallet-adapter library.Creating and Sending Transactions​To interact with programs on Solana, you create, sign, and send transactions to the network. Transactions are collections of instructions with signatures. The order that instructions exist in a transaction determines the order they are executed.A transaction in Solana-Web3.js is created using the Transaction object and adding desired messages, addresses, or instructions.Take the example of a transfer transaction:const {  Keypair,  Transaction,  SystemProgram,  LAMPORTS_PER_SOL,} = require("@solana/web3.js");let fromKeypair = Keypair.generate();let toKeypair = Keypair.generate();let transaction = new Transaction();transaction.add(  SystemProgram.transfer({    fromPubkey: fromKeypair.publicKey,    toPubkey: toKeypair.publicKey,    lamports: LAMPORTS_PER_SOL,  }),);The above code achieves creating a transaction ready to be signed and broadcasted to the network. The SystemProgram.transfer instruction was added to the transaction, containing the amount of lamports to send, and the to and from public keys.All that is left is to sign the transaction with keypair and send it over the network. You can accomplish sending a transaction by using sendAndConfirmTransaction if you wish to alert the user or do something after a transaction is finished, or use sendTransaction if you don't need to wait for the transaction to be confirmed.const {  sendAndConfirmTransaction,  clusterApiUrl,  Connection,} = require("@solana/web3.js");let keypair = Keypair.generate();let connection = new Connection(clusterApiUrl("testnet"));sendAndConfirmTransaction(connection, transaction, [keypair]);The above code takes in a TransactionInstruction using SystemProgram, creates a Transaction, and sends it over the network. You use Connection in order to define which Solana network you are connecting to, namely mainnet-beta, testnet, or devnet.Interacting with Custom Programs​The previous section visits sending basic transactions. In Solana everything you do interacts with different programs, including the previous section's transfer transaction. At the time of writing programs on Solana are either written in Rust or C.Let's look at the SystemProgram. The method signature for allocating space in your account on Solana in Rust looks like this:pub fn allocate(    pubkey: &Pubkey,    space: u64) -> InstructionIn Solana when you want to interact with a program you must first know all the accounts you will be interacting with.You must always provide every account that the program will be interacting within the instruction. Not only that, but you must provide whether or not the account is isSigner or isWritable.In the allocate method above, a single account pubkey is required, as well as an amount of space for allocation. We know that the allocate method writes to the account by allocating space within it, making the pubkey required to be isWritable. isSigner is required when you are designating the account that is running the instruction. In this case, the signer is the account calling to allocate space within itself.Let's look at how to call this instruction using solana-web3.js:let keypair = web3.Keypair.generate();let payer = web3.Keypair.generate();let connection = new web3.Connection(web3.clusterApiUrl("testnet"));let airdropSignature = await connection.requestAirdrop(  payer.publicKey,  web3.LAMPORTS_PER_SOL,);await connection.confirmTransaction({ signature: airdropSignature });First, we set up the account Keypair and connection so that we have an account to make allocate on the testnet. We also create a payer Keypair and airdrop some sol so we can pay for the allocate transaction.let allocateTransaction = new web3.Transaction({  feePayer: payer.publicKey,});let keys = [{ pubkey: keypair.publicKey, isSigner: true, isWritable: true }];let params = { space: 100 };We create the transaction allocateTransaction, keys, and params objects. feePayer is an optional field when creating a transaction that specifies who is paying for the transaction, defaulting to the pubkey of the first signer in the transaction. keys represents all accounts that the program's allocate function will interact with. Since the allocate function also required space, we created params to be used later when invoking the allocate function.let allocateStruct = {  index: 8,  layout: struct([u32("instruction"), ns64("space")]),};The above is created using u32 and ns64 from @solana/buffer-layout to facilitate the payload creation. The allocate function takes in the parameter space. To interact with the function we must provide the data as a Buffer format. The buffer-layout library helps with allocating the buffer and encoding it correctly for Rust programs on Solana to interpret.Let's break down this struct.{  index: 8, /* <-- */  layout: struct([    u32('instruction'),    ns64('space'),  ])}index is set to 8 because the function allocate is in the 8th position in the instruction enum for SystemProgram./* https://github.com/solana-labs/solana/blob/21bc43ed58c63c827ba4db30426965ef3e807180/sdk/program/src/system_instruction.rs#L142-L305 */pub enum SystemInstruction {    /** 0 **/CreateAccount {/**/},    /** 1 **/Assign {/**/},    /** 2 **/Transfer {/**/},    /** 3 **/CreateAccountWithSeed {/**/},    /** 4 **/AdvanceNonceAccount,    /** 5 **/WithdrawNonceAccount(u64),    /** 6 **/InitializeNonceAccount(Pubkey),    /** 7 **/AuthorizeNonceAccount(Pubkey),    /** 8 **/Allocate {/**/},    /** 9 **/AllocateWithSeed {/**/},    /** 10 **/AssignWithSeed {/**/},    /** 11 **/TransferWithSeed {/**/},    /** 12 **/UpgradeNonceAccount,}Next up is u32('instruction').{  index: 8,  layout: struct([    u32('instruction'), /* <-- */    ns64('space'),  ])}The layout in the allocate struct must always have u32('instruction') first when you are using it to call an instruction.{  index: 8,  layout: struct([    u32('instruction'),    ns64('space'), /* <-- */  ])}ns64('space') is the argument for the allocate function. You can see in the original allocate function in Rust that space was of the type u64. u64 is an unsigned 64bit integer. Javascript by default only provides up to 53bit integers. ns64 comes from @solana/buffer-layout to help with type conversions between Rust and Javascript. You can find more type conversions between Rust and Javascript at solana-labs/buffer-layout.let data = Buffer.alloc(allocateStruct.layout.span);let layoutFields = Object.assign({ instruction: allocateStruct.index }, params);allocateStruct.layout.encode(layoutFields, data);Using the previously created bufferLayout, we can allocate a data buffer. We then assign our params { space: 100 } so that it maps correctly to the layout, and encode it to the data buffer. Now the data is ready to be sent to the program.allocateTransaction.add(  new web3.TransactionInstruction({    keys,    programId: web3.SystemProgram.programId,    data,  }),);await web3.sendAndConfirmTransaction(connection, allocateTransaction, [  payer,  keypair,]);Finally, we add the transaction instruction with all the account keys, payer, data, and programId and broadcast the transaction to the network.The full code can be found below.const { struct, u32, ns64 } = require("@solana/buffer-layout");const { Buffer } = require("buffer");const web3 = require("@solana/web3.js");let keypair = web3.Keypair.generate();let payer = web3.Keypair.generate();let connection = new web3.Connection(web3.clusterApiUrl("testnet"));let airdropSignature = await connection.requestAirdrop(  payer.publicKey,  web3.LAMPORTS_PER_SOL,);await connection.confirmTransaction({ signature: airdropSignature });let allocateTransaction = new web3.Transaction({  feePayer: payer.publicKey,});let keys = [{ pubkey: keypair.publicKey, isSigner: true, isWritable: true }];let params = { space: 100 };let allocateStruct = {  index: 8,  layout: struct([u32("instruction"), ns64("space")]),};let data = Buffer.alloc(allocateStruct.layout.span);let layoutFields = Object.assign({ instruction: allocateStruct.index }, params);allocateStruct.layout.encode(layoutFields, data);allocateTransaction.add(  new web3.TransactionInstruction({    keys,    programId: web3.SystemProgram.programId,    data,  }),);await web3.sendAndConfirmTransaction(connection, allocateTransaction, [  payer,  keypair,]);Web3 API Reference Guide​The @solana/web3.js library is a package that has coverage over the Solana JSON RPC API.You can find the full documentation for the @solana/web3.js library here.General​Connection​Source DocumentationConnection is used to interact with the Solana JSON RPC. You can use Connection to confirm transactions, get account info, and more.You create a connection by defining the JSON RPC cluster endpoint and the desired commitment. Once this is complete, you can use this connection object to interact with any of the Solana JSON RPC API.Example Usage​const web3 = require("@solana/web3.js");let connection = new web3.Connection(web3.clusterApiUrl("devnet"), "confirmed");let slot = await connection.getSlot();console.log(slot);// 93186439let blockTime = await connection.getBlockTime(slot);console.log(blockTime);// 1630747045let block = await connection.getBlock(slot);console.log(block);/*{    blockHeight: null,    blockTime: 1630747045,    blockhash: 'AsFv1aV5DGip9YJHHqVjrGg6EKk55xuyxn2HeiN9xQyn',    parentSlot: 93186438,    previousBlockhash: '11111111111111111111111111111111',    rewards: [],    transactions: []}*/let slotLeader = await connection.getSlotLeader();console.log(slotLeader);//49AqLYbpJYc2DrzGUAH1fhWJy62yxBxpLEkfJwjKy2jrThe above example shows only a few of the methods on Connection. Please see the source generated docs for the full list.Transaction​SourceDocumentationA transaction is used to interact with programs on the Solana blockchain. These transactions are constructed with TransactionInstructions, containing all the accounts possible to interact with, as well as any needed data or program addresses. Each TransactionInstruction consists of keys, data, and a programId. You can do multiple instructions in a single transaction, interacting with multiple programs at once.Example Usage​const web3 = require("@solana/web3.js");const nacl = require("tweetnacl");// Airdrop SOL for paying transactionslet payer = web3.Keypair.generate();let connection = new web3.Connection(web3.clusterApiUrl("devnet"), "confirmed");let airdropSignature = await connection.requestAirdrop(  payer.publicKey,  web3.LAMPORTS_PER_SOL,);await connection.confirmTransaction({ signature: airdropSignature });let toAccount = web3.Keypair.generate();// Create Simple Transactionlet transaction = new web3.Transaction();// Add an instruction to executetransaction.add(  web3.SystemProgram.transfer({    fromPubkey: payer.publicKey,    toPubkey: toAccount.publicKey,    lamports: 1000,  }),);// Send and confirm transaction// Note: feePayer is by default the first signer, or payer, if the parameter is not setawait web3.sendAndConfirmTransaction(connection, transaction, [payer]);// Alternatively, manually construct the transactionlet recentBlockhash = await connection.getRecentBlockhash();let manualTransaction = new web3.Transaction({  recentBlockhash: recentBlockhash.blockhash,  feePayer: payer.publicKey,});manualTransaction.add(  web3.SystemProgram.transfer({    fromPubkey: payer.publicKey,    toPubkey: toAccount.publicKey,    lamports: 1000,  }),);let transactionBuffer = manualTransaction.serializeMessage();let signature = nacl.sign.detached(transactionBuffer, payer.secretKey);manualTransaction.addSignature(payer.publicKey, signature);let isVerifiedSignature = manualTransaction.verifySignatures();console.log(`The signatures were verifed: ${isVerifiedSignature}`);// The signatures were verified: truelet rawTransaction = manualTransaction.serialize();await web3.sendAndConfirmRawTransaction(connection, rawTransaction);Keypair​Source DocumentationThe keypair is used to create an account with a public key and secret key within Solana. You can either generate, generate from a seed, or create from a secret key.Example Usage​const { Keypair } = require("@solana/web3.js");let account = Keypair.generate();console.log(account.publicKey.toBase58());console.log(account.secretKey);// 2DVaHtcdTf7cm18Zm9VV8rKK4oSnjmTkKE6MiXe18Qsb// Uint8Array(64) [//   152,  43, 116, 211, 207,  41, 220,  33, 193, 168, 118,//    24, 176,  83, 206, 132,  47, 194,   2, 203, 186, 131,//   197, 228, 156, 170, 154,  41,  56,  76, 159, 124,  18,//    14, 247,  32, 210,  51, 102,  41,  43,  21,  12, 170,//   166, 210, 195, 188,  60, 220, 210,  96, 136, 158,   6,//   205, 189, 165, 112,  32, 200, 116, 164, 234// ]let seed = Uint8Array.from([  70, 60, 102, 100, 70, 60, 102, 100, 70, 60, 102, 100, 70, 60, 102, 100, 70,  60, 102, 100, 70, 60, 102, 100, 70, 60, 102, 100, 70, 60, 102, 100,]);let accountFromSeed = Keypair.fromSeed(seed);console.log(accountFromSeed.publicKey.toBase58());console.log(accountFromSeed.secretKey);// 3LDverZtSC9Duw2wyGC1C38atMG49toPNW9jtGJiw9Ar// Uint8Array(64) [//    70,  60, 102, 100,  70,  60, 102, 100,  70,  60, 102,//   100,  70,  60, 102, 100,  70,  60, 102, 100,  70,  60,//   102, 100,  70,  60, 102, 100,  70,  60, 102, 100,  34,//   164,   6,  12,   9, 193, 196,  30, 148, 122, 175,  11,//    28, 243, 209,  82, 240, 184,  30,  31,  56, 223, 236,//   227,  60,  72, 215,  47, 208, 209, 162,  59// ]let accountFromSecret = Keypair.fromSecretKey(account.secretKey);console.log(accountFromSecret.publicKey.toBase58());console.log(accountFromSecret.secretKey);// 2DVaHtcdTf7cm18Zm9VV8rKK4oSnjmTkKE6MiXe18Qsb// Uint8Array(64) [//   152,  43, 116, 211, 207,  41, 220,  33, 193, 168, 118,//    24, 176,  83, 206, 132,  47, 194,   2, 203, 186, 131,//   197, 228, 156, 170, 154,  41,  56,  76, 159, 124,  18,//    14, 247,  32, 210,  51, 102,  41,  43,  21,  12, 170,//   166, 210, 195, 188,  60, 220, 210,  96, 136, 158,   6,//   205, 189, 165, 112,  32, 200, 116, 164, 234// ]Using generate generates a random Keypair for use as an account on Solana. Using fromSeed, you can generate a Keypair using a deterministic constructor. fromSecret creates a Keypair from a secret Uint8array. You can see that the publicKey for the generate Keypair and fromSecret Keypair are the same because the secret from the generate Keypair is used in fromSecret.Warning: Do not use fromSeed unless you are creating a seed with high entropy. Do not share your seed. Treat the seed like you would a private key.PublicKey​Source DocumentationPublicKey is used throughout @solana/web3.js in transactions, keypairs, and programs. You require publickey when listing each account in a transaction and as a general identifier on Solana.A PublicKey can be created with a base58 encoded string, buffer, Uint8Array, number, and an array of numbers.Example Usage​const { Buffer } = require("buffer");const web3 = require("@solana/web3.js");const crypto = require("crypto");// Create a PublicKey with a base58 encoded stringlet base58publicKey = new web3.PublicKey(  "5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj",);console.log(base58publicKey.toBase58());// 5xot9PVkphiX2adznghwrAuxGs2zeWisNSxMW6hU6Hkj// Create a Program Addresslet highEntropyBuffer = crypto.randomBytes(31);let programAddressFromKey = await web3.PublicKey.createProgramAddress(  [highEntropyBuffer.slice(0, 31)],  base58publicKey,);console.log(`Generated Program Address: ${programAddressFromKey.toBase58()}`);// Generated Program Address: 3thxPEEz4EDWHNxo1LpEpsAxZryPAHyvNVXJEJWgBgwJ// Find Program address given a PublicKeylet validProgramAddress = await web3.PublicKey.findProgramAddress(  [Buffer.from("", "utf8")],  programAddressFromKey,);console.log(`Valid Program Address: ${validProgramAddress}`);// Valid Program Address: C14Gs3oyeXbASzwUpqSymCKpEyccfEuSe8VRar9vJQRE,253SystemProgram​SourceDocumentationThe SystemProgram grants the ability to create accounts, allocate account data, assign an account to programs, work with nonce accounts, and transfer lamports. You can use the SystemInstruction class to help with decoding and reading individual instructionsExample Usage​const web3 = require("@solana/web3.js");// Airdrop SOL for paying transactionslet payer = web3.Keypair.generate();let connection = new web3.Connection(web3.clusterApiUrl("devnet"), "confirmed");let airdropSignature = await connection.requestAirdrop(  payer.publicKey,  web3.LAMPORTS_PER_SOL,);await connection.confirmTransaction({ signature: airdropSignature });// Allocate Account Datalet allocatedAccount = web3.Keypair.generate();let allocateInstruction = web3.SystemProgram.allocate({  accountPubkey: allocatedAccount.publicKey,  space: 100,});let transaction = new web3.Transaction().add(allocateInstruction);await web3.sendAndConfirmTransaction(connection, transaction, [  payer,  allocatedAccount,]);// Create Nonce Accountlet nonceAccount = web3.Keypair.generate();let minimumAmountForNonceAccount =  await connection.getMinimumBalanceForRentExemption(web3.NONCE_ACCOUNT_LENGTH);let createNonceAccountTransaction = new web3.Transaction().add(  web3.SystemProgram.createNonceAccount({    fromPubkey: payer.publicKey,    noncePubkey: nonceAccount.publicKey,    authorizedPubkey: payer.publicKey,    lamports: minimumAmountForNonceAccount,  }),);await web3.sendAndConfirmTransaction(  connection,  createNonceAccountTransaction,  [payer, nonceAccount],);// Advance nonce - Used to create transactions as an account custodianlet advanceNonceTransaction = new web3.Transaction().add(  web3.SystemProgram.nonceAdvance({    noncePubkey: nonceAccount.publicKey,    authorizedPubkey: payer.publicKey,  }),);await web3.sendAndConfirmTransaction(connection, advanceNonceTransaction, [  payer,]);// Transfer lamports between accountslet toAccount = web3.Keypair.generate();let transferTransaction = new web3.Transaction().add(  web3.SystemProgram.transfer({    fromPubkey: payer.publicKey,    toPubkey: toAccount.publicKey,    lamports: 1000,  }),);await web3.sendAndConfirmTransaction(connection, transferTransaction, [payer]);// Assign a new account to a programlet programId = web3.Keypair.generate();let assignedAccount = web3.Keypair.generate();let assignTransaction = new web3.Transaction().add(  web3.SystemProgram.assign({    accountPubkey: assignedAccount.publicKey,    programId: programId.publicKey,  }),);await web3.sendAndConfirmTransaction(connection, assignTransaction, [  payer,  assignedAccount,]);Secp256k1Program​Source DocumentationThe Secp256k1Program is used to verify Secp256k1 signatures, which are used by both Bitcoin and Ethereum.Example Usage​const { keccak_256 } = require("js-sha3");const web3 = require("@solana/web3.js");const secp256k1 = require("secp256k1");// Create a Ethereum Address from secp256k1let secp256k1PrivateKey;do {  secp256k1PrivateKey = web3.Keypair.generate().secretKey.slice(0, 32);} while (!secp256k1.privateKeyVerify(secp256k1PrivateKey));let secp256k1PublicKey = secp256k1  .publicKeyCreate(secp256k1PrivateKey, false)  .slice(1);let ethAddress =  web3.Secp256k1Program.publicKeyToEthAddress(secp256k1PublicKey);console.log(`Ethereum Address: 0x${ethAddress.toString("hex")}`);// Ethereum Address: 0xadbf43eec40694eacf36e34bb5337fba6a2aa8ee// Fund a keypair to create instructionslet fromPublicKey = web3.Keypair.generate();let connection = new web3.Connection(web3.clusterApiUrl("devnet"), "confirmed");let airdropSignature = await connection.requestAirdrop(  fromPublicKey.publicKey,  web3.LAMPORTS_PER_SOL,);await connection.confirmTransaction({ signature: airdropSignature });// Sign Message with Ethereum Keylet plaintext = Buffer.from("string address");let plaintextHash = Buffer.from(keccak_256.update(plaintext).digest());let { signature, recid: recoveryId } = secp256k1.ecdsaSign(  plaintextHash,  secp256k1PrivateKey,);// Create transaction to verify the signaturelet transaction = new Transaction().add(  web3.Secp256k1Program.createInstructionWithEthAddress({    ethAddress: ethAddress.toString("hex"),    plaintext,    signature,    recoveryId,  }),);// Transaction will succeed if the message is verified to be signed by the addressawait web3.sendAndConfirmTransaction(connection, transaction, [fromPublicKey]);Message​Source DocumentationMessage is used as another way to construct transactions. You can construct a message using the accounts, header, instructions, and recentBlockhash that are a part of a transaction. A Transaction is a Message plus the list of required signatures required to execute the transaction.Example Usage​const { Buffer } = require("buffer");const bs58 = require("bs58");const web3 = require("@solana/web3.js");let toPublicKey = web3.Keypair.generate().publicKey;let fromPublicKey = web3.Keypair.generate();let connection = new web3.Connection(web3.clusterApiUrl("devnet"), "confirmed");let airdropSignature = await connection.requestAirdrop(  fromPublicKey.publicKey,  web3.LAMPORTS_PER_SOL,);await connection.confirmTransaction({ signature: airdropSignature });let type = web3.SYSTEM_INSTRUCTION_LAYOUTS.Transfer;let data = Buffer.alloc(type.layout.span);let layoutFields = Object.assign({ instruction: type.index });type.layout.encode(layoutFields, data);let recentBlockhash = await connection.getRecentBlockhash();let messageParams = {  accountKeys: [    fromPublicKey.publicKey.toString(),    toPublicKey.toString(),    web3.SystemProgram.programId.toString(),  ],  header: {    numReadonlySignedAccounts: 0,    numReadonlyUnsignedAccounts: 1,    numRequiredSignatures: 1,  },  instructions: [    {      accounts: [0, 1],      data: bs58.encode(data),      programIdIndex: 2,    },  ],  recentBlockhash,};let message = new web3.Message(messageParams);let transaction = web3.Transaction.populate(message, [  fromPublicKey.publicKey.toString(),]);await web3.sendAndConfirmTransaction(connection, transaction, [fromPublicKey]);Struct​SourceDocumentationThe struct class is used to create Rust compatible structs in javascript. This class is only compatible with Borsh encoded Rust structs.Example Usage​Struct in Rust:pub struct Fee {    pub denominator: u64,    pub numerator: u64,}Using web3:import BN from "bn.js";import { Struct } from "@solana/web3.js";export class Fee extends Struct {  denominator: BN;  numerator: BN;}Enum​Source DocumentationThe Enum class is used to represent a Rust compatible Enum in javascript. The enum will just be a string representation if logged but can be properly encoded/decoded when used in conjunction with Struct. This class is only compatible with Borsh encoded Rust enumerations.Example Usage​Rust:pub enum AccountType {    Uninitialized,    StakePool,    ValidatorList,}Web3:import { Enum } from "@solana/web3.js";export class AccountType extends Enum {}NonceAccount​Source DocumentationNormally a transaction is rejected if a transaction's recentBlockhash field is too old. To provide for certain custodial services, Nonce Accounts are used. Transactions which use a recentBlockhash captured on-chain by a Nonce Account do not expire as long at the Nonce Account is not advanced.You can create a nonce account by first creating a normal account, then using SystemProgram to make the account a Nonce Account.Example Usage​const web3 = require("@solana/web3.js");// Create connectionlet connection = new web3.Connection(web3.clusterApiUrl("devnet"), "confirmed");// Generate accountslet account = web3.Keypair.generate();let nonceAccount = web3.Keypair.generate();// Fund accountlet airdropSignature = await connection.requestAirdrop(  account.publicKey,  web3.LAMPORTS_PER_SOL,);await connection.confirmTransaction({ signature: airdropSignature });// Get Minimum amount for rent exemptionlet minimumAmount = await connection.getMinimumBalanceForRentExemption(  web3.NONCE_ACCOUNT_LENGTH,);// Form CreateNonceAccount transactionlet transaction = new web3.Transaction().add(  web3.SystemProgram.createNonceAccount({    fromPubkey: account.publicKey,    noncePubkey: nonceAccount.publicKey,    authorizedPubkey: account.publicKey,    lamports: minimumAmount,  }),);// Create Nonce Accountawait web3.sendAndConfirmTransaction(connection, transaction, [  account,  nonceAccount,]);let nonceAccountData = await connection.getNonce(  nonceAccount.publicKey,  "confirmed",);console.log(nonceAccountData);// NonceAccount {//   authorizedPubkey: PublicKey {//     _bn: <BN: 919981a5497e8f85c805547439ae59f607ea625b86b1138ea6e41a68ab8ee038>//   },//   nonce: '93zGZbhMmReyz4YHXjt2gHsvu5tjARsyukxD4xnaWaBq',//   feeCalculator: { lamportsPerSignature: 5000 }// }let nonceAccountInfo = await connection.getAccountInfo(  nonceAccount.publicKey,  "confirmed",);let nonceAccountFromInfo = web3.NonceAccount.fromAccountData(  nonceAccountInfo.data,);console.log(nonceAccountFromInfo);// NonceAccount {//   authorizedPubkey: PublicKey {//     _bn: <BN: 919981a5497e8f85c805547439ae59f607ea625b86b1138ea6e41a68ab8ee038>//   },//   nonce: '93zGZbhMmReyz4YHXjt2gHsvu5tjARsyukxD4xnaWaBq',//   feeCalculator: { lamportsPerSignature: 5000 }// }The above example shows both how to create a NonceAccount using SystemProgram.createNonceAccount, as well as how to retrieve the NonceAccount from accountInfo. Using the nonce, you can create transactions offline with the nonce in place of the recentBlockhash.VoteAccount​SourceDocumentationVote account is an object that grants the capability of decoding vote accounts from the native vote account program on the network.Example Usage​const web3 = require("@solana/web3.js");let voteAccountInfo = await connection.getProgramAccounts(web3.VOTE_PROGRAM_ID);let voteAccountFromData = web3.VoteAccount.fromAccountData(  voteAccountInfo[0].account.data,);console.log(voteAccountFromData);/*VoteAccount {  nodePubkey: PublicKey {    _bn: <BN: cf1c635246d4a2ebce7b96bf9f44cacd7feed5552be3c714d8813c46c7e5ec02>  },  authorizedWithdrawer: PublicKey {    _bn: <BN: b76ae0caa56f2b9906a37f1b2d4f8c9d2a74c1420cd9eebe99920b364d5cde54>  },  commission: 10,  rootSlot: 104570885,  votes: [    { slot: 104570886, confirmationCount: 31 },    { slot: 104570887, confirmationCount: 30 },    { slot: 104570888, confirmationCount: 29 },    { slot: 104570889, confirmationCount: 28 },    { slot: 104570890, confirmationCount: 27 },    { slot: 104570891, confirmationCount: 26 },    { slot: 104570892, confirmationCount: 25 },    { slot: 104570893, confirmationCount: 24 },    { slot: 104570894, confirmationCount: 23 },    ...  ],  authorizedVoters: [ { epoch: 242, authorizedVoter: [PublicKey] } ],  priorVoters: [      [Object], [Object], [Object],      [Object], [Object], [Object],      [Object], [Object], [Object],      [Object], [Object], [Object],      [Object], [Object], [Object],      [Object], [Object], [Object],      [Object], [Object], [Object],      [Object], [Object], [Object],      [Object], [Object], [Object],      [Object], [Object], [Object],      [Object], [Object]   ],  epochCredits: [    { epoch: 179, credits: 33723163, prevCredits: 33431259 },    { epoch: 180, credits: 34022643, prevCredits: 33723163 },    { epoch: 181, credits: 34331103, prevCredits: 34022643 },    { epoch: 182, credits: 34619348, prevCredits: 34331103 },    { epoch: 183, credits: 34880375, prevCredits: 34619348 },    { epoch: 184, credits: 35074055, prevCredits: 34880375 },    { epoch: 185, credits: 35254965, prevCredits: 35074055 },    { epoch: 186, credits: 35437863, prevCredits: 35254965 },    { epoch: 187, credits: 35672671, prevCredits: 35437863 },    { epoch: 188, credits: 35950286, prevCredits: 35672671 },    { epoch: 189, credits: 36228439, prevCredits: 35950286 },    ...  ],  lastTimestamp: { slot: 104570916, timestamp: 1635730116 }}*/Staking​StakeProgram​SourceDocumentationThe StakeProgram facilitates staking SOL and delegating them to any validators on the network. You can use StakeProgram to create a stake account, stake some SOL, authorize accounts for withdrawal of your stake, deactivate your stake, and withdraw your funds. The StakeInstruction class is used to decode and read more instructions from transactions calling the StakeProgramExample Usage​const web3 = require("@solana/web3.js");// Fund a key to create transactionslet fromPublicKey = web3.Keypair.generate();let connection = new web3.Connection(web3.clusterApiUrl("devnet"), "confirmed");let airdropSignature = await connection.requestAirdrop(  fromPublicKey.publicKey,  web3.LAMPORTS_PER_SOL,);await connection.confirmTransaction({ signature: airdropSignature });// Create Accountlet stakeAccount = web3.Keypair.generate();let authorizedAccount = web3.Keypair.generate();/* Note: This is the minimum amount for a stake account -- Add additional Lamports for staking    For example, we add 50 lamports as part of the stake */let lamportsForStakeAccount =  (await connection.getMinimumBalanceForRentExemption(    web3.StakeProgram.space,  )) + 50;let createAccountTransaction = web3.StakeProgram.createAccount({  fromPubkey: fromPublicKey.publicKey,  authorized: new web3.Authorized(    authorizedAccount.publicKey,    authorizedAccount.publicKey,  ),  lamports: lamportsForStakeAccount,  lockup: new web3.Lockup(0, 0, fromPublicKey.publicKey),  stakePubkey: stakeAccount.publicKey,});await web3.sendAndConfirmTransaction(connection, createAccountTransaction, [  fromPublicKey,  stakeAccount,]);// Check that stake is availablelet stakeBalance = await connection.getBalance(stakeAccount.publicKey);console.log(`Stake balance: ${stakeBalance}`);// Stake balance: 2282930// We can verify the state of our stake. This may take some time to become activelet stakeState = await connection.getStakeActivation(stakeAccount.publicKey);console.log(`Stake state: ${stakeState.state}`);// Stake state: inactive// To delegate our stake, we get the current vote accounts and choose the firstlet voteAccounts = await connection.getVoteAccounts();let voteAccount = voteAccounts.current.concat(voteAccounts.delinquent)[0];let votePubkey = new web3.PublicKey(voteAccount.votePubkey);// We can then delegate our stake to the voteAccountlet delegateTransaction = web3.StakeProgram.delegate({  stakePubkey: stakeAccount.publicKey,  authorizedPubkey: authorizedAccount.publicKey,  votePubkey: votePubkey,});await web3.sendAndConfirmTransaction(connection, delegateTransaction, [  fromPublicKey,  authorizedAccount,]);// To withdraw our funds, we first have to deactivate the stakelet deactivateTransaction = web3.StakeProgram.deactivate({  stakePubkey: stakeAccount.publicKey,  authorizedPubkey: authorizedAccount.publicKey,});await web3.sendAndConfirmTransaction(connection, deactivateTransaction, [  fromPublicKey,  authorizedAccount,]);// Once deactivated, we can withdraw our fundslet withdrawTransaction = web3.StakeProgram.withdraw({  stakePubkey: stakeAccount.publicKey,  authorizedPubkey: authorizedAccount.publicKey,  toPubkey: fromPublicKey.publicKey,  lamports: stakeBalance,});await web3.sendAndConfirmTransaction(connection, withdrawTransaction, [  fromPublicKey,  authorizedAccount,]);Source DocumentationAuthorized is an object used when creating an authorized account for staking within Solana. You can designate a staker and withdrawer separately, allowing for a different account to withdraw other than the staker.You can find more usage of the Authorized object under StakeProgramLockup​Source DocumentationLockup is used in conjunction with the StakeProgram to create an account. The Lockup is used to determine how long the stake will be locked, or unable to be retrieved. If the Lockup is set to 0 for both epoch and the Unix timestamp, the lockup will be disabled for the stake account.Example Usage​const {  Authorized,  Keypair,  Lockup,  StakeProgram,} = require("@solana/web3.js");let account = Keypair.generate();let stakeAccount = Keypair.generate();let authorized = new Authorized(account.publicKey, account.publicKey);let lockup = new Lockup(0, 0, account.publicKey);let createStakeAccountInstruction = StakeProgram.createAccount({  fromPubkey: account.publicKey,  authorized: authorized,  lamports: 1000,  lockup: lockup,  stakePubkey: stakeAccount.publicKey,});The above code creates a createStakeAccountInstruction to be used when creating an account with the StakeProgram. The Lockup is set to 0 for both the epoch and Unix timestamp, disabling lockup for the account.See StakeProgram for more.Solana's Rust crates are published to crates.io and can be found
on docs.rs with the "solana-" prefix.Some important crates:solana-program — Imported by programs running on Solana, compiled
to BPF. This crate contains many fundamental data types and is re-exported from
solana-sdk, which cannot be imported from a Solana program.solana-sdk — The basic off-chain SDK, it re-exports
solana-program and adds more APIs on top of that. Most Solana programs
that do not run on-chain will import this.solana-client — For interacting with a Solana node via the
JSON RPC API.solana-cli-config — Loading and saving the Solana CLI configuration
file.solana-clap-utils — Routines for setting up a CLI, using clap,
as used by the main Solana CLI. Includes functions for loading all types of
signers supported by the CLI.Compressed NFTs on Solana use the
Bubblegum program from
Metaplex to cheaply and securely store NFT metadata using
State Compression.This developer guide will use JavaScript/TypeScript to demonstrate:how to create a tree for compressed NFTs,how to mint compressed NFTs into a tree,how to get compressed NFT metadata from the Read API,
andhow to transfer compressed NFTsIntro to Compressed NFTs​Compressed NFTs use State Compression and
merkle trees to
drastically reduce the storage cost for NFTs. Instead of storing an NFT's
metadata in a typical Solana account, compressed NFTs store the metadata within
the ledger. This allows compressed NFTs to still inherit the security and speed
of the Solana blockchain, while at the same time reducing the overall storage
costs.Even though the on-chain data storage mechanism is different than their
uncompressed counterparts, compressed NFTs still follow the exact same
Metadata
schema/structure. Allowing you to define your Collection and NFT in an identical
way.However, the process to mint and transfer compressed NFTs is different from
uncompressed NFTs. Aside from using a different on-chain program, compressed
NFTs are minting into a merkle tree and require verification of a "proof" to
transfer. More on this below.Compressed NFTs and indexers​Since compressed NFTs store all of their metadata in the
ledger, instead of in traditional
accounts like uncompressed NFTs, we will need to
help of indexing services to quickly fetch our compressed NFT's metadata.Supporting RPC providers are using the Digital Asset Standard Read API (or "Read
API" for short) to add additional RPC methods that developers can call. These
additional, NFT oriented methods, are loaded with all the information about
particular NFTs. Including support for BOTH compressed NFTs AND
uncompressed NFTs.Metadata is secured by the ledger and cached by indexersSince validators do not keep a very long history of the recent ledger data,
these indexers effectively "cache" the compressed NFT metadata passed through
the Solana ledger. Quickly serving it back on request to improve speed and user
experience of applications.However, since the metadata was already secured by the ledger when minting the
compressed NFT, anyone could re-index the metadata directly from the secure
ledger. Allowing for independent verification of the data, should the need or
desire arise.These indexing services are already available from some of the common RPC
providers, with more rolling out support in the near future. To name a few of
the RPC providers that already support the Read API:HeliusTritonSimpleHashHow to mint compressed NFTs​The process to create or mint compressed NFTs on Solana is similar to creating a
"traditional NFT collection", with a few differences. The mint process will
happen in 3 primary steps:create an NFT collection (or use an existing one)create a
concurrent merkle tree
(using the @solana/spl-account-compression SDK)mint compressed NFTs into your tree (to any owner's address you want)How to transfer a compressed NFT​Once your compressed NFT exists on the Solana blockchain, the process to
transfer ownership of a compressed NFT happens in a few broad steps:get the NFT "asset" information (from the indexer)get the NFT's "proof" (from the indexer)get the Merkle tree account (from the Solana blockchain)prepare the asset proof (by parsing and formatting it)build and send the transfer instructionThe first three steps primarily involve gathering specific pieces of information
(the proof and the tree's canopy depth) for the NFT to be transferred. These
pieces of information are needed to correctly parse/format the proof to
actually be sent within the transfer instruction itself.Getting started​For this guide, we are going to make a few assumptions about the compressed NFT
collection we are going to create:we are going to use TypeScript and NodeJS for this examplewe will use a single, new Metaplex collectionProject Setup​Before we start creating our compressed NFT collection, we need to install a few
packages:@solana/web3.js - the base
Solana JS SDK for interacting with the blockchain, including making our RPC
connection and sending transactions@solana/spl-token - used
in creating our collection and mint on-chain@solana/spl-account-compression -
used to create the on-chain tree to store our compressed NFTs@metaplex-foundation/mpl-bubblegum -
used to get the types and helper functions for minting and transferring
compressed NFTs on-chain@metaplex-foundation/mpl-token-metadata -
used to get the types and helper functions for our NFT's metadataUsing your preferred package manager (e.g. npm, yarn, pnpm, etc), install these
packages into your project:yarn add @solana/web3.js @solana/spl-token @solana/spl-account-compressionyarn add @metaplex-foundation/mpl-bubblegum @metaplex-foundation/mpl-token-metadataCreate a Collection​NFTs are normally grouped together into a
Collection
using the Metaplex standard. This is true for BOTH traditional NFTs AND
compressed NFTs. The NFT Collection will store all the broad metadata for our
NFT grouping, such as the collection image and name that will appear in wallets
and explorers.Under the hood, an NFT collection acts similar to any other token on Solana.
More specifically, a Collection is effectively a uncompressed NFT. So we
actually create them following the same process of creating an
SPL token:create a new token "mint"create a associated token account (ata) for our token mintactually mint a single single tokenstore the collection's metadata in an Account on-chainSince NFT Collections having nothing special to do with
State Compression or
compressed NFTs, we will not cover creating one in this
guide.Collection addresses​Even though this guide does not cover creating one, we will need the many of the
various addresses for your Collection, including:collectionAuthority - this may be your payer but it also might not becollectionMint - the collection's mint addresscollectionMetadata - the collection's metadata accounteditionAccount - for example, the masterEditionAccount created for your
collectionCreate a tree​One of the most important decisions to make when creating compressed NFTs is
how to setup your tree.
Especially since the values used to size your tree will determine the overall
cost of creation, and CANNOT be changed after creation.cautionA tree is NOT the same thing as a collection. A single collection can use
any number of trees. In fact, this is usually recommended for larger
collections due to smaller trees having greater composability.Conversely, even though a tree could be used in multiple collections, it is
generally considered an anti-pattern and is not recommended.Using the helper functions provided by the
@solana/spl-account-compression
SDK, we can create our tree in the following steps:decide on our tree sizegenerate a new Keypair and allocated space for the tree on-chainactually create the tree (making it owned by the Bubblegum program)Size your tree​Your tree size is set by 3 values, each serving a very specific purpose:maxDepth - used to determine how many NFTs we can have in the treemaxBufferSize - used to determine how many updates to your tree are
possible in the same blockcanopyDepth - used to store a portion of the proof on chain, and as such is
a large of cost and composability of your compressed NFT collectionLet's assume we are going to create a compressed NFT collection with 10k NFTs in
it. And since our collection is relatively small, we only need a single smaller
tree to store all the NFTs:// define the depth and buffer size of our tree to be createdconst maxDepthSizePair: ValidDepthSizePair = {  // max=16,384 nodes (for a `maxDepth` of 14)  maxDepth: 14,  maxBufferSize: 64,};// define the canopy depth of our tree to be createdconst canopyDepth = 10;Setting a maxDepth of 14 will allow our tree to hold up to 16,384
compressed NFTs, more than exceeding our 10k collection size.Since only specific
ValidDepthSizePair
pairs are allowed, simply set the maxBufferSize to the corresponding value
tied to your desired maxDepth.Next, setting canopyDepth of 10 tells our tree to store 10 of our "proof
node hashes" on-chain. Thus requiring us to always include 4 proof node values
(i.e. maxDepth - canopyDepth) in every compressed NFT transfer instruction.Generate addresses for the tree​When creating a new tree, we need to generate a new
Keypair address for the tree to have:const treeKeypair = Keypair.generate();Since our tree will be used for compressed NFTs, we will also need to derive an
Account with authority that is owned by the Bubblegum program (i.e. PDA):// derive the tree's authority (PDA), owned by Bubblegumconst [treeAuthority, _bump] = PublicKey.findProgramAddressSync(  [treeKeypair.publicKey.toBuffer()],  BUBBLEGUM_PROGRAM_ID,);Build the tree creation instructions​With our tree size values defined, and our addresses generated, we need to build
two related instructions:allocate enough space on-chain for our treeactually create the tree, owned by the Bubblegum programUsing the
createAllocTreeIx
helper function, we allocate enough space on-chain for our tree.// allocate the tree's account on chain with the `space`const allocTreeIx = await createAllocTreeIx(  connection,  treeKeypair.publicKey,  payer.publicKey,  maxDepthSizePair,  canopyDepth,);Then using the
createCreateTreeInstruction
from the Bubblegum SDK, we actually create the tree on-chain. Making it owned by
the Bubblegum program.// create the instruction to actually create the treeconst createTreeIx = createCreateTreeInstruction(  {    payer: payer.publicKey,    treeCreator: payer.publicKey,    treeAuthority,    merkleTree: treeKeypair.publicKey,    compressionProgram: SPL_ACCOUNT_COMPRESSION_PROGRAM_ID,    // NOTE: this is used for some on chain logging    logWrapper: SPL_NOOP_PROGRAM_ID,  },  {    maxBufferSize: maxDepthSizePair.maxBufferSize,    maxDepth: maxDepthSizePair.maxDepth,    public: false,  },  BUBBLEGUM_PROGRAM_ID,);Build and send the transaction​With our two instructions built, we can add them into a transaction and send
them to the blockchain, making sure both the payer and generated treeKeypair
sign the transaction:// build the transactionconst tx = new Transaction().add(allocTreeIx).add(createTreeIx);tx.feePayer = payer.publicKey;// send the transactionconst txSignature = await sendAndConfirmTransaction(  connection,  tx,  // ensuring the `treeKeypair` PDA and the `payer` are BOTH signers  [treeKeypair, payer],  {    commitment: "confirmed",    skipPreflight: true,  },);After a few short moments, and once the transaction is confirmed, we are ready
to start minting compressed NFTs into our tree.Mint compressed NFTs​Since compressed NFTs follow the same Metaplex
metadata standards
as traditional NFTs, we can define our actual NFTs data the same way.The primary difference is that with compressed NFTs the metadata is actually
stored in the ledger (unlike traditional NFTs that store them in accounts). The
metadata gets "hashed" and stored in our tree, and by association, secured by
the Solana ledger.Allowing us to cryptographically verify that our original metadata has not
changed (unless we want it to).infoLearn more about how State Compression uses
concurrent merkle trees
to cryptographically secure off-chain data using the Solana ledger.Define our NFT's metadata​We can define the specific metadata for the single NFT we are about to mint:const compressedNFTMetadata: MetadataArgs = {  name: "NFT Name",  symbol: "ANY",  // specific json metadata for each NFT  uri: "https://supersweetcollection.notarealurl/token.json",  creators: null,  editionNonce: 0,  uses: null,  collection: null,  primarySaleHappened: false,  sellerFeeBasisPoints: 0,  isMutable: false,  // these values are taken from the Bubblegum package  tokenProgramVersion: TokenProgramVersion.Original,  tokenStandard: TokenStandard.NonFungible,};In this demo, the key pieces of our NFT's metadata to note are:name - this is the actual name of our NFT that will be displayed in wallets
and on explorers.uri - this is the address for your NFTs metadata JSON file.creators - for this example, we are not storing a list of creators. If you
want your NFTs to have royalties, you will need to store actual data here. You
can checkout the Metaplex docs for more info on it.Derive the Bubblegum signer​When minting new compressed NFTs, the Bubblegum program needs a PDA to perform a
cross-program invocation
(cpi) to the SPL compression program.cautionThis bubblegumSigner PDA is derived using a hard coded seed string of
collection_cpi and owned by the Bubblegum program. If this hard coded value is
not provided correctly, your compressed NFT minting will fail.Below, we derive this PDA using the required hard coded seed string of
collection_cpi:// derive a PDA (owned by Bubblegum) to act as the signer of the compressed mintingconst [bubblegumSigner, _bump2] = PublicKey.findProgramAddressSync(  // `collection_cpi` is a custom prefix required by the Bubblegum program  [Buffer.from("collection_cpi", "utf8")],  BUBBLEGUM_PROGRAM_ID,);Create the mint instruction​Now we should have all the information we need to actually mint our compressed
NFT.Using the createMintToCollectionV1Instruction helper function provided in the
Bubblegum SDK, we can craft the instruction to actually mint our compressed NFT
directly into our collection.If you have minted traditional NFTs on Solana, this will look fairly similar. We
are creating a new instruction, giving several of the account addresses you
might expect (e.g. the payer, tokenMetadataProgram, and various collection
addresses), and then some tree specific addresses.The addresses to pay special attention to are:leafOwner - this will be the owner of the compressed NFT. You can either
mint it your self (i.e. the payer), or airdrop to any other Solana addressleafDelegate - this is the delegated authority of this specific NFT we are
about to mint. If you do not want to have a delegated authority for the NFT we
are about to mint, then this value should be set to the same address of
leafOwner.const compressedMintIx = createMintToCollectionV1Instruction(  {    payer: payer.publicKey,    merkleTree: treeAddress,    treeAuthority,    treeDelegate: payer.publicKey,    // set the receiver of the NFT    leafOwner: receiverAddress || payer.publicKey,    // set a delegated authority over this NFT    leafDelegate: payer.publicKey,    // collection details    collectionAuthority: payer.publicKey,    collectionAuthorityRecordPda: BUBBLEGUM_PROGRAM_ID,    collectionMint: collectionMint,    collectionMetadata: collectionMetadata,    editionAccount: collectionMasterEditionAccount,    // other accounts    bubblegumSigner: bubblegumSigner,    compressionProgram: SPL_ACCOUNT_COMPRESSION_PROGRAM_ID,    logWrapper: SPL_NOOP_PROGRAM_ID,    tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,  },  {    metadataArgs: Object.assign(compressedNFTMetadata, {      collection: { key: collectionMint, verified: false },    }),  },);Some of the other tree specific addresses are:merkleTree - the address of our tree we createdtreeAuthority - the authority of the treetreeDelegate - the delegated authority of the entire treeThen we also have all of our NFT collection's addresses, including the mint
address, metadata account, and edition account. These addresses are also
standard to pass in when minting uncompressed NFTs.Sign and send the transaction​Once our compressed mint instruction has been created, we can add it to a
transaction and send it to the Solana network:const tx = new Transaction().add(compressedMintIx);tx.feePayer = payer.publicKey;// send the transaction to the clusterconst txSignature = await sendAndConfirmTransaction(connection, tx, [payer], {  commitment: "confirmed",  skipPreflight: true,});With the help of a supporting RPC provider, developers can use the Digital Asset
Standard Read API (or "Read API" for short) to fetch the metadata of NFTs.infoThe Read API supports both compressed NFTs and traditional/uncompressed NFTs.
You can use the same RPC endpoints to retrieve all the assorted information for
both types of NFTs, including auto-fetching the NFTs' JSON URI.Using the Read API​When working with the Read API and a supporting RPC provider, developers can
make POST requests to the RPC endpoint using your preferred method of making
such requests (e.g. curl, JavaScript fetch(), etc).Asset IDWithin the Read API, digital assets (i.e. NFTs) are indexed by their id. This
asset id value differs slightly between traditional NFTs and compressed NFTs:for traditional/uncompressed NFTs: this is the token's address for the actual
Account on-chain that stores the metadata for the asset.for compressed NFTs: this is the id of the compressed NFT within the tree
and is NOT an actual on-chain Account address. While a compressed NFT's
assetId resembles a traditional Solana Account address, it is not.Common Read API Methods​While the Read API supports more than these listed below, the most commonly used
methods are:getAsset - get a specific NFT asset by its idgetAssetProof - returns the merkle proof that is required to transfer a
compressed NFT, by its asset idgetAssetsByOwner - get the assets owned by a specific addressgetAssetsByGroup - get the assets by a specific grouping (i.e. a collection)Read API Methods, Schema, and SpecificationExplore all the additional RPC methods added by Digital Asset Standard Read API
on Metaplex's RPC Playground. Here you
will also find the expected inputs and response schema for each supported RPC
method.Example Read API Request​For demonstration, below is an example request for the getAsset method using
the
JavaScript Fetch API,
which is built into modern JavaScript runtimes:// make a POST request to the RPC using the JavaScript `fetch` apiconst response = await fetch(rpcEndpointUrl, {  method: "POST",  headers: {    "Content-Type": "application/json",  },  body: JSON.stringify({    jsonrpc: "2.0",    id: "rpd-op-123",    method: "getAsset",    params: {      id: "5q7qQ4FWYyj4vnFrivRBe6beo6p88X8HTkkyVPjPkQmF",    },  }),});Example Read API Response​With a successful response from the RPC, you should seem similar data to this:{  interface: 'V1_NFT',  id: '5q7qQ4FWYyj4vnFrivRBe6beo6p88X8HTkkyVPjPkQmF',  content: [Object],  authorities: [Array],  compression: [Object],  grouping: [],  royalty: [Object],  creators: [],  ownership: [Object],  supply: [Object],  mutable: false}The response fields to pay special attention to are:id - this is your asset's idgrouping - can tell you the collection address that the NFT belongs to. The
collection address will be the group_value.metadata - contains the actual metadata for the NFT, including the auto
fetched JSON uri set when the NFT was mintedownership - gives you the NFT owner's address (and also if the NFT has
delegated authority to another address)compression - tells you if this NFT is actually using compression or not.
For compressed NFTs, this will also give you the tree address that is storing
the compressed NFT on chain.cautionSome of the returned values may be empty if the NFT is not a compressed NFT,
such as many of the compression fields. This is expected.Transfer compressed NFTs​Transferring compressed NFTs is different from transferring uncompressed NFTs.
Aside from using a different on-chain program, compressed NFTs require the use
of a asset's "merkle proof" (or proof for short) to actually change ownership.What is a merkle proof?An asset's "merkle proof" is a listing of all the "adjacent hashes" within the
tree that are required to validate a specific leaf within said tree.These proof hashes themselves, and the specific asset's leaf data, are hashed
together in a deterministic way to compute the "root hash". Therefore, allowing
for cryptographic validation of an asset within the merkle tree.NOTE: While each of these hash values resemble a Solana Account's
address/public key, they are not
addresses.Transferring ownership of a compressed NFT happens in 5 broad steps:get the NFT's "asset" data (from the indexer)get the NFT's proof (from the indexer)get the Merkle tree account (directly from the Solana blockchain)prepare the asset proofbuild and send the transfer instructionThe first three steps primarily involve gathering specific pieces of information
(the proof and the tree's canopy depth) for the NFT to be transferred. These
pieces of information are needed to correctly parse/format the proof to
actually be sent within the transfer instruction itself.Get the asset​To perform the transfer of our compressed NFT, we will need to retrieve a few
pieces of information about the NFT.For starters, we will need to get some the asset's information in order to allow
the on-chain compression program to correctly perform validation and security
checks.We can use the getAsset RPC method to retrieve two important pieces of
information for the compressed NFT: the data_hash and creator_hash.Example response from the getAsset method​Below is an example response from the getAsset method:compression: {  eligible: false,  compressed: true,  data_hash: 'D57LAefACeaJesajt6VPAxY4QFXhHjPyZbjq9efrt3jP',  creator_hash: '6Q7xtKPmmLihpHGVBA6u1ENE351YKoyqd3ssHACfmXbn',  asset_hash: 'F3oDH1mJ47Z7tNBHvrpN5UFf4VAeQSwTtxZeJmn7q3Fh',  tree: 'BBUkS4LZQ7mU8iZXYLVGNUjSxCYnB3x44UuPVHVXS9Fo',  seq: 3,  leaf_id: 0}Get the asset proof​The next step in preparing your compressed NFT transfer instruction, is to get a
valid asset proof to perform the transfer. This proof is required by the
on-chain compression program to validate on-chain information.We can use the getAssetProof RPC method to retrieve two important pieces of
information:proof - the "full proof" that is required to perform the transfer (more on
this below)tree_id - the on-chain address of the compressed NFTs treeFull proof is returnedThe getAssetProof RPC method returns the complete listing of "proof hashes"
that are used to perform the compressed NFT transfer. Since this "full proof" is
returned from the RPC, we will need to remove the portion of the "full proof"
that is stored on-chain via the tree's canopy.Example response from the getAssetProof method​Below is an example response from the getAssetProof method:{  root: '7dy5bzgaRcUnNH2KMExwNXXNaCJnf7wQqxc2VrGXy9qr',  proof: [    'HdvzZ4hrPEdEarJfEzAavNJEZcCS1YU1fg2uBvQGwAAb',    ...    '3e2oBSLfSDVdUdS7jRGFKa8nreJUA9sFPEELrHaQyd4J'  ],  node_index: 131072,  leaf: 'F3oDH1mJ47Z7tNBHvrpN5UFf4VAeQSwTtxZeJmn7q3Fh',  tree_id: 'BBUkS4LZQ7mU8iZXYLVGNUjSxCYnB3x44UuPVHVXS9Fo'}Get the Merkle tree account​Since the getAssetProof will always return the "full proof", we will have to
reduce it down in order to remove the proof hashes that are stored on-chain in
the tree's canopy. But in order to remove the correct number of proof addresses,
we need to know the tree's canopyDepth.Once we have our compressed NFT's tree address (the tree_id value from
getAssetProof), we can use the
ConcurrentMerkleTreeAccount
class, from the @solana/spl-account-compression SDK:// retrieve the merkle tree's account from the blockchainconst treeAccount = await ConcurrentMerkleTreeAccount.fromAccountAddress(  connection,  treeAddress,);// extract the needed values for our transfer instructionconst treeAuthority = treeAccount.getAuthority();const canopyDepth = treeAccount.getCanopyDepth();For the transfer instruction, we will also need the current treeAuthority
address which we can also get via the treeAccount.Prepare the asset proof​With our "full proof" and canopyDepth values on hand, we can correctly format
the proof to be submitted within the transfer instruction itself.Since we will use the createTransferInstruction helper function from the
Bubblegum SDK to actually build our transfer instruction, we need to:remove the proof values that are already stored on-chain in the
tree's canopy, andconvert the remaining proof values into the valid AccountMeta structure that
the instruction builder function accepts// parse the list of proof addresses into a valid AccountMeta[]const proof: AccountMeta[] = assetProof.proof  .slice(0, assetProof.proof.length - (!!canopyDepth ? canopyDepth : 0))  .map((node: string) => ({    pubkey: new PublicKey(node),    isSigner: false,    isWritable: false,  }));In the TypeScript code example above, we are first taking a slice of our "full
proof", starting at the beginning of the array, and ensuring we only have
proof.length - canopyDepth number of proof values. This will remove the
portion of the proof that is already stored on-chain in the tree's canopy.Then we are structuring each of the remaining proof values as a valid
AccountMeta, since the proof is submitted on-chain in the form of "extra
accounts" within the transfer instruction.Build the transfer instruction​Finally, with all the required pieces of data about our tree and compressed
NFTs, and a correctly formatted proof, we are ready to actually create the
transfer instruction.Build your transfer instruction using the
createTransferInstruction
helper function from the Bubblegum SDK:// create the NFT transfer instruction (via the Bubblegum package)const transferIx = createTransferInstruction(  {    merkleTree: treeAddress,    treeAuthority,    leafOwner,    leafDelegate,    newLeafOwner,    logWrapper: SPL_NOOP_PROGRAM_ID,    compressionProgram: SPL_ACCOUNT_COMPRESSION_PROGRAM_ID,    anchorRemainingAccounts: proof,  },  {    root: [...new PublicKey(assetProof.root.trim()).toBytes()],    dataHash: [...new PublicKey(asset.compression.data_hash.trim()).toBytes()],    creatorHash: [      ...new PublicKey(asset.compression.creator_hash.trim()).toBytes(),    ],    nonce: asset.compression.leaf_id,    index: asset.compression.leaf_id,  },  BUBBLEGUM_PROGRAM_ID,);Aside from passing in our assorted Account addresses and the asset's proof, we
are converting the string values of our data_hash, creator_hash, root hash
into an array of bytes that is accepted by the createTransferInstruction
helper function.Since each of these hash values resemble and are formatted similar to
PublicKeys, we can use the
PublicKey
class in web3.js to convert them into a accepted byte array format.Send the transaction​With our transfer instructions built, we can add it into a transaction and send
it to the blockchain similar to before. Making sure either the current
leafOwner or the leafDelegate signs the transaction.noteAfter each successful transfer of a compressed NFT, the leafDelegate should
reset to an empty value. Meaning the specific asset will not have delegated
authority to an address other than its owner.And once confirmed by the cluster, we will have successfully transferred a
compressed NFT.Example code repository​You can find an example code repository for this developer guide on the Solana
Developers GitHub: https://github.com/solana-developers/compressed-nftsSolana Programs, often referred to as "smart contracts" on other blockchains, are the executable code that interprets the instructions sent inside of each transaction on the blockchain. They can be deployed directly into the core of the network as Native Programs, or published by anyone as On Chain Programs. Programs are the core building blocks of the network and handle everything from sending tokens between wallets, to accepting votes of a DAOs, to tracking ownership of NFTs.Both types of programs run on top of the Sealevel runtime, which is Solana's parallel processing model that helps to enable the high transactions speeds of the blockchain.Key points​Programs are essentially special type of Accounts that is marked as "executable"Programs can own other AccountsPrograms can only change the data or debit accounts they ownAny program can read or credit another accountPrograms are considered stateless since the primary data stored in a program account is the compiled BPF codePrograms can be upgraded by their owner (see more on that below)Types of programs​The Solana blockchain has two types of programs:Native programsOn chain programsOn chain programs​These user written programs, often referred to as "smart contracts" on other blockchains, are deployed directly to the blockchain for anyone to interact with and execute. Hence the name "on chain"!In effect, "on chain programs" are any program that is not baked directly into the Solana cluster's core code (like the native programs discussed below).And even though Solana Labs maintains a small subset of these on chain programs (collectively known as the Solana Program Library), anyone can create or publish one. On chain programs can also be updated directly on the blockchain by the respective program's Account owner.Native programs​Native programs are programs that are built directly into the core of the Solana blockchain.Similar to other "on chain" programs in Solana, native programs can be called by any other program/user. However, they can only be upgraded as part of the core blockchain and cluster updates. These native program upgrades are controlled via the releases to the different clusters.Examples of native programs include:​System Program: Create new accounts, transfer tokens, and moreBPF Loader Program: Deploys, upgrades, and executes programs on chainVote program: Create and manage accounts that track validator voting state and rewards.Executable​When a Solana program is deployed onto the network, it is marked as "executable" by the BPF Loader Program. This allows the Solana runtime to efficiently and properly execute the compiled program code.Upgradable​Unlike other blockchains, Solana programs can be upgraded after they are deployed to the network.Native programs can only be upgraded as part of cluster updates when new software releases are made.On chain programs can be upgraded by the account that is marked as the "Upgrade Authority", which is usually the Solana account/address that deployed the program to begin with.The fee every Solana Account to store data on the blockchain is called "rent". This time and space based fee is required to keep an account, and its therefore its data, alive on the blockchain since clusters must actively maintain this data.All Solana Accounts (and therefore Programs) are required to maintain a high enough LAMPORT balance to become rent exempt and remain on the Solana blockchain.When an Account no longer has enough LAMPORTS to pay its rent, it will be removed from the network in a process known as Garbage Collection.Note: Rent is different from transactions fees. Rent is paid (or held in an Account) to keep data stored on the Solana blockchain. Where as transaction fees are paid to process instructions on the network.Rent rate​The Solana rent rate is set on a network wide basis, primarily based on the set LAMPORTS per byte per year.Currently, the rent rate is a static amount and stored in the the Rent sysvar.Rent exempt​Accounts that maintain a minimum LAMPORT balance greater than 2 years worth of rent payments are considered "rent exempt" and will not incur a rent collection.At the time of writing this, new Accounts and Programs are required to be initialized with enough LAMPORTS to become rent-exempt. The RPC endpoints have the ability to calculate this estimated rent exempt balance and is recommended to be used.Every time an account's balance is reduced, a check is performed to see if the account is still rent exempt. Transactions that would cause an account's balance to drop below the rent exempt threshold will fail.Garbage collection​Accounts that do not maintain their rent exempt status, or have a balance high enough to pay rent, are removed from the network in a process known as garbage collection. This process is done to help reduce the network wide storage of no longer used/maintained data.You can learn more about garbage collection here in this implemented proposal.Learn more about Rent​You can learn more about Solana Rent with the following articles and documentation:Implemented Proposals - RentImplemented Proposals - Account StorageThe small fees paid to process instructions on the Solana blockchain are known as "transaction fees".As each transaction (which contains one or more instructions) is sent through the network, it gets processed by the current leader validation-client. Once confirmed as a global state transaction, this transaction fee is paid to the network to help support the economic design of the Solana blockchain.NOTE: Transactions fees are different from the blockchain's data storage fee called rentTransaction Fee Calculation​Currently, the amount of resources consumed by a transaction do not impact fees in any way. This is because the runtime imposes a small cap on the amount of resources that transaction instructions can use, not to mention that the size of transactions is limited as well. So right now, transaction fees are solely determined by the number of signatures that need to be verified in a transaction. The only limit on the number of signatures in a transaction is the max size of transaction itself. Each signature (64 bytes) in a transaction (max 1232 bytes) must reference a unique public key (32 bytes) so a single transaction could contain as many as 12 signatures (not sure why you would do that). The fee per transaction signature can be fetched with the solana cli:$ solana feesBlockhash: 8eULQbYYp67o5tGF2gxACnBCKAE39TetbYYMGTx3iBFcLamports per signature: 5000Last valid block height: 94236543The solana cli fees subcommand calls the getFees RPC API method to retrieve the above output information, so your application can call that method directly as well:$ curl http://api.mainnet-beta.solana.com -H "Content-Type: application/json" -d '  {"jsonrpc":"2.0","id":1, "method":"getFees"}'# RESULT (lastValidSlot removed since it's inaccurate){  "jsonrpc": "2.0",  "result": {    "context": {      "slot": 106818885    },    "value": {      "blockhash": "78e3YBCMXJBiPD1HpyVtVfFzZFPG6nUycnQcyNMSUQzB",      "feeCalculator": {        "lamportsPerSignature": 5000      },      "lastValidBlockHeight": 96137823    }  },  "id": 1}Fee Determinism​It's important to keep in mind that fee rates (such as lamports_per_signature) are subject to change from block to block (though that hasn't happened in the full history of the mainnet-beta cluster). Despite the fact that fees can fluctuate, fees for a transaction can still be calculated deterministically when creating (and before signing) a transaction. This determinism comes from the fact that fees are applied using the rates from the block whose blockhash matches the recent_blockhash field in a transaction. Blockhashes can only be referenced by a transaction for a few minutes before they expire.Transactions with expired blockhashes will be ignored and dropped by the cluster, so it's important to understand how expiration actually works. Before transactions are added to a block and during block validation, each transaction's recent blockhash is checked to ensure it hasn't expired yet. The max age of a transaction's blockhash is only 150 blocks. This means that if no slots are skipped in between, the blockhash for block 100 would be usable by transactions processed in blocks 101 to 252, inclusive (during block 101 the age of block 100 is "0" and during block 252 its age is "150"). However, it's important to remember that slots may be skipped and that age checks use "block height" not "slot height". Since slots are skipped occasionally, the actual age of a blockhash can be a bit longer than 150 slots. At the time of writing, slot times are about 500ms and skip rate is about 5% so the expected lifetime of a transaction which uses the most recent blockhash is about 1min 19s.Fee Collection​Transactions are required to have at least one account which has signed the transaction and is writable. Writable signer accounts are serialized first in the list of transaction accounts and the first of these accounts is always used as the "fee payer".Before any transaction instructions are processed, the fee payer account balance will be deducted to pay for transaction fees. If the fee payer balance is not sufficient to cover transaction fees, the transaction will be dropped by the cluster. If the balance was sufficient, the fees will be deducted whether the transaction is processed successfully or not. In fact, if any of the transaction instructions return an error or violate runtime restrictions, all account changes except the transaction fee deduction will be rolled back.Fee Distribution​Transaction fees are partially burned and the remaining fees are collected by the validator that produced the block that the corresponding transactions were included in. The transaction fee burn rate was initialized as 50% when inflation rewards were enabled at the beginning of 2021 and has not changed so far. These fees incentivize a validator to process as many transactions as possible during its slots in the leader schedule. Collected fees are deposited in the validator's account (listed in the leader schedule for the current slot) after processing all of the transactions included in a block.Upcoming Changes​Transaction wide compute budget​As of version 1.8 of the Solana protocol, the maximum compute budget for transactions is assessed on a per instruction basis. This has allowed for flexibility in protocol design to squeeze out more compute by splitting up operations across multiple instructions but this workaround has skewed the distribution of compute consumption across different transactions. To keep transaction fees properly priced, the maximum compute budget will instead be assessed over the entire transaction. This change is likely to be released in version 1.9 of the Solana protocol and is gated on the following feature switch:$ ~/Workspace/solana (master branch) > cargo run --bin solana -- feature status 5ekBxc8itEnPv4NzGJtr8BVVQLNMQuLMNQQj7pHoLNZ9 --url mainnet-beta5ekBxc8itEnPv4NzGJtr8BVVQLNMQuLMNQQj7pHoLNZ9 | inactive | transaction wide compute capThis adjustment could negatively impact the usability of some protocols which have relied on the compute budget being reset for each instruction in a transaction. For this reason, this compute budget change will not be enabled until a new mechanism for increasing total transaction compute budget is added. This mechanism is described below...Request increased compute budget​As protocols have gotten more complex, the default compute budget of 200,000 compute units has become a common pain-point for developers. Developers have gotten creative in working around this limitation by breaking up operations across multiple instructions and/or transactions. But in order to properly address this issue, a new program instruction will be added to request additional compute units from the runtime (up to a max of 1 million compute units). To request more compute, create a RequestUnits instruction which invokes the new Compute Budget program and insert it at the beginning of a transaction. This new program will be released along with the transaction-wide compute budget change described above and is gated on the same feature switch. There are currently no increased transaction fees for using this feature, however that is likely to change.Note that adding a RequestUnits compute budget instruction will take up 39 extra bytes in a serialized transaction. That breaks down into 32 bytes for the compute budget program id, 1 byte for program id index, 1 byte for empty ix account vec len, 1 byte for data vec len, and 4 bytes for the requested compute.Calculate transaction fees with RPC API​In order to simplify fee calculation for developers, a new getFeeForMessage RPC API is planned to be released in v1.9 of the Solana protocol. This new method accepts a blockhash along with an encoded transaction message and will return the amount of fees that would be deducted if the transaction message is signed, sent, and processed by the cluster.Address Lookup Tables, commonly referred to as "lookup tables" or "ALTs" for short, allow developers to create a collection of related addresses to efficiently load more addresses in a single transaction.Since each transaction on the Solana blockchain requires a listing of every address that is interacted with as part of the transaction, this listing would be effectively be capped at 32 address per transaction. With the help of Address Lookup Tables, a transaction would be now be able to raise that limit to 256 addresses per transaction.Compressing on chain addresses​After all the desired address have been stored on chain in an Address Lookup Table, each address can be referenced inside a transaction by its 1-byte index within the table (instead of their full 32-byte address). This lookup method effectively "compresses" a 32-byte address into a 1-byte index value.This "compression" enables storing up to 256 address in a single lookup table for use inside any given transaction.Versioned Transactions​To utilize an Address Lookup Table inside a transaction, developers must use v0 transactions that were introduced with the new Versioned Transaction format.How to create an address lookup table​Creating a new lookup table with the @solana/web3.js library is similar to the older legacy transactions, but with some differences.Using the @solana/web3.js library, you can use the createLookupTable function to construct the instruction needed to create a new lookup table, as well as determine its address:const web3 = require("@solana/web3.js");// connect to a cluster and get the current `slot`const connection = new web3.Connection(web3.clusterApiUrl("devnet"));const slot = await connection.getSlot();// Assumption:// `payer` is a valid `Keypair` with enough SOL to pay for the executionconst [lookupTableInst, lookupTableAddress] =  web3.AddressLookupTableProgram.createLookupTable({    authority: payer.publicKey,    payer: payer.publicKey,    recentSlot: slot,  });console.log("lookup table address:", lookupTableAddress.toBase58());// To create the Address Lookup Table on chain:// send the `lookupTableInst` instruction in a transactionNOTE:
Address lookup tables can be created with either a v0 transaction or a legacy transaction. But the Solana runtime can only retrieve and handle the additional addresses within a lookup table while using v0 Versioned Transactions.Add addresses to a lookup table​Adding addresses to a lookup table is known as "extending". Using the the @solana/web3.js library, you can create a new extend instruction using the extendLookupTable method:// add addresses to the `lookupTableAddress` table via an `extend` instructionconst extendInstruction = web3.AddressLookupTableProgram.extendLookupTable({  payer: payer.publicKey,  authority: payer.publicKey,  lookupTable: lookupTableAddress,  addresses: [    payer.publicKey,    web3.SystemProgram.programId,    // list more `publicKey` addresses here  ],});// Send this `extendInstruction` in a transaction to the cluster// to insert the listing of `addresses` into your lookup table with address `lookupTableAddress`NOTE:
Due to the same memory limits of legacy transactions, any transaction used to extend an Address Lookup Table is also limited in how many addresses can be added at a time. Because of this, you will need to use multiple transactions to extend any table with more addresses (~20) that can fit withing a single transaction's memory limits.Once these address have been inserted into the table, and stored on chain, you will be able to utilize the Address Lookup Table in future transactions. Enabling up to 256 address in those future transactions.Fetch an Address Lookup Table​Similar to requesting another account (or PDA) from the cluster, you can fetch a complete Address Lookup Table with the getAddressLookupTable method:// define the `PublicKey` of the lookup table to fetchconst lookupTableAddress = new web3.PublicKey("");// get the table from the clusterconst lookupTableAccount = await connection  .getAddressLookupTable(lookupTableAddress)  .then((res) => res.value);// `lookupTableAccount` will now be a `AddressLookupTableAccount` objectconsole.log("Table address from cluster:", lookupTableAccount.key.toBase58());Our lookupTableAccount variable will now be a AddressLookupTableAccount object which we can parse to read the listing of all the addresses stored on chain in the lookup table:// loop through and parse all the address stored in the tablefor (let i = 0; i < lookupTableAccount.state.addresses.length; i++) {  const address = lookupTableAccount.state.addresses[i];  console.log(i, address.toBase58());}How to use an address lookup table in a transaction​After you have created your lookup table, and stored your needed address on chain (via extending the lookup table), you can create a v0 transaction to utilize the on chain lookup capabilities.Just like older legacy transactions, you can create all the instructions your transaction will execute on chain. You can then provide an array of these instructions to the Message used in the `v0 transaction.NOTE:
The instructions used inside a v0 transaction can be constructed using the same methods and functions used to create the instructions in the past. There is no required change to the instructions used involving an Address Lookup Table.// Assumptions:// - `arrayOfInstructions` has been created as an `array` of `TransactionInstruction`// - we are are using the `lookupTableAccount` obtained above// construct a v0 compatible transaction `Message`const messageV0 = new web3.TransactionMessage({  payerKey: payer.publicKey,  recentBlockhash: blockhash,  instructions: arrayOfInstructions, // note this is an array of instructions}).compileToV0Message([lookupTableAccount]);// create a v0 transaction from the v0 messageconst transactionV0 = new web3.VersionedTransaction(messageV0);// sign the v0 transaction using the file system wallet we created named `payer`transactionV0.sign([payer]);// send and confirm the transaction// (NOTE: There is NOT an array of Signers here; see the note below...)const txid = await web3.sendAndConfirmTransaction(connection, transactionV0);console.log(  `Transaction: https://explorer.solana.com/tx/${txidV0}?cluster=devnet`,);NOTE:
When sending a VersionedTransaction to the cluster, it must be signed BEFORE calling the
sendAndConfirmTransaction method. If you pass an array of Signer
(like with legacy transactions) the method will trigger an error!More Resources​Read the proposal for Address Lookup Tables and Versioned transactionsExample Rust program using Address Lookup Tables